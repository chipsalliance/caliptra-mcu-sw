# Licensed under the Apache-2.0 license

name: FPGA Tests

on:
  pull_request:
jobs:
  build_test_binaries:
    runs-on: [e2-standard-32]
    timeout-minutes: 60
    env:
      SCCACHE_VERSION: 0.10.0
      SCCACHE_GHA_CACHE_TO: sccache-caliptra-mcu-sw
      SCCACHE_GHA_CACHE_FROM: sccache-caliptra-mcu-sw
      SCCACHE_GHA_ENABLED: "on"
      CACHE_BUSTER: 9ff0db888888
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Restore sccache binary
        uses: actions/cache/restore@v3
        id: sccache_bin_restore
        with:
          path: ~/.cargo/bin/sccache
          key: sccache-bin-${{ env.SCCACHE_VERSION }}-${{ env.CACHE_BUSTER }}

      - name: Install sccache
        if: steps.sccache_bin_restore.outputs.cache-hit != 'true'
        run: |
          rustup install 1.85
          cargo +1.85 install sccache --version ${SCCACHE_VERSION} --no-default-features --features=gha --locked

      # Save the sccache binary immediately so we can reuse it in future runs
      # even if the rest of the current run fails.
      - name: Save sccache binary
        uses: actions/cache/save@v3
        if: steps.sccache_bin_restore.outputs.cache-hit != 'true'
        with:
          path: ~/.cargo/bin/sccache
          key: ${{ steps.sccache_bin_restore.outputs.cache-primary-key }}

      - name: Configure sccache
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('RUSTC_WRAPPER', process.env.HOME + '/.cargo/bin/sccache');
            core.exportVariable('ACTIONS_RESULTS_URL', process.env.ACTIONS_RESULTS_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
            core.exportVariable('ACTIONS_CACHE_SERVICE_V2', 'on');
          
      - name: Install cross compiler
        run: |
          sudo apt-get update -qy && sudo apt-get install -y gcc-aarch64-linux-gnu squashfs-tools
          rustup toolchain install 1.84-x86_64-unknown-linux-gnu
          rustup target add riscv32imc-unknown-none-elf
          rustup target add aarch64-unknown-linux-gnu

      - name: Build test firmware
        run: |
          # Build ROM and runtime binaries
          cargo xtask all-build --platform fpga
          sccache --show-stats

          # Cross compile xtask for the ARM core
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER="aarch64-linux-gnu-gcc"
          cargo build -p xtask --features fpga_realtime --target aarch64-unknown-linux-gnu
          sccache --show-stats

          mkdir -p /tmp/caliptra-binaries
          tar -cvz -f /tmp/caliptra-binaries/caliptra-binaries.tar.gz \
            target/aarch64-unknown-linux-gnu/debug/xtask \
            target/all-fw.zip

          FEATURES="fpga_realtime"
          cargo nextest archive \
            --features=${FEATURES} \
            --release \
            --target=aarch64-unknown-linux-gnu \
            --archive-file=/tmp/caliptra-test-binaries.tar.zst
          sccache --show-stats

          mkdir /tmp/caliptra-test-binaries/
          tar xvf /tmp/caliptra-test-binaries.tar.zst -C /tmp/caliptra-test-binaries/
          mksquashfs /tmp/caliptra-test-binaries /tmp/caliptra-test-binaries.sqsh -comp zstd

      - name: 'Upload test binaries artifact'
        uses: actions/upload-artifact@v4
        with:
          name: caliptra-test-binaries${{ inputs.artifact-suffix }}
          path: /tmp/caliptra-test-binaries.sqsh
          retention-days: 1

      - name: 'Upload test firmware artifact'
        uses: actions/upload-artifact@v4
        with:
          name: caliptra-test-firmware${{ inputs.artifact-suffix }}
          path: /tmp/caliptra-binaries
          retention-days: 1

  test_artifacts:
    runs-on: vck190-mcu
    needs: build_test_binaries
    timeout-minutes: 120

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: 'recursive' 

      - name: 'Download Test Binaries Artifact'
        uses: actions/download-artifact@v4
        with:
          name: caliptra-test-binaries${{ inputs.artifact-suffix }}
          path: /tmp/caliptra-test-binaries.sqsh

      - name: 'Download Test Firmware Artifact'
        uses: actions/download-artifact@v4
        with:
          name: caliptra-test-firmware${{ inputs.artifact-suffix }}
          path: /tmp/caliptra-binaries

      - name: Mount binaries
        run: |
          tar -xvf /tmp/caliptra-binaries/caliptra-binaries.tar.gz

          sudo mkdir /tmp/caliptra-test-binaries
          echo mount squashfs
          sudo mount /tmp/caliptra-test-binaries.sqsh/caliptra-test-binaries.sqsh /tmp/caliptra-test-binaries -t squashfs -o loop
          find /tmp/caliptra-test-binaries

      # - name: Execute FPGA Boot flow
      #   run: |
      #     export RUST_BACKTRACE=1
      #     sudo ./target/aarch64-unknown-linux-gnu/debug/xtask fpga-run --zip target/all-fw.zip

      - name: Execute tests
        run: |
          export RUST_BACKTRACE=1
          export RUST_TEST_THREADS=1
          TEST_BIN=/tmp/caliptra-test-binaries

          COMMON_ARGS=(
              --cargo-metadata="${TEST_BIN}/target/nextest/cargo-metadata.json"
              --binaries-metadata="${TEST_BIN}/target/nextest/binaries-metadata.json"
              --target-dir-remap="${TEST_BIN}/target"
              --workspace-remap=.
              -E 'package(mcu-hw-model) - test(model_emulated::test::test_new_unbooted)' # Modify this as we onboard crates to the FPGA test suite.
          )

          cargo-nextest nextest list \
              "${COMMON_ARGS[@]}" \
              --message-format json > /tmp/nextest-list.json

          sudo CPTRA_FIRMWARE_BUNDLE="${PWD}/target/all-fw.zip" cargo-nextest nextest run \
              "${COMMON_ARGS[@]}" \
              --test-threads=${RUST_TEST_THREADS} \
              --no-fail-fast \
              --profile=nightly

      - name: 'Upload test results'
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: caliptra-test-results${{ inputs.artifact-suffix }}
          path: |
            /tmp/junit.xml
            /tmp/nextest-list.json
