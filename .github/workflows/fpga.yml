# Licensed under the Apache-2.0 license

name: FPGA Tests

on:
  pull_request:
  workflow_dispatch:
jobs:
  build_test_binaries:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/clundin25/caliptra-build-image:latest
      env: --user root
    timeout-minutes: 60
    env:
      SCCACHE_GHA_CACHE_TO: sccache-caliptra-mcu-sw
      SCCACHE_GHA_CACHE_FROM: sccache-caliptra-mcu-sw
      SCCACHE_GHA_ENABLED: "on"
      # Change this to a new random value if you suspect the cache is corrupted
      CACHE_BUSTER: 9ff0ac869868
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Configure sccache
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('RUSTC_WRAPPER', '/root/.cargo/bin/sccache');
            core.exportVariable('ACTIONS_RESULTS_URL', process.env.ACTIONS_RESULTS_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
            core.exportVariable('ACTIONS_CACHE_SERVICE_V2', 'on');

      - name: Build test firmware
        run: |
          export PATH="${PATH}:/root/.cargo/bin"
          # In the CI we really want to avoid lengthy build steps.
          # Vendoring OpenSSL is a huge time sink, and instead linking a prebuilt
          # OpenSSL reduces build speeds.
          export OPENSSL_NO_VENDOR=true
          export OPENSSL_STATIC=true
          export X86_64_UNKNOWN_LINUX_GNU_OPENSSL_DIR=/tmp/openssl/native
          export AARCH64_UNKNOWN_LINUX_GNU_OPENSSL_DIR=/tmp/openssl/arm

          # Cross compile for the ARM core
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER="aarch64-linux-gnu-gcc"

          # Build ROM and runtime binaries
          echo "Cross compiling FPGA binaries"
          cargo xtask-fpga all-build --platform fpga
          sccache --show-stats

          mkdir -p /tmp/caliptra-binaries
          tar -cvz -f /tmp/caliptra-binaries/caliptra-binaries.tar.gz \
            target/all-fw.zip

          echo "Cross compiling test binaries"
          FEATURES="fpga_realtime"
          cargo nextest archive \
            --features=${FEATURES} \
            --release \
            --target=aarch64-unknown-linux-gnu \
            --archive-file=/tmp/caliptra-test-binaries.tar.zst
          sccache --show-stats

          mkdir /tmp/caliptra-test-binaries/
          tar xvf /tmp/caliptra-test-binaries.tar.zst -C /tmp/caliptra-test-binaries/
          mksquashfs /tmp/caliptra-test-binaries /tmp/caliptra-test-binaries.sqsh -comp zstd

      - name: 'Upload test binaries artifact'
        uses: actions/upload-artifact@v4
        with:
          name: caliptra-test-binaries${{ inputs.artifact-suffix }}
          path: /tmp/caliptra-test-binaries.sqsh
          retention-days: 1

      - name: 'Upload test firmware artifact'
        uses: actions/upload-artifact@v4
        with:
          name: caliptra-test-firmware${{ inputs.artifact-suffix }}
          path: /tmp/caliptra-binaries
          retention-days: 1

  test_artifacts:
    runs-on: vck190-mcu
    needs: build_test_binaries
    timeout-minutes: 120

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: 'recursive' 

      - name: 'Download Test Binaries Artifact'
        uses: actions/download-artifact@v4
        with:
          name: caliptra-test-binaries${{ inputs.artifact-suffix }}
          path: /tmp/caliptra-test-binaries.sqsh

      - name: 'Download Test Firmware Artifact'
        uses: actions/download-artifact@v4
        with:
          name: caliptra-test-firmware${{ inputs.artifact-suffix }}
          path: /tmp/caliptra-binaries

      - name: Mount binaries
        run: |
          tar -xvf /tmp/caliptra-binaries/caliptra-binaries.tar.gz

          sudo mkdir /tmp/caliptra-test-binaries
          echo mount squashfs
          sudo mount /tmp/caliptra-test-binaries.sqsh/caliptra-test-binaries.sqsh /tmp/caliptra-test-binaries -t squashfs -o loop
          find /tmp/caliptra-test-binaries

      - name: Execute tests
        run: |
          export RUST_BACKTRACE=1
          export RUST_TEST_THREADS=1
          TEST_BIN=/tmp/caliptra-test-binaries

          COMMON_ARGS=(
              --cargo-metadata="${TEST_BIN}/target/nextest/cargo-metadata.json"
              --binaries-metadata="${TEST_BIN}/target/nextest/binaries-metadata.json"
              --target-dir-remap="${TEST_BIN}/target"
              --workspace-remap=.
              -E 'package(mcu-hw-model) - test(model_emulated::test::test_new_unbooted)' # Modify this as we onboard crates to the FPGA test suite.
          )

          cargo-nextest nextest list \
              "${COMMON_ARGS[@]}" \
              --message-format json > /tmp/nextest-list.json

          sudo CPTRA_FIRMWARE_BUNDLE="${PWD}/target/all-fw.zip" cargo-nextest nextest run \
              "${COMMON_ARGS[@]}" \
              --test-threads=${RUST_TEST_THREADS} \
              --no-fail-fast \
              --profile=nightly

      - name: 'Upload test results'
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: caliptra-test-results${{ inputs.artifact-suffix }}
          path: |
            /tmp/junit.xml
            /tmp/nextest-list.json
