/* Caliptra Utility Host Library C API */
#ifndef CALIPTRA_UTIL_HOST_H
#define CALIPTRA_UTIL_HOST_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef CALIPTRA_UTIL_HOST_H
#define CALIPTRA_UTIL_HOST_H

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/**
 * C-compatible command types
 */
typedef enum CCommandType {
    Spdm = 0,
    Pldm = 1,
    Mailbox = 2,
    Certificate = 3,
    Custom = 4,
} CCommandType;

/**
 * C-compatible error codes
 */
typedef enum CaliptraUtilResult {
    Success = 0,
    Error = -1,
    InvalidParam = -2,
    TransportError = -3,
    CommandNotFound = -4,
    PluginError = -5,
    TimeoutError = -6,
    NotConnected = -7,
} CaliptraUtilResult;

/**
 * Opaque handle for CaliptraUtilHost
 */
typedef struct CaliptraUtilHostHandle CaliptraUtilHostHandle;

/**
 * Transport configuration for C API
 */
typedef struct CTransportConfig {
    unsigned int max_retries;
    unsigned int timeout_ms;
    size_t buffer_size;
} CTransportConfig;

/**
 * C-compatible command structure
 */
typedef struct CCommand {
    enum CCommandType command_type;
    unsigned int opcode;
    const uint8_t *payload_data;
    size_t payload_size;
} CCommand;

/**
 * C-compatible command result
 */
typedef struct CCommandResult {
    int success;
    uint8_t *response_data;
    size_t response_size;
    char *error_message;
    unsigned int execution_time_ms;
} CCommandResult;

/**
 * Initialize the library (must be called before any other functions)
 */
enum CaliptraUtilResult caliptra_util_host_init(void);

/**
 * Create a new CaliptraUtilHost instance with MCTP transport
 */
struct CaliptraUtilHostHandle *caliptra_util_host_create_mctp(unsigned int endpoint_id);

/**
 * Create a new CaliptraUtilHost instance with MCTP transport and custom config
 */
struct CaliptraUtilHostHandle *caliptra_util_host_create_mctp_with_config(unsigned int endpoint_id,
                                                                          struct CTransportConfig config);

/**
 * Create a new CaliptraUtilHost instance with DOE transport
 */
struct CaliptraUtilHostHandle *caliptra_util_host_create_doe(void);

/**
 * Create a new CaliptraUtilHost instance with DOE transport and custom config
 */
struct CaliptraUtilHostHandle *caliptra_util_host_create_doe_with_config(struct CTransportConfig config);

/**
 * Destroy a CaliptraUtilHost instance
 */
void caliptra_util_host_destroy(struct CaliptraUtilHostHandle *handle);

/**
 * Connect the transport
 */
enum CaliptraUtilResult caliptra_util_host_connect(struct CaliptraUtilHostHandle *handle);

/**
 * Disconnect the transport
 */
enum CaliptraUtilResult caliptra_util_host_disconnect(struct CaliptraUtilHostHandle *handle);

/**
 * Check if transport is connected
 */
int caliptra_util_host_is_connected(struct CaliptraUtilHostHandle *handle);

/**
 * Execute a command
 */
enum CaliptraUtilResult caliptra_util_host_execute_command(struct CaliptraUtilHostHandle *handle,
                                                           const struct CCommand *command,
                                                           struct CCommandResult *result);

/**
 * Send raw data through transport
 */
enum CaliptraUtilResult caliptra_util_host_send_raw(struct CaliptraUtilHostHandle *handle,
                                                    const uint8_t *data,
                                                    size_t data_size,
                                                    uint8_t **response_data,
                                                    size_t *response_size);

/**
 * Free memory allocated by the library
 */
void caliptra_util_host_free_result(struct CCommandResult *result);

/**
 * Free memory allocated for raw send response
 */
void caliptra_util_host_free_data(uint8_t *data);

/**
 * Register built-in command handlers
 */
enum CaliptraUtilResult caliptra_util_host_register_builtin_handlers(struct CaliptraUtilHostHandle *handle);

/**
 * Get list of registered command handlers
 */
enum CaliptraUtilResult caliptra_util_host_list_handlers(struct CaliptraUtilHostHandle *handle,
                                                         enum CCommandType **handlers,
                                                         size_t *count);

/**
 * Free memory allocated for handler list
 */
void caliptra_util_host_free_handlers(enum CCommandType *handlers);

/**
 * Get library version string
 */
const char *caliptra_util_host_version(void);

#endif /* CALIPTRA_UTIL_HOST_H */


#ifdef __cplusplus
}
#endif

#endif /* CALIPTRA_UTIL_HOST_H */
