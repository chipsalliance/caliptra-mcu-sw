// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-ss repo at c5d7a2917bc0cf0a27bed802a3664c0bf3d5bf8b
//
pub const INTERFACE_REGS_ADDR: u32 = 0xa401_0000;
pub mod bits {
    //! Types that represent individual registers (bitfields).
    use tock_registers::register_bitfields;
    register_bitfields! {
        u32,
            pub Control [
                CptraPwrgood OFFSET(0) NUMBITS(1) [],
                CptraSsRstB OFFSET(1) NUMBITS(1) [],
                CptraObfUdsSeedVld OFFSET(2) NUMBITS(1) [],
                CptraObfFieldEntropyVld OFFSET(3) NUMBITS(1) [],
                BootfsmBrkpoint OFFSET(6) NUMBITS(1) [],
                SsDebugIntent OFFSET(7) NUMBITS(1) [],
                I3cAxiUserIdFiltering OFFSET(8) NUMBITS(1) [],
                TriggerAxiReset OFFSET(31) NUMBITS(1) [],
            ],
            pub MciError [
                MciErrorFatal OFFSET(0) NUMBITS(1) [],
                MciErrorNonFatal OFFSET(1) NUMBITS(1) [],
            ],
            pub McuConfig [
                McuNoRomConfig OFFSET(0) NUMBITS(1) [],
                CptraSsMciBootSeqBrkpointI OFFSET(1) NUMBITS(1) [],
                CptraSsLcAllowRmaOnPpdI OFFSET(2) NUMBITS(1) [],
                CptraSsLcCtrlScanRstNiI OFFSET(3) NUMBITS(1) [],
                CptraSsLcEsclateScrapState0I OFFSET(4) NUMBITS(1) [],
                CptraSsLcEsclateScrapState1I OFFSET(5) NUMBITS(1) [],
            ],
            pub Status [
                CptraErrorFatal OFFSET(0) NUMBITS(1) [],
                CptraErrorNonFatal OFFSET(1) NUMBITS(1) [],
                ReadyForFuses OFFSET(2) NUMBITS(1) [],
                ReadyForFwPush OFFSET(3) NUMBITS(1) [],
                ReadyForRuntime OFFSET(4) NUMBITS(1) [],
                MailboxDataAvail OFFSET(5) NUMBITS(1) [],
                MailboxFlowDone OFFSET(6) NUMBITS(1) [],
            ],
    }
}
pub mod regs {
    //! Types that represent registers.
    use tock_registers::register_structs;
    register_structs! {
        pub InterfaceRegs {
            (0x0 => pub fpga_magic: tock_registers::registers::ReadOnly<u32>),
            (0x4 => pub fpga_version: tock_registers::registers::ReadOnly<u32>),
            (0x8 => pub control: tock_registers::registers::ReadWrite<u32, crate::interface_regs::bits::Control::Register>),
            (0xc => pub status: tock_registers::registers::ReadOnly<u32, crate::interface_regs::bits::Status::Register>),
            (0x10 => pub arm_user: tock_registers::registers::ReadWrite<u32>),
            (0x14 => pub itrng_divisor: tock_registers::registers::ReadWrite<u32>),
            (0x18 => pub cycle_count: tock_registers::registers::ReadOnly<u32>),
            (0x1c => _reserved0),
            (0x30 => pub generic_input_wires: [tock_registers::registers::ReadWrite<u32>; 2]),
            (0x38 => pub generic_output_wires: [tock_registers::registers::ReadOnly<u32>; 2]),
            (0x40 => pub cptra_obf_key: [tock_registers::registers::ReadWrite<u32>; 8]),
            (0x60 => pub cptra_csr_hmac_key: [tock_registers::registers::ReadWrite<u32>; 16]),
            (0xa0 => pub cptra_obf_uds_seed: [tock_registers::registers::ReadWrite<u32>; 16]),
            (0xe0 => pub cptra_obf_field_entropy: [tock_registers::registers::ReadWrite<u32>; 8]),
            (0x100 => pub lsu_user: tock_registers::registers::ReadWrite<u32>),
            (0x104 => pub ifu_user: tock_registers::registers::ReadWrite<u32>),
            (0x108 => pub dma_axi_user: tock_registers::registers::ReadWrite<u32>),
            (0x10c => pub soc_config_user: tock_registers::registers::ReadWrite<u32>),
            (0x110 => pub sram_config_user: tock_registers::registers::ReadWrite<u32>),
            (0x114 => pub mcu_reset_vector: tock_registers::registers::ReadWrite<u32>),
            (0x118 => pub mci_error: tock_registers::registers::ReadOnly<u32, crate::interface_regs::bits::MciError::Register>),
            (0x11c => pub mcu_config: tock_registers::registers::ReadWrite<u32, crate::interface_regs::bits::McuConfig::Register>),
            (0x120 => pub uds_seed_base_addr: tock_registers::registers::ReadWrite<u32>),
            (0x124 => pub prod_debug_unlock_auth_pk_hash_reg_bank_offset: tock_registers::registers::ReadWrite<u32>),
            (0x128 => pub num_of_prod_debug_unlock_auth_pk_hashes: tock_registers::registers::ReadWrite<u32>),
            (0x12c => pub mci_generic_input_wires: [tock_registers::registers::ReadWrite<u32>; 2]),
            (0x134 => pub mci_generic_output_wires: [tock_registers::registers::ReadOnly<u32>; 2]),
            (0x13c => @END),
        }
    }
}
