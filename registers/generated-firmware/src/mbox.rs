// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-rtl repo at 0e43b8e7011c1c8761e114bc949fcad6cf30538e
// , caliptra-ss repo at 9911c2b0e4bac9e4b48f6c2155c86cb116159734
// , and i3c-core repo at d5c715103f529ade0e5d375a53c5692daaa9c54b
//
pub mod bits {
    //! Types that represent individual registers (bitfields).
    use tock_registers::register_bitfields;
    register_bitfields! {
        u32,
            pub Execute [
                Execute OFFSET(0) NUMBITS(1) [],
            ],
            pub Lock [
                Lock OFFSET(0) NUMBITS(1) [],
            ],
            pub Status [
                /// Indicates the status of mailbox command
                /// [br]Caliptra Access: RW
                /// [br]SOC Access:      RW
                /// [br]TAP Access [in debug/manuf mode]: RO
                Status OFFSET(0) NUMBITS(4) [
                    CmdBusy = 0,
                    DataReady = 1,
                    CmdComplete = 2,
                    CmdFailure = 3,
                ],
                /// Indicates a correctable ECC single-bit error was
                /// detected and corrected while reading dataout.
                /// Auto-clears when mbox_execute field is cleared.
                /// [br]Caliptra Access: RO
                /// [br]SOC Access:      RO
                /// [br]TAP Access [in debug/manuf mode]: RO
                EccSingleError OFFSET(4) NUMBITS(1) [],
                /// Indicates an uncorrectable ECC double-bit error
                /// was detected while reading dataout.
                /// Firmware developers are advised to set the command
                /// status to CMD_FAILURE in response.
                /// Auto-clears when mbox_execute field is cleared.
                /// [br]Caliptra Access: RO
                /// [br]SOC Access:      RO
                /// [br]TAP Access [in debug/manuf mode]: RO
                EccDoubleError OFFSET(5) NUMBITS(1) [],
                /// Indicates the present state of the mailbox FSM
                /// [br]Caliptra Access: RO
                /// [br]SOC Access:      RO
                /// [br]TAP Access [in debug/manuf mode]: RO
                MboxFsmPs OFFSET(6) NUMBITS(3) [
                    MboxIdle = 0,
                    MboxRdyForCmd = 1,
                    MboxRdyForDlen = 3,
                    MboxRdyForData = 2,
                    MboxExecuteUc = 6,
                    MboxExecuteSoc = 4,
                    MboxError = 7,
                ],
                /// Indicates that the current lock was acquired by the SoC
                /// [br]Caliptra Access: RO
                /// [br]SOC Access:      RO
                /// [br]TAP Access [in debug/manuf mode]: RO
                SocHasLock OFFSET(9) NUMBITS(1) [],
                /// Returns the current read pointer for the mailbox
                /// [br]Caliptra Access: RO
                /// [br]SOC Access:      RO
                /// [br]TAP Access [in debug/manuf mode]: RO
                MboxRdptr OFFSET(10) NUMBITS(15) [],
            ],
            pub Unlock [
                Unlock OFFSET(0) NUMBITS(1) [],
            ],
    }
}
pub mod regs {
    //! Types that represent registers.
    use tock_registers::register_structs;
    register_structs! {
        pub Mbox {
            (0x0 => pub lock: tock_registers::registers::ReadOnly<u32, crate::mbox::bits::Lock::Register>),
            (0x4 => pub user: tock_registers::registers::ReadOnly<u32>),
            (0x8 => pub cmd: tock_registers::registers::ReadOnly<u32>),
            (0xc => pub dlen: tock_registers::registers::ReadOnly<u32>),
            (0x10 => pub datain: tock_registers::registers::ReadOnly<u32>),
            (0x14 => pub dataout: tock_registers::registers::ReadOnly<u32>),
            (0x18 => pub execute: tock_registers::registers::ReadOnly<u32, crate::mbox::bits::Execute::Register>),
            (0x1c => pub status: tock_registers::registers::ReadOnly<u32, crate::mbox::bits::Status::Register>),
            (0x20 => pub unlock: tock_registers::registers::ReadOnly<u32, crate::mbox::bits::Unlock::Register>),
            (0x24 => @END),
        }
    }
}
pub mod instances {
    //! Types that represent instances.

    /// A zero-sized type that represents ownership of this
    /// peripheral, used to get access to a Register lock. Most
    /// programs create one of these in unsafe code near the top of
    /// main(), and pass it to the driver responsible for managing
    /// all access to the hardware.
    pub struct MboxCsr {
        // Ensure the only way to create this is via Self::new()
        _priv: (),
    }
    impl MboxCsr {
        pub const PTR: *mut u32 = 0x3002_0000 as *mut u32;

        /// # Safety
        ///
        /// Caller must ensure that all concurrent use of this
        /// peripheral in the firmware is done so in a compatible
        /// way. The simplest way to enforce this is to only call
        /// this function once.
        #[inline(always)]
        pub unsafe fn new() -> Self {
            Self { _priv: () }
        }

        /// Returns a register block that can be used to read
        /// registers from this peripheral, but cannot write.
        #[inline(always)]
        pub fn regs(&self) -> RegisterBlock<ureg::RealMmio> {
            RegisterBlock {
                ptr: Self::PTR,
                mmio: core::default::Default::default(),
            }
        }

        /// Return a register block that can be used to read and
        /// write this peripheral's registers.
        #[inline(always)]
        pub fn regs_mut(&mut self) -> RegisterBlock<ureg::RealMmioMut> {
            RegisterBlock {
                ptr: Self::PTR,
                mmio: core::default::Default::default(),
            }
        }
    }
}
