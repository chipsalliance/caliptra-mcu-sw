// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-rtl repo at 0e43b8e7011c1c8761e114bc949fcad6cf30538e
// , caliptra-ss repo at 9911c2b0e4bac9e4b48f6c2155c86cb116159734
// , and i3c-core repo at d5c715103f529ade0e5d375a53c5692daaa9c54b
//
pub mod bits {
    //! Types that represent individual registers (bitfields).
    use tock_registers::register_bitfields;
    register_bitfields! {
        u32,
            Status [
                /// Indicates the status of mailbox command
                /// [br]Caliptra Access: RW
                /// [br]SOC Access:      RW
                /// [br]TAP Access [in debug/manuf mode]: RO
                Status OFFSET(0) NUMBITS(4) [
                    CmdBusy = 0,
                    DataReady = 1,
                    CmdComplete = 2,
                    CmdFailure = 3,
                ],
                /// Indicates a correctable ECC single-bit error was
                /// detected and corrected while reading dataout.
                /// Auto-clears when mbox_execute field is cleared.
                /// [br]Caliptra Access: RO
                /// [br]SOC Access:      RO
                /// [br]TAP Access [in debug/manuf mode]: RO
                EccSingleError OFFSET(4) NUMBITS(1) [],
                /// Indicates an uncorrectable ECC double-bit error
                /// was detected while reading dataout.
                /// Firmware developers are advised to set the command
                /// status to CMD_FAILURE in response.
                /// Auto-clears when mbox_execute field is cleared.
                /// [br]Caliptra Access: RO
                /// [br]SOC Access:      RO
                /// [br]TAP Access [in debug/manuf mode]: RO
                EccDoubleError OFFSET(5) NUMBITS(1) [],
                /// Indicates the present state of the mailbox FSM
                /// [br]Caliptra Access: RO
                /// [br]SOC Access:      RO
                /// [br]TAP Access [in debug/manuf mode]: RO
                MboxFsmPs OFFSET(6) NUMBITS(3) [
                    MboxIdle = 0,
                    MboxRdyForCmd = 1,
                    MboxRdyForDlen = 3,
                    MboxRdyForData = 2,
                    MboxExecuteUc = 6,
                    MboxExecuteSoc = 4,
                    MboxError = 7,
                ],
                /// Indicates that the current lock was acquired by the SoC
                /// [br]Caliptra Access: RO
                /// [br]SOC Access:      RO
                /// [br]TAP Access [in debug/manuf mode]: RO
                SocHasLock OFFSET(9) NUMBITS(1) [],
                /// Returns the current read pointer for the mailbox
                /// [br]Caliptra Access: RO
                /// [br]SOC Access:      RO
                /// [br]TAP Access [in debug/manuf mode]: RO
                MboxRdptr OFFSET(10) NUMBITS(15) [],
            ],
            Execute [
                Execute OFFSET(0) NUMBITS(1) [],
            ],
            Lock [
                Lock OFFSET(0) NUMBITS(1) [],
            ],
            Unlock [
                Unlock OFFSET(0) NUMBITS(1) [],
            ],
    }
}
