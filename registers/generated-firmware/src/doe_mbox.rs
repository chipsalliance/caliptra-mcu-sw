// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-ss repo at 4f006115433f926f4e599bc8718a39168f70ce5f
//
pub const DOE_MBOX_ADDR: u32 = 0x2f00_0000;
pub mod bits {
    //! Types that represent individual registers (bitfields).
    use tock_registers::register_bitfields;
    register_bitfields! {
        u32,
            pub DoeMboxDataReady [
                /// Data ready indicator set by SoC. When set to 1, data is ready to be consumed by MCU for processing.
                DataReady OFFSET(0) NUMBITS(1) [],
            ],
            pub DoeMboxLock [
                /// DOE Mailbox lock register for mailbox access. Reading 0 will set the lock.
                Lock OFFSET(0) NUMBITS(1) [],
            ],
            pub DoeMboxStatus [
                /// Set by producer (core2) when new data is ready for consumer (core1). Cleared by consumer after data is read.
                DataReady OFFSET(0) NUMBITS(1) [],
                /// Indicates mailbox error.
                Error OFFSET(1) NUMBITS(1) [],
            ],
    }
}
pub mod regs {
    //! Types that represent registers.
    use tock_registers::register_structs;
    register_structs! {
        pub DoeMbox {
            (0x0 => pub doe_mbox_lock: tock_registers::registers::ReadOnly<u32, crate::doe_mbox::bits::DoeMboxLock::Register>),
            (0x4 => pub doe_mbox_dlen: tock_registers::registers::ReadWrite<u32>),
            (0x8 => pub doe_mbox_status: tock_registers::registers::ReadOnly<u32, crate::doe_mbox::bits::DoeMboxStatus::Register>),
            (0xc => pub doe_mbox_data_ready: tock_registers::registers::ReadWrite<u32, crate::doe_mbox::bits::DoeMboxDataReady::Register>),
            (0x10 => _reserved0),
            (0x2f001000 => pub doe_mbox_sram: [tock_registers::registers::ReadWrite<u32>; 262144]),
            (0x2f101000 => @END),
        }
    }
}
