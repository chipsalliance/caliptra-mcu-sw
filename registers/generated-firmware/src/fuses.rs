// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with otp_ctrl_mmap.hjson
use zeroize::Zeroize;
/// Fuses contains the data in the OTP controller laid out as described in the controller configuration.
#[derive(Zeroize)]
pub struct Fuses {
    /// Software manufacturing partition.
    #[zeroize(skip)]
    pub sw_test_unlock_partition: [u8; 72],

    /// Secret manufacturing partition.
    pub secret_manuf_partition: [u8; 72],

    /// Secret production partition 0.
    pub secret_prod_partition_0: [u8; 16],

    /// Secret production partition 1.
    pub secret_prod_partition_1: [u8; 16],

    /// Secret production partition 2.
    pub secret_prod_partition_2: [u8; 16],

    /// Secret production partition 3.
    pub secret_prod_partition_3: [u8; 16],

    /// Software manufacturing partition.
    #[zeroize(skip)]
    pub sw_manuf_partition: [u8; 520],

    /// Secret life-cycle unlock token partition.
    pub secret_lc_transition_partition: [u8; 184],

    /// SVN Partition.
    #[zeroize(skip)]
    pub svn_partition: [u8; 40],

    /// Vendor test partition.
    #[zeroize(skip)]
    pub vendor_test_partition: [u8; 64],

    /// Vendor hashes manufacturing partition.
    #[zeroize(skip)]
    pub vendor_hashes_manuf_partition: [u8; 64],

    /// Vendor hashes production partition.
    #[zeroize(skip)]
    pub vendor_hashes_prod_partition: [u8; 864],

    /// Vendor revocations production partition.
    #[zeroize(skip)]
    pub vendor_revocations_prod_partition: [u8; 216],

    /// Vendor secret production partition.
    pub vendor_secret_prod_partition: [u8; 520],

    /// Vendor non-secret production partition.
    #[zeroize(skip)]
    pub vendor_non_secret_prod_partition: [u8; 520],

    /// Lifecycle partition.
    /// This contains lifecycle transition count and state. This partition
    /// cannot be locked since the life cycle state needs to advance to RMA
    /// in-field. Note that while this partition is not marked secret, it
    /// is not readable nor writeable via the DAI. Only the LC controller
    /// can access this partition, and even via the LC controller it is not
    /// possible to read the raw manufacturing life cycle state in encoded
    /// form, since that encoding is considered a netlist secret. The LC
    /// controller only exposes a decoded version of this state.
    #[zeroize(skip)]
    pub life_cycle: [u8; 88],
}
impl Fuses {
    pub fn cptra_ss_manuf_debug_unlock_token(&self) -> &[u8] {
        &self.sw_test_unlock_partition[0..64]
    }
    pub fn cptra_core_uds_seed(&self) -> &[u8] {
        &self.secret_manuf_partition[0..64]
    }
    pub fn cptra_core_field_entropy_0(&self) -> &[u8] {
        &self.secret_prod_partition_0[0..8]
    }
    pub fn cptra_core_field_entropy_1(&self) -> &[u8] {
        &self.secret_prod_partition_1[0..8]
    }
    pub fn cptra_core_field_entropy_2(&self) -> &[u8] {
        &self.secret_prod_partition_2[0..8]
    }
    pub fn cptra_core_field_entropy_3(&self) -> &[u8] {
        &self.secret_prod_partition_3[0..8]
    }
    pub fn cptra_core_anti_rollback_disable(&self) -> &[u8] {
        &self.sw_manuf_partition[0..4]
    }
    pub fn cptra_core_idevid_cert_idevid_attr(&self) -> &[u8] {
        &self.sw_manuf_partition[4..100]
    }
    pub fn soc_specific_idevid_certificate(&self) -> &[u8] {
        &self.sw_manuf_partition[100..104]
    }
    pub fn cptra_core_idevid_manuf_hsm_identifier(&self) -> &[u8] {
        &self.sw_manuf_partition[104..120]
    }
    pub fn cptra_core_soc_stepping_id(&self) -> &[u8] {
        &self.sw_manuf_partition[120..124]
    }
    pub fn cptra_ss_prod_debug_unlock_pks_0(&self) -> &[u8] {
        &self.sw_manuf_partition[124..172]
    }
    pub fn cptra_ss_prod_debug_unlock_pks_1(&self) -> &[u8] {
        &self.sw_manuf_partition[172..220]
    }
    pub fn cptra_ss_prod_debug_unlock_pks_2(&self) -> &[u8] {
        &self.sw_manuf_partition[220..268]
    }
    pub fn cptra_ss_prod_debug_unlock_pks_3(&self) -> &[u8] {
        &self.sw_manuf_partition[268..316]
    }
    pub fn cptra_ss_prod_debug_unlock_pks_4(&self) -> &[u8] {
        &self.sw_manuf_partition[316..364]
    }
    pub fn cptra_ss_prod_debug_unlock_pks_5(&self) -> &[u8] {
        &self.sw_manuf_partition[364..412]
    }
    pub fn cptra_ss_prod_debug_unlock_pks_6(&self) -> &[u8] {
        &self.sw_manuf_partition[412..460]
    }
    pub fn cptra_ss_prod_debug_unlock_pks_7(&self) -> &[u8] {
        &self.sw_manuf_partition[460..508]
    }
    pub fn cptra_ss_test_unlock_token_1(&self) -> &[u8] {
        &self.secret_lc_transition_partition[0..16]
    }
    pub fn cptra_ss_test_unlock_token_2(&self) -> &[u8] {
        &self.secret_lc_transition_partition[16..32]
    }
    pub fn cptra_ss_test_unlock_token_3(&self) -> &[u8] {
        &self.secret_lc_transition_partition[32..48]
    }
    pub fn cptra_ss_test_unlock_token_4(&self) -> &[u8] {
        &self.secret_lc_transition_partition[48..64]
    }
    pub fn cptra_ss_test_unlock_token_5(&self) -> &[u8] {
        &self.secret_lc_transition_partition[64..80]
    }
    pub fn cptra_ss_test_unlock_token_6(&self) -> &[u8] {
        &self.secret_lc_transition_partition[80..96]
    }
    pub fn cptra_ss_test_unlock_token_7(&self) -> &[u8] {
        &self.secret_lc_transition_partition[96..112]
    }
    pub fn cptra_ss_test_exit_to_manuf_token(&self) -> &[u8] {
        &self.secret_lc_transition_partition[112..128]
    }
    pub fn cptra_ss_manuf_to_prod_token(&self) -> &[u8] {
        &self.secret_lc_transition_partition[128..144]
    }
    pub fn cptra_ss_prod_to_prod_end_token(&self) -> &[u8] {
        &self.secret_lc_transition_partition[144..160]
    }
    pub fn cptra_ss_rma_token(&self) -> &[u8] {
        &self.secret_lc_transition_partition[160..176]
    }
    pub fn cptra_core_fmc_key_manifest_svn(&self) -> &[u8] {
        &self.svn_partition[0..4]
    }
    pub fn cptra_core_runtime_svn(&self) -> &[u8] {
        &self.svn_partition[4..20]
    }
    pub fn cptra_core_soc_manifest_svn(&self) -> &[u8] {
        &self.svn_partition[20..36]
    }
    pub fn cptra_core_soc_manifest_max_svn(&self) -> &[u8] {
        &self.svn_partition[36..40]
    }
    pub fn vendor_test(&self) -> &[u8] {
        &self.vendor_test_partition[0..32]
    }
    pub fn cptra_core_vendor_pk_hash_0(&self) -> &[u8] {
        &self.vendor_hashes_manuf_partition[0..48]
    }
    pub fn cptra_core_pqc_key_type_0(&self) -> &[u8] {
        &self.vendor_hashes_manuf_partition[48..52]
    }
    pub fn cptra_ss_owner_pk_hash(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[0..48]
    }
    pub fn cptra_ss_owner_pqc_key_type(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[48..52]
    }
    pub fn cptra_ss_owner_pk_hash_valid(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[52..56]
    }
    pub fn cptra_core_vendor_pk_hash_1(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[56..104]
    }
    pub fn cptra_core_pqc_key_type_1(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[104..108]
    }
    pub fn cptra_core_vendor_pk_hash_2(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[108..156]
    }
    pub fn cptra_core_pqc_key_type_2(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[156..160]
    }
    pub fn cptra_core_vendor_pk_hash_3(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[160..208]
    }
    pub fn cptra_core_pqc_key_type_3(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[208..212]
    }
    pub fn cptra_core_vendor_pk_hash_4(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[212..260]
    }
    pub fn cptra_core_pqc_key_type_4(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[260..264]
    }
    pub fn cptra_core_vendor_pk_hash_5(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[264..312]
    }
    pub fn cptra_core_pqc_key_type_5(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[312..316]
    }
    pub fn cptra_core_vendor_pk_hash_6(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[316..364]
    }
    pub fn cptra_core_pqc_key_type_6(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[364..368]
    }
    pub fn cptra_core_vendor_pk_hash_7(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[368..416]
    }
    pub fn cptra_core_pqc_key_type_7(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[416..420]
    }
    pub fn cptra_core_vendor_pk_hash_8(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[420..468]
    }
    pub fn cptra_core_pqc_key_type_8(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[468..472]
    }
    pub fn cptra_core_vendor_pk_hash_9(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[472..520]
    }
    pub fn cptra_core_pqc_key_type_9(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[520..524]
    }
    pub fn cptra_core_vendor_pk_hash_10(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[524..572]
    }
    pub fn cptra_core_pqc_key_type_10(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[572..576]
    }
    pub fn cptra_core_vendor_pk_hash_11(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[576..624]
    }
    pub fn cptra_core_pqc_key_type_11(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[624..628]
    }
    pub fn cptra_core_vendor_pk_hash_12(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[628..676]
    }
    pub fn cptra_core_pqc_key_type_12(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[676..680]
    }
    pub fn cptra_core_vendor_pk_hash_13(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[680..728]
    }
    pub fn cptra_core_pqc_key_type_13(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[728..732]
    }
    pub fn cptra_core_vendor_pk_hash_14(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[732..780]
    }
    pub fn cptra_core_pqc_key_type_14(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[780..784]
    }
    pub fn cptra_core_vendor_pk_hash_15(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[784..832]
    }
    pub fn cptra_core_pqc_key_type_15(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[832..836]
    }
    pub fn cptra_core_vendor_pk_hash_valid(&self) -> &[u8] {
        &self.vendor_hashes_prod_partition[836..852]
    }
    pub fn cptra_ss_owner_ecc_revocation(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[0..4]
    }
    pub fn cptra_ss_owner_lms_revocation(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[4..8]
    }
    pub fn cptra_ss_owner_mldsa_revocation(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[8..12]
    }
    pub fn cptra_core_ecc_revocation_0(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[12..16]
    }
    pub fn cptra_core_lms_revocation_0(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[16..20]
    }
    pub fn cptra_core_mldsa_revocation_0(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[20..24]
    }
    pub fn cptra_core_ecc_revocation_1(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[24..28]
    }
    pub fn cptra_core_lms_revocation_1(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[28..32]
    }
    pub fn cptra_core_mldsa_revocation_1(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[32..36]
    }
    pub fn cptra_core_ecc_revocation_2(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[36..40]
    }
    pub fn cptra_core_lms_revocation_2(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[40..44]
    }
    pub fn cptra_core_mldsa_revocation_2(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[44..48]
    }
    pub fn cptra_core_ecc_revocation_3(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[48..52]
    }
    pub fn cptra_core_lms_revocation_3(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[52..56]
    }
    pub fn cptra_core_mldsa_revocation_3(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[56..60]
    }
    pub fn cptra_core_ecc_revocation_4(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[60..64]
    }
    pub fn cptra_core_lms_revocation_4(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[64..68]
    }
    pub fn cptra_core_mldsa_revocation_4(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[68..72]
    }
    pub fn cptra_core_ecc_revocation_5(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[72..76]
    }
    pub fn cptra_core_lms_revocation_5(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[76..80]
    }
    pub fn cptra_core_mldsa_revocation_5(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[80..84]
    }
    pub fn cptra_core_ecc_revocation_6(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[84..88]
    }
    pub fn cptra_core_lms_revocation_6(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[88..92]
    }
    pub fn cptra_core_mldsa_revocation_6(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[92..96]
    }
    pub fn cptra_core_ecc_revocation_7(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[96..100]
    }
    pub fn cptra_core_lms_revocation_7(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[100..104]
    }
    pub fn cptra_core_mldsa_revocation_7(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[104..108]
    }
    pub fn cptra_core_ecc_revocation_8(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[108..112]
    }
    pub fn cptra_core_lms_revocation_8(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[112..116]
    }
    pub fn cptra_core_mldsa_revocation_8(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[116..120]
    }
    pub fn cptra_core_ecc_revocation_9(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[120..124]
    }
    pub fn cptra_core_lms_revocation_9(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[124..128]
    }
    pub fn cptra_core_mldsa_revocation_9(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[128..132]
    }
    pub fn cptra_core_ecc_revocation_10(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[132..136]
    }
    pub fn cptra_core_lms_revocation_10(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[136..140]
    }
    pub fn cptra_core_mldsa_revocation_10(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[140..144]
    }
    pub fn cptra_core_ecc_revocation_11(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[144..148]
    }
    pub fn cptra_core_lms_revocation_11(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[148..152]
    }
    pub fn cptra_core_mldsa_revocation_11(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[152..156]
    }
    pub fn cptra_core_ecc_revocation_12(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[156..160]
    }
    pub fn cptra_core_lms_revocation_12(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[160..164]
    }
    pub fn cptra_core_mldsa_revocation_12(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[164..168]
    }
    pub fn cptra_core_ecc_revocation_13(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[168..172]
    }
    pub fn cptra_core_lms_revocation_13(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[172..176]
    }
    pub fn cptra_core_mldsa_revocation_13(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[176..180]
    }
    pub fn cptra_core_ecc_revocation_14(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[180..184]
    }
    pub fn cptra_core_lms_revocation_14(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[184..188]
    }
    pub fn cptra_core_mldsa_revocation_14(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[188..192]
    }
    pub fn cptra_core_ecc_revocation_15(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[192..196]
    }
    pub fn cptra_core_lms_revocation_15(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[196..200]
    }
    pub fn cptra_core_mldsa_revocation_15(&self) -> &[u8] {
        &self.vendor_revocations_prod_partition[200..204]
    }
    pub fn cptra_ss_vendor_specific_secret_fuse_0(&self) -> &[u8] {
        &self.vendor_secret_prod_partition[0..32]
    }
    pub fn cptra_ss_vendor_specific_secret_fuse_1(&self) -> &[u8] {
        &self.vendor_secret_prod_partition[32..64]
    }
    pub fn cptra_ss_vendor_specific_secret_fuse_2(&self) -> &[u8] {
        &self.vendor_secret_prod_partition[64..96]
    }
    pub fn cptra_ss_vendor_specific_secret_fuse_3(&self) -> &[u8] {
        &self.vendor_secret_prod_partition[96..128]
    }
    pub fn cptra_ss_vendor_specific_secret_fuse_4(&self) -> &[u8] {
        &self.vendor_secret_prod_partition[128..160]
    }
    pub fn cptra_ss_vendor_specific_secret_fuse_5(&self) -> &[u8] {
        &self.vendor_secret_prod_partition[160..192]
    }
    pub fn cptra_ss_vendor_specific_secret_fuse_6(&self) -> &[u8] {
        &self.vendor_secret_prod_partition[192..224]
    }
    pub fn cptra_ss_vendor_specific_secret_fuse_7(&self) -> &[u8] {
        &self.vendor_secret_prod_partition[224..256]
    }
    pub fn cptra_ss_vendor_specific_secret_fuse_8(&self) -> &[u8] {
        &self.vendor_secret_prod_partition[256..288]
    }
    pub fn cptra_ss_vendor_specific_secret_fuse_9(&self) -> &[u8] {
        &self.vendor_secret_prod_partition[288..320]
    }
    pub fn cptra_ss_vendor_specific_secret_fuse_10(&self) -> &[u8] {
        &self.vendor_secret_prod_partition[320..352]
    }
    pub fn cptra_ss_vendor_specific_secret_fuse_11(&self) -> &[u8] {
        &self.vendor_secret_prod_partition[352..384]
    }
    pub fn cptra_ss_vendor_specific_secret_fuse_12(&self) -> &[u8] {
        &self.vendor_secret_prod_partition[384..416]
    }
    pub fn cptra_ss_vendor_specific_secret_fuse_13(&self) -> &[u8] {
        &self.vendor_secret_prod_partition[416..448]
    }
    pub fn cptra_ss_vendor_specific_secret_fuse_14(&self) -> &[u8] {
        &self.vendor_secret_prod_partition[448..480]
    }
    pub fn cptra_ss_vendor_specific_secret_fuse_15(&self) -> &[u8] {
        &self.vendor_secret_prod_partition[480..512]
    }
    pub fn cptra_ss_vendor_specific_non_secret_fuse_0(&self) -> &[u8] {
        &self.vendor_non_secret_prod_partition[0..32]
    }
    pub fn cptra_ss_vendor_specific_non_secret_fuse_1(&self) -> &[u8] {
        &self.vendor_non_secret_prod_partition[32..64]
    }
    pub fn cptra_ss_vendor_specific_non_secret_fuse_2(&self) -> &[u8] {
        &self.vendor_non_secret_prod_partition[64..96]
    }
    pub fn cptra_ss_vendor_specific_non_secret_fuse_3(&self) -> &[u8] {
        &self.vendor_non_secret_prod_partition[96..128]
    }
    pub fn cptra_ss_vendor_specific_non_secret_fuse_4(&self) -> &[u8] {
        &self.vendor_non_secret_prod_partition[128..160]
    }
    pub fn cptra_ss_vendor_specific_non_secret_fuse_5(&self) -> &[u8] {
        &self.vendor_non_secret_prod_partition[160..192]
    }
    pub fn cptra_ss_vendor_specific_non_secret_fuse_6(&self) -> &[u8] {
        &self.vendor_non_secret_prod_partition[192..224]
    }
    pub fn cptra_ss_vendor_specific_non_secret_fuse_7(&self) -> &[u8] {
        &self.vendor_non_secret_prod_partition[224..256]
    }
    pub fn cptra_ss_vendor_specific_non_secret_fuse_8(&self) -> &[u8] {
        &self.vendor_non_secret_prod_partition[256..288]
    }
    pub fn cptra_ss_vendor_specific_non_secret_fuse_9(&self) -> &[u8] {
        &self.vendor_non_secret_prod_partition[288..320]
    }
    pub fn cptra_ss_vendor_specific_non_secret_fuse_10(&self) -> &[u8] {
        &self.vendor_non_secret_prod_partition[320..352]
    }
    pub fn cptra_ss_vendor_specific_non_secret_fuse_11(&self) -> &[u8] {
        &self.vendor_non_secret_prod_partition[352..384]
    }
    pub fn cptra_ss_vendor_specific_non_secret_fuse_12(&self) -> &[u8] {
        &self.vendor_non_secret_prod_partition[384..416]
    }
    pub fn cptra_ss_vendor_specific_non_secret_fuse_13(&self) -> &[u8] {
        &self.vendor_non_secret_prod_partition[416..448]
    }
    pub fn cptra_ss_vendor_specific_non_secret_fuse_14(&self) -> &[u8] {
        &self.vendor_non_secret_prod_partition[448..480]
    }
    pub fn cptra_ss_vendor_specific_non_secret_fuse_15(&self) -> &[u8] {
        &self.vendor_non_secret_prod_partition[480..512]
    }
    pub fn lc_transition_cnt(&self) -> &[u8] {
        &self.life_cycle[0..48]
    }
    pub fn lc_state(&self) -> &[u8] {
        &self.life_cycle[48..88]
    }
}
impl Default for Fuses {
    fn default() -> Self {
        Self {
            sw_test_unlock_partition: [0; 72],
            secret_manuf_partition: [0; 72],
            secret_prod_partition_0: [0; 16],
            secret_prod_partition_1: [0; 16],
            secret_prod_partition_2: [0; 16],
            secret_prod_partition_3: [0; 16],
            sw_manuf_partition: [0; 520],
            secret_lc_transition_partition: [0; 184],
            svn_partition: [0; 40],
            vendor_test_partition: [0; 64],
            vendor_hashes_manuf_partition: [0; 64],
            vendor_hashes_prod_partition: [0; 864],
            vendor_revocations_prod_partition: [0; 216],
            vendor_secret_prod_partition: [0; 520],
            vendor_non_secret_prod_partition: [0; 520],
            life_cycle: [0; 88],
        }
    }
}
pub const SW_TEST_UNLOCK_PARTITION_BYTE_OFFSET: usize = 0;
pub const SW_TEST_UNLOCK_PARTITION_BYTE_SIZE: usize = 72;
pub const SECRET_MANUF_PARTITION_BYTE_OFFSET: usize = 72;
pub const SECRET_MANUF_PARTITION_BYTE_SIZE: usize = 72;
pub const SECRET_PROD_PARTITION_0_BYTE_OFFSET: usize = 144;
pub const SECRET_PROD_PARTITION_0_BYTE_SIZE: usize = 16;
pub const SECRET_PROD_PARTITION_1_BYTE_OFFSET: usize = 160;
pub const SECRET_PROD_PARTITION_1_BYTE_SIZE: usize = 16;
pub const SECRET_PROD_PARTITION_2_BYTE_OFFSET: usize = 176;
pub const SECRET_PROD_PARTITION_2_BYTE_SIZE: usize = 16;
pub const SECRET_PROD_PARTITION_3_BYTE_OFFSET: usize = 192;
pub const SECRET_PROD_PARTITION_3_BYTE_SIZE: usize = 16;
pub const SW_MANUF_PARTITION_BYTE_OFFSET: usize = 208;
pub const SW_MANUF_PARTITION_BYTE_SIZE: usize = 520;
pub const SECRET_LC_TRANSITION_PARTITION_BYTE_OFFSET: usize = 728;
pub const SECRET_LC_TRANSITION_PARTITION_BYTE_SIZE: usize = 184;
pub const SVN_PARTITION_BYTE_OFFSET: usize = 912;
pub const SVN_PARTITION_BYTE_SIZE: usize = 40;
pub const VENDOR_TEST_PARTITION_BYTE_OFFSET: usize = 952;
pub const VENDOR_TEST_PARTITION_BYTE_SIZE: usize = 64;
pub const VENDOR_HASHES_MANUF_PARTITION_BYTE_OFFSET: usize = 1016;
pub const VENDOR_HASHES_MANUF_PARTITION_BYTE_SIZE: usize = 64;
pub const VENDOR_HASHES_PROD_PARTITION_BYTE_OFFSET: usize = 1080;
pub const VENDOR_HASHES_PROD_PARTITION_BYTE_SIZE: usize = 864;
pub const VENDOR_REVOCATIONS_PROD_PARTITION_BYTE_OFFSET: usize = 1944;
pub const VENDOR_REVOCATIONS_PROD_PARTITION_BYTE_SIZE: usize = 216;
pub const VENDOR_SECRET_PROD_PARTITION_BYTE_OFFSET: usize = 2160;
pub const VENDOR_SECRET_PROD_PARTITION_BYTE_SIZE: usize = 520;
pub const VENDOR_NON_SECRET_PROD_PARTITION_BYTE_OFFSET: usize = 2680;
pub const VENDOR_NON_SECRET_PROD_PARTITION_BYTE_SIZE: usize = 520;
pub const LIFE_CYCLE_BYTE_OFFSET: usize = 3200;
pub const LIFE_CYCLE_BYTE_SIZE: usize = 88;
