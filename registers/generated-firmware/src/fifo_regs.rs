// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-ss repo at aaa49a4be2af25002369a0e662ad63a490b86e70
//
pub const FIFO_REGS_ADDR: u32 = 0xa401_1000;
pub mod bits {
    //! Types that represent individual registers (bitfields).
    use tock_registers::register_bitfields;
    register_bitfields! {
        u32,
            pub DbgFifoStatus [
                DbgFifoEmpty OFFSET(0) NUMBITS(1) [],
                DbgFifoFull OFFSET(1) NUMBITS(1) [],
            ],
            pub ItrngFifoStatus [
                ItrngFifoEmpty OFFSET(0) NUMBITS(1) [],
                ItrngFifoFull OFFSET(1) NUMBITS(1) [],
                ItrngFifoReset OFFSET(2) NUMBITS(1) [],
            ],
            pub LogFifoData [
                NextChar OFFSET(0) NUMBITS(8) [],
                CharValid OFFSET(8) NUMBITS(1) [],
            ],
            pub LogFifoStatus [
                LogFifoEmpty OFFSET(0) NUMBITS(1) [],
                LogFifoFull OFFSET(1) NUMBITS(1) [],
            ],
    }
}
pub mod regs {
    //! Types that represent registers.
    use tock_registers::register_structs;
    register_structs! {
        pub FifoRegs {
            (0x0 => pub log_fifo_data: tock_registers::registers::ReadOnly<u32, crate::fifo_regs::bits::LogFifoData::Register>),
            (0x4 => pub log_fifo_status: tock_registers::registers::ReadOnly<u32, crate::fifo_regs::bits::LogFifoStatus::Register>),
            (0x8 => pub itrng_fifo_data: tock_registers::registers::ReadWrite<u32>),
            (0xc => pub itrng_fifo_status: tock_registers::registers::ReadWrite<u32, crate::fifo_regs::bits::ItrngFifoStatus::Register>),
            (0x10 => pub dbg_fifo_pop: tock_registers::registers::ReadOnly<u32>),
            (0x14 => pub dbg_fifo_push: tock_registers::registers::ReadWrite<u32>),
            (0x18 => pub dbg_fifo_status: tock_registers::registers::ReadOnly<u32, crate::fifo_regs::bits::DbgFifoStatus::Register>),
            (0x1c => @END),
        }
    }
}
