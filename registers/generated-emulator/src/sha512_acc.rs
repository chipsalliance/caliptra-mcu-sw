// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-ss repo at a621fff9df7015821eda6f7f73265fef74a01375
//
#[allow(unused_imports)]
use tock_registers::interfaces::{Readable, Writeable};
pub trait Sha512AccPeripheral {
    fn poll(&mut self) {}
    fn warm_reset(&mut self) {}
    fn update_reset(&mut self) {}
    fn read_lock(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::sha512_acc::bits::Lock::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_lock(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::sha512_acc::bits::Lock::Register,
        >,
    ) {
    }
    fn read_id(&mut self) -> u32 {
        0
    }
    fn write_id(&mut self, _val: u32) {}
    fn read_mode(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::sha512_acc::bits::Mode::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_mode(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::sha512_acc::bits::Mode::Register,
        >,
    ) {
    }
    fn read_start_address(&mut self) -> u32 {
        0
    }
    fn write_start_address(&mut self, _val: u32) {}
    fn read_dlen(&mut self) -> u32 {
        0
    }
    fn write_dlen(&mut self, _val: u32) {}
    fn read_datain(&mut self) -> u32 {
        0
    }
    fn write_datain(&mut self, _val: u32) {}
    fn read_execute(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::sha512_acc::bits::Execute::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_execute(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::sha512_acc::bits::Execute::Register,
        >,
    ) {
    }
    fn read_status(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::sha512_acc::bits::Status::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_status(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::sha512_acc::bits::Status::Register,
        >,
    ) {
    }
    fn read_digest(&mut self) -> u32 {
        0
    }
    fn write_digest(&mut self, _val: u32) {}
    fn read_control(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::sha512_acc::bits::Control::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_control(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::sha512_acc::bits::Control::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_global_intr_en_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::GlobalIntrEnT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_global_intr_en_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::GlobalIntrEnT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error_intr_en_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::ErrorIntrEnT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error_intr_en_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::ErrorIntrEnT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_notif_intr_en_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::NotifIntrEnT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_notif_intr_en_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::NotifIntrEnT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error_global_intr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::GlobalIntrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error_global_intr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::GlobalIntrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_notif_global_intr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::GlobalIntrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_notif_global_intr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::GlobalIntrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error_internal_intr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::ErrorIntrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error_internal_intr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::ErrorIntrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_notif_internal_intr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::NotifIntrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_notif_internal_intr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::NotifIntrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error_intr_trig_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::ErrorIntrTrigT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error_intr_trig_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::ErrorIntrTrigT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_notif_intr_trig_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::NotifIntrTrigT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_notif_intr_trig_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::NotifIntrTrigT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error0_intr_count_r(&mut self) -> u32 {
        0
    }
    fn write_intr_block_rf_error0_intr_count_r(&mut self, _val: u32) {}
    fn read_intr_block_rf_error1_intr_count_r(&mut self) -> u32 {
        0
    }
    fn write_intr_block_rf_error1_intr_count_r(&mut self, _val: u32) {}
    fn read_intr_block_rf_error2_intr_count_r(&mut self) -> u32 {
        0
    }
    fn write_intr_block_rf_error2_intr_count_r(&mut self, _val: u32) {}
    fn read_intr_block_rf_error3_intr_count_r(&mut self) -> u32 {
        0
    }
    fn write_intr_block_rf_error3_intr_count_r(&mut self, _val: u32) {}
    fn read_intr_block_rf_notif_cmd_done_intr_count_r(&mut self) -> u32 {
        0
    }
    fn write_intr_block_rf_notif_cmd_done_intr_count_r(&mut self, _val: u32) {}
    fn read_intr_block_rf_error0_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error0_intr_count_incr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error1_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error1_intr_count_incr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error2_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error2_intr_count_incr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error3_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error3_intr_count_incr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_notif_cmd_done_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_notif_cmd_done_intr_count_incr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
        >,
    ) {
    }
}
pub struct Sha512AccBus {
    pub periph: Box<dyn Sha512AccPeripheral>,
}
impl emulator_bus::Bus for Sha512AccBus {
    fn read(
        &mut self,
        size: emulator_types::RvSize,
        addr: emulator_types::RvAddr,
    ) -> Result<emulator_types::RvData, emulator_bus::BusError> {
        match (size, addr) {
            (emulator_types::RvSize::Word, 0) => Ok(emulator_types::RvData::from(
                self.periph.read_lock().reg.get(),
            )),
            (emulator_types::RvSize::Word, 1..=3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 8) => Ok(emulator_types::RvData::from(
                self.periph.read_mode().reg.get(),
            )),
            (emulator_types::RvSize::Word, 9..=0xb) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xc) => Ok(emulator_types::RvData::from(
                self.periph.read_start_address(),
            )),
            (emulator_types::RvSize::Word, 0xd..=0xf) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x10) => {
                Ok(emulator_types::RvData::from(self.periph.read_dlen()))
            }
            (emulator_types::RvSize::Word, 0x11..=0x13) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x14) => {
                Ok(emulator_types::RvData::from(self.periph.read_datain()))
            }
            (emulator_types::RvSize::Word, 0x15..=0x17) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x18) => Ok(emulator_types::RvData::from(
                self.periph.read_execute().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x19..=0x1b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1c) => Ok(emulator_types::RvData::from(
                self.periph.read_status().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x1d..=0x1f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x60) => Ok(emulator_types::RvData::from(
                self.periph.read_control().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x61..=0x63) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x800) => Ok(emulator_types::RvData::from(
                self.periph.read_intr_block_rf_global_intr_en_r().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x801..=0x803) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x804) => Ok(emulator_types::RvData::from(
                self.periph.read_intr_block_rf_error_intr_en_r().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x805..=0x807) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x808) => Ok(emulator_types::RvData::from(
                self.periph.read_intr_block_rf_notif_intr_en_r().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x809..=0x80b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x80c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_global_intr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x80d..=0x80f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x810) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_global_intr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x811..=0x813) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x814) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_internal_intr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x815..=0x817) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x818) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_internal_intr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x819..=0x81b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x81c) => Ok(emulator_types::RvData::from(
                self.periph.read_intr_block_rf_error_intr_trig_r().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x81d..=0x81f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x820) => Ok(emulator_types::RvData::from(
                self.periph.read_intr_block_rf_notif_intr_trig_r().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x821..=0x823) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x900) => Ok(emulator_types::RvData::from(
                self.periph.read_intr_block_rf_error0_intr_count_r(),
            )),
            (emulator_types::RvSize::Word, 0x901..=0x903) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x904) => Ok(emulator_types::RvData::from(
                self.periph.read_intr_block_rf_error1_intr_count_r(),
            )),
            (emulator_types::RvSize::Word, 0x905..=0x907) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x908) => Ok(emulator_types::RvData::from(
                self.periph.read_intr_block_rf_error2_intr_count_r(),
            )),
            (emulator_types::RvSize::Word, 0x909..=0x90b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x90c) => Ok(emulator_types::RvData::from(
                self.periph.read_intr_block_rf_error3_intr_count_r(),
            )),
            (emulator_types::RvSize::Word, 0x90d..=0x90f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x980) => Ok(emulator_types::RvData::from(
                self.periph.read_intr_block_rf_notif_cmd_done_intr_count_r(),
            )),
            (emulator_types::RvSize::Word, 0x981..=0x983) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa00) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error0_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa01..=0xa03) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa04) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error1_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa05..=0xa07) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa08) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error2_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa09..=0xa0b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa0c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error3_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa0d..=0xa0f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa10) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_cmd_done_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa11..=0xa13) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            _ => Err(emulator_bus::BusError::LoadAccessFault),
        }
    }
    fn write(
        &mut self,
        size: emulator_types::RvSize,
        addr: emulator_types::RvAddr,
        val: emulator_types::RvData,
    ) -> Result<(), emulator_bus::BusError> {
        match (size, addr) {
            (emulator_types::RvSize::Word, 0) => {
                self.periph
                    .write_lock(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 1..=3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 4) => {
                self.periph.write_id(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 5..=7) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 8) => {
                self.periph
                    .write_mode(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 9..=0xb) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xc) => {
                self.periph.write_start_address(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xd..=0xf) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x10) => {
                self.periph.write_dlen(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x11..=0x13) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x14) => {
                self.periph.write_datain(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x15..=0x17) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x18) => {
                self.periph
                    .write_execute(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x19..=0x1b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1c) => {
                self.periph
                    .write_status(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1d..=0x1f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x20) => {
                self.periph.write_digest(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x21..=0x23) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x60) => {
                self.periph
                    .write_control(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x61..=0x63) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x800) => {
                self.periph.write_intr_block_rf_global_intr_en_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x801..=0x803) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x804) => {
                self.periph
                    .write_intr_block_rf_error_intr_en_r(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x805..=0x807) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x808) => {
                self.periph
                    .write_intr_block_rf_notif_intr_en_r(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x809..=0x80b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x80c) => {
                self.periph.write_intr_block_rf_error_global_intr_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x80d..=0x80f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x810) => {
                self.periph.write_intr_block_rf_notif_global_intr_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x811..=0x813) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x814) => {
                self.periph.write_intr_block_rf_error_internal_intr_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x815..=0x817) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x818) => {
                self.periph.write_intr_block_rf_notif_internal_intr_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x819..=0x81b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x81c) => {
                self.periph.write_intr_block_rf_error_intr_trig_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x81d..=0x81f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x820) => {
                self.periph.write_intr_block_rf_notif_intr_trig_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x821..=0x823) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x900) => {
                self.periph.write_intr_block_rf_error0_intr_count_r(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x901..=0x903) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x904) => {
                self.periph.write_intr_block_rf_error1_intr_count_r(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x905..=0x907) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x908) => {
                self.periph.write_intr_block_rf_error2_intr_count_r(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x909..=0x90b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x90c) => {
                self.periph.write_intr_block_rf_error3_intr_count_r(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x90d..=0x90f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x980) => {
                self.periph
                    .write_intr_block_rf_notif_cmd_done_intr_count_r(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x981..=0x983) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa00) => {
                self.periph.write_intr_block_rf_error0_intr_count_incr_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa01..=0xa03) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa04) => {
                self.periph.write_intr_block_rf_error1_intr_count_incr_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa05..=0xa07) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa08) => {
                self.periph.write_intr_block_rf_error2_intr_count_incr_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa09..=0xa0b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa0c) => {
                self.periph.write_intr_block_rf_error3_intr_count_incr_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa0d..=0xa0f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa10) => {
                self.periph
                    .write_intr_block_rf_notif_cmd_done_intr_count_incr_r(
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa11..=0xa13) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            _ => Err(emulator_bus::BusError::StoreAccessFault),
        }
    }
    fn poll(&mut self) {
        self.periph.poll();
    }
    fn warm_reset(&mut self) {
        self.periph.warm_reset();
    }
    fn update_reset(&mut self) {
        self.periph.update_reset();
    }
}
