// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-rtl repo at 0e43b8e7011c1c8761e114bc949fcad6cf30538e
// , caliptra-ss repo at 9911c2b0e4bac9e4b48f6c2155c86cb116159734
// , and i3c-core repo at d5c715103f529ade0e5d375a53c5692daaa9c54b
//
#[allow(unused_imports)]
use tock_registers::interfaces::{Readable, Writeable};
pub trait SocPeripheral {
    fn poll(&mut self) {}
    fn warm_reset(&mut self) {}
    fn update_reset(&mut self) {}
    fn read_cptra_hw_error_fatal(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::CptraHwErrorFatal::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_hw_error_fatal(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::CptraHwErrorFatal::Register,
        >,
    ) {
    }
    fn read_cptra_hw_error_non_fatal(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::CptraHwErrorNonFatal::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_hw_error_non_fatal(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::CptraHwErrorNonFatal::Register,
        >,
    ) {
    }
    fn read_cptra_fw_error_fatal(&mut self) -> u32 {
        0
    }
    fn write_cptra_fw_error_fatal(&mut self, _val: u32) {}
    fn read_cptra_fw_error_non_fatal(&mut self) -> u32 {
        0
    }
    fn write_cptra_fw_error_non_fatal(&mut self, _val: u32) {}
    fn read_cptra_hw_error_enc(&mut self) -> u32 {
        0
    }
    fn write_cptra_hw_error_enc(&mut self, _val: u32) {}
    fn read_cptra_fw_error_enc(&mut self) -> u32 {
        0
    }
    fn write_cptra_fw_error_enc(&mut self, _val: u32) {}
    fn read_cptra_fw_extended_error_info(&mut self) -> u32 {
        0
    }
    fn write_cptra_fw_extended_error_info(&mut self, _val: u32) {}
    fn read_cptra_boot_status(&mut self) -> u32 {
        0
    }
    fn write_cptra_boot_status(&mut self, _val: u32) {}
    fn read_cptra_flow_status(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::CptraFlowStatus::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_flow_status(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::CptraFlowStatus::Register,
        >,
    ) {
    }
    fn read_cptra_reset_reason(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::CptraResetReason::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_reset_reason(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::CptraResetReason::Register,
        >,
    ) {
    }
    fn read_cptra_security_state(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::CptraSecurityState::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_security_state(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::CptraSecurityState::Register,
        >,
    ) {
    }
    fn read_cptra_mbox_valid_pauser(&mut self) -> u32 {
        0
    }
    fn write_cptra_mbox_valid_pauser(&mut self, _val: u32) {}
    fn read_cptra_mbox_pauser_lock(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::CptraXxxxPauserLock::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_mbox_pauser_lock(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::CptraXxxxPauserLock::Register,
        >,
    ) {
    }
    fn read_cptra_trng_valid_pauser(&mut self) -> u32 {
        0
    }
    fn write_cptra_trng_valid_pauser(&mut self, _val: u32) {}
    fn read_cptra_trng_pauser_lock(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::CptraXxxxPauserLock::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_trng_pauser_lock(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::CptraXxxxPauserLock::Register,
        >,
    ) {
    }
    fn read_cptra_trng_data(&mut self) -> u32 {
        0
    }
    fn write_cptra_trng_data(&mut self, _val: u32) {}
    fn read_cptra_trng_ctrl(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::CptraTrngCtrl::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_trng_ctrl(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::CptraTrngCtrl::Register,
        >,
    ) {
    }
    fn read_cptra_trng_status(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc_trng::bits::CptraTrngStatus::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_trng_status(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc_trng::bits::CptraTrngStatus::Register,
        >,
    ) {
    }
    fn read_cptra_fuse_wr_done(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::CptraFuseWrDone::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_fuse_wr_done(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::CptraFuseWrDone::Register,
        >,
    ) {
    }
    fn read_cptra_timer_config(&mut self) -> u32 {
        0
    }
    fn write_cptra_timer_config(&mut self, _val: u32) {}
    fn read_cptra_bootfsm_go(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::CptraBootfsmGo::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_bootfsm_go(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::CptraBootfsmGo::Register,
        >,
    ) {
    }
    fn read_cptra_dbg_manuf_service_reg(&mut self) -> u32 {
        0
    }
    fn write_cptra_dbg_manuf_service_reg(&mut self, _val: u32) {}
    fn read_cptra_clk_gating_en(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::CptraClkGatingEn::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_clk_gating_en(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::CptraClkGatingEn::Register,
        >,
    ) {
    }
    fn read_cptra_generic_input_wires(&mut self) -> u32 {
        0
    }
    fn write_cptra_generic_input_wires(&mut self, _val: u32) {}
    fn read_cptra_generic_output_wires(&mut self) -> u32 {
        0
    }
    fn write_cptra_generic_output_wires(&mut self, _val: u32) {}
    fn read_cptra_hw_rev_id(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::CptraHwRevId::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_hw_rev_id(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::CptraHwRevId::Register,
        >,
    ) {
    }
    fn read_cptra_fw_rev_id(&mut self) -> u32 {
        0
    }
    fn write_cptra_fw_rev_id(&mut self, _val: u32) {}
    fn read_cptra_hw_config(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::CptraHwConfig::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_hw_config(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::CptraHwConfig::Register,
        >,
    ) {
    }
    fn read_cptra_wdt_timer1_en(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::CptraWdtTimer1En::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_wdt_timer1_en(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::CptraWdtTimer1En::Register,
        >,
    ) {
    }
    fn read_cptra_wdt_timer1_ctrl(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::CptraWdtTimer1Ctrl::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_wdt_timer1_ctrl(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::CptraWdtTimer1Ctrl::Register,
        >,
    ) {
    }
    fn read_cptra_wdt_timer1_timeout_period(&mut self) -> u32 {
        0
    }
    fn write_cptra_wdt_timer1_timeout_period(&mut self, _val: u32) {}
    fn read_cptra_wdt_timer2_en(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::CptraWdtTimer2En::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_wdt_timer2_en(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::CptraWdtTimer2En::Register,
        >,
    ) {
    }
    fn read_cptra_wdt_timer2_ctrl(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::CptraWdtTimer2Ctrl::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_wdt_timer2_ctrl(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::CptraWdtTimer2Ctrl::Register,
        >,
    ) {
    }
    fn read_cptra_wdt_timer2_timeout_period(&mut self) -> u32 {
        0
    }
    fn write_cptra_wdt_timer2_timeout_period(&mut self, _val: u32) {}
    fn read_cptra_wdt_status(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::mci_ctrl::bits::CptraWdtStatus::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_wdt_status(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci_ctrl::bits::CptraWdtStatus::Register,
        >,
    ) {
    }
    fn read_cptra_fuse_valid_pauser(&mut self) -> u32 {
        0
    }
    fn write_cptra_fuse_valid_pauser(&mut self, _val: u32) {}
    fn read_cptra_fuse_pauser_lock(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::CptraXxxxPauserLock::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_fuse_pauser_lock(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::CptraXxxxPauserLock::Register,
        >,
    ) {
    }
    fn read_cptra_wdt_cfg(&mut self) -> u32 {
        0
    }
    fn write_cptra_wdt_cfg(&mut self, _val: u32) {}
    fn read_cptra_i_trng_entropy_config_0(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::CptraItrngEntropyConfig0::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_i_trng_entropy_config_0(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::CptraItrngEntropyConfig0::Register,
        >,
    ) {
    }
    fn read_cptra_i_trng_entropy_config_1(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::CptraItrngEntropyConfig1::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_i_trng_entropy_config_1(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::CptraItrngEntropyConfig1::Register,
        >,
    ) {
    }
    fn read_cptra_rsvd_reg(&mut self) -> u32 {
        0
    }
    fn write_cptra_rsvd_reg(&mut self, _val: u32) {}
    fn read_fuse_uds_seed(&mut self) -> u32 {
        0
    }
    fn write_fuse_uds_seed(&mut self, _val: u32) {}
    fn read_fuse_field_entropy(&mut self) -> u32 {
        0
    }
    fn write_fuse_field_entropy(&mut self, _val: u32) {}
    fn read_fuse_key_manifest_pk_hash(&mut self) -> u32 {
        0
    }
    fn write_fuse_key_manifest_pk_hash(&mut self, _val: u32) {}
    fn read_fuse_key_manifest_pk_hash_mask(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::FuseKeyManifestPkHashMask::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_fuse_key_manifest_pk_hash_mask(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::FuseKeyManifestPkHashMask::Register,
        >,
    ) {
    }
    fn read_fuse_owner_pk_hash(&mut self) -> u32 {
        0
    }
    fn write_fuse_owner_pk_hash(&mut self, _val: u32) {}
    fn read_fuse_fmc_key_manifest_svn(&mut self) -> u32 {
        0
    }
    fn write_fuse_fmc_key_manifest_svn(&mut self, _val: u32) {}
    fn read_fuse_runtime_svn(&mut self) -> u32 {
        0
    }
    fn write_fuse_runtime_svn(&mut self, _val: u32) {}
    fn read_fuse_anti_rollback_disable(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::FuseAntiRollbackDisable::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_fuse_anti_rollback_disable(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::FuseAntiRollbackDisable::Register,
        >,
    ) {
    }
    fn read_fuse_idevid_cert_attr(&mut self) -> u32 {
        0
    }
    fn write_fuse_idevid_cert_attr(&mut self, _val: u32) {}
    fn read_fuse_idevid_manuf_hsm_id(&mut self) -> u32 {
        0
    }
    fn write_fuse_idevid_manuf_hsm_id(&mut self, _val: u32) {}
    fn read_fuse_life_cycle(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::FuseLifeCycle::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_fuse_life_cycle(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::FuseLifeCycle::Register,
        >,
    ) {
    }
    fn read_fuse_lms_verify(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::FuseLmsVerify::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_fuse_lms_verify(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::FuseLmsVerify::Register,
        >,
    ) {
    }
    fn read_fuse_lms_revocation(&mut self) -> u32 {
        0
    }
    fn write_fuse_lms_revocation(&mut self, _val: u32) {}
    fn read_fuse_soc_stepping_id(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::FuseSocSteppingId::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_fuse_soc_stepping_id(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::FuseSocSteppingId::Register,
        >,
    ) {
    }
    fn read_internal_obf_key(&mut self) -> u32 {
        0
    }
    fn write_internal_obf_key(&mut self, _val: u32) {}
    fn read_internal_iccm_lock(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::InternalIccmLock::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_internal_iccm_lock(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::InternalIccmLock::Register,
        >,
    ) {
    }
    fn read_internal_fw_update_reset(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::InternalFwUpdateReset::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_internal_fw_update_reset(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::InternalFwUpdateReset::Register,
        >,
    ) {
    }
    fn read_internal_fw_update_reset_wait_cycles(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::InternalFwUpdateResetWaitCycles::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_internal_fw_update_reset_wait_cycles(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::InternalFwUpdateResetWaitCycles::Register,
        >,
    ) {
    }
    fn read_internal_nmi_vector(&mut self) -> u32 {
        0
    }
    fn write_internal_nmi_vector(&mut self, _val: u32) {}
    fn read_internal_hw_error_fatal_mask(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::InternalHwErrorFatalMask::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_internal_hw_error_fatal_mask(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::InternalHwErrorFatalMask::Register,
        >,
    ) {
    }
    fn read_internal_hw_error_non_fatal_mask(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::InternalHwErrorNonFatalMask::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_internal_hw_error_non_fatal_mask(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::InternalHwErrorNonFatalMask::Register,
        >,
    ) {
    }
    fn read_internal_fw_error_fatal_mask(&mut self) -> u32 {
        0
    }
    fn write_internal_fw_error_fatal_mask(&mut self, _val: u32) {}
    fn read_internal_fw_error_non_fatal_mask(&mut self) -> u32 {
        0
    }
    fn write_internal_fw_error_non_fatal_mask(&mut self, _val: u32) {}
    fn read_internal_rv_mtime_l(&mut self) -> u32 {
        0
    }
    fn write_internal_rv_mtime_l(&mut self, _val: u32) {}
    fn read_internal_rv_mtime_h(&mut self) -> u32 {
        0
    }
    fn write_internal_rv_mtime_h(&mut self, _val: u32) {}
    fn read_internal_rv_mtimecmp_l(&mut self) -> u32 {
        0
    }
    fn write_internal_rv_mtimecmp_l(&mut self, _val: u32) {}
    fn read_internal_rv_mtimecmp_h(&mut self) -> u32 {
        0
    }
    fn write_internal_rv_mtimecmp_h(&mut self, _val: u32) {}
    fn read_intr_block_rf_global_intr_en_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::GlobalIntrEnT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_global_intr_en_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::GlobalIntrEnT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error_intr_en_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::ErrorIntrEnT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error_intr_en_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::ErrorIntrEnT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_notif_intr_en_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::NotifIntrEnT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_notif_intr_en_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::NotifIntrEnT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error_global_intr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::GlobalIntrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error_global_intr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::GlobalIntrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_notif_global_intr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::GlobalIntrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_notif_global_intr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::GlobalIntrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error_internal_intr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::ErrorIntrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error_internal_intr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::ErrorIntrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_notif_internal_intr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::NotifIntrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_notif_internal_intr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::NotifIntrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error_intr_trig_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::ErrorIntrTrigT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error_intr_trig_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::ErrorIntrTrigT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_notif_intr_trig_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::NotifIntrTrigT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_notif_intr_trig_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::NotifIntrTrigT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error_internal_intr_count_r(&mut self) -> u32 {
        0
    }
    fn write_intr_block_rf_error_internal_intr_count_r(&mut self, _val: u32) {}
    fn read_intr_block_rf_error_inv_dev_intr_count_r(&mut self) -> u32 {
        0
    }
    fn write_intr_block_rf_error_inv_dev_intr_count_r(&mut self, _val: u32) {}
    fn read_intr_block_rf_error_cmd_fail_intr_count_r(&mut self) -> u32 {
        0
    }
    fn write_intr_block_rf_error_cmd_fail_intr_count_r(&mut self, _val: u32) {}
    fn read_intr_block_rf_error_bad_fuse_intr_count_r(&mut self) -> u32 {
        0
    }
    fn write_intr_block_rf_error_bad_fuse_intr_count_r(&mut self, _val: u32) {}
    fn read_intr_block_rf_error_iccm_blocked_intr_count_r(&mut self) -> u32 {
        0
    }
    fn write_intr_block_rf_error_iccm_blocked_intr_count_r(&mut self, _val: u32) {}
    fn read_intr_block_rf_error_mbox_ecc_unc_intr_count_r(&mut self) -> u32 {
        0
    }
    fn write_intr_block_rf_error_mbox_ecc_unc_intr_count_r(&mut self, _val: u32) {}
    fn read_intr_block_rf_error_wdt_timer1_timeout_intr_count_r(&mut self) -> u32 {
        0
    }
    fn write_intr_block_rf_error_wdt_timer1_timeout_intr_count_r(&mut self, _val: u32) {}
    fn read_intr_block_rf_error_wdt_timer2_timeout_intr_count_r(&mut self) -> u32 {
        0
    }
    fn write_intr_block_rf_error_wdt_timer2_timeout_intr_count_r(&mut self, _val: u32) {}
    fn read_intr_block_rf_notif_cmd_avail_intr_count_r(&mut self) -> u32 {
        0
    }
    fn write_intr_block_rf_notif_cmd_avail_intr_count_r(&mut self, _val: u32) {}
    fn read_intr_block_rf_notif_mbox_ecc_cor_intr_count_r(&mut self) -> u32 {
        0
    }
    fn write_intr_block_rf_notif_mbox_ecc_cor_intr_count_r(&mut self, _val: u32) {}
    fn read_intr_block_rf_notif_debug_locked_intr_count_r(&mut self) -> u32 {
        0
    }
    fn write_intr_block_rf_notif_debug_locked_intr_count_r(&mut self, _val: u32) {}
    fn read_intr_block_rf_notif_scan_mode_intr_count_r(&mut self) -> u32 {
        0
    }
    fn write_intr_block_rf_notif_scan_mode_intr_count_r(&mut self, _val: u32) {}
    fn read_intr_block_rf_notif_soc_req_lock_intr_count_r(&mut self) -> u32 {
        0
    }
    fn write_intr_block_rf_notif_soc_req_lock_intr_count_r(&mut self, _val: u32) {}
    fn read_intr_block_rf_notif_gen_in_toggle_intr_count_r(&mut self) -> u32 {
        0
    }
    fn write_intr_block_rf_notif_gen_in_toggle_intr_count_r(&mut self, _val: u32) {}
    fn read_intr_block_rf_error_internal_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error_internal_intr_count_incr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error_inv_dev_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error_inv_dev_intr_count_incr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error_cmd_fail_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error_cmd_fail_intr_count_incr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error_bad_fuse_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error_bad_fuse_intr_count_incr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error_iccm_blocked_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error_iccm_blocked_intr_count_incr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error_mbox_ecc_unc_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error_mbox_ecc_unc_intr_count_incr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error_wdt_timer1_timeout_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error_wdt_timer1_timeout_intr_count_incr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error_wdt_timer2_timeout_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error_wdt_timer2_timeout_intr_count_incr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_notif_cmd_avail_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_notif_cmd_avail_intr_count_incr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_notif_mbox_ecc_cor_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_notif_mbox_ecc_cor_intr_count_incr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_notif_debug_locked_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_notif_debug_locked_intr_count_incr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_notif_scan_mode_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_notif_scan_mode_intr_count_incr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_notif_soc_req_lock_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_notif_soc_req_lock_intr_count_incr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_notif_gen_in_toggle_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_notif_gen_in_toggle_intr_count_incr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc_ifc::bits::IntrCountIncrT::Register,
        >,
    ) {
    }
}
pub struct SocBus {
    pub periph: Box<dyn SocPeripheral>,
}
impl emulator_bus::Bus for SocBus {
    fn read(
        &mut self,
        size: emulator_types::RvSize,
        addr: emulator_types::RvAddr,
    ) -> Result<emulator_types::RvData, emulator_bus::BusError> {
        match (size, addr) {
            (emulator_types::RvSize::Word, 0) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_hw_error_fatal().reg.get(),
            )),
            (emulator_types::RvSize::Word, 1..=3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 4) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_hw_error_non_fatal().reg.get(),
            )),
            (emulator_types::RvSize::Word, 5..=7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 8) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_fw_error_fatal(),
            )),
            (emulator_types::RvSize::Word, 9..=0xb) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xc) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_fw_error_non_fatal(),
            )),
            (emulator_types::RvSize::Word, 0xd..=0xf) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x10) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_hw_error_enc(),
            )),
            (emulator_types::RvSize::Word, 0x11..=0x13) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x14) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_fw_error_enc(),
            )),
            (emulator_types::RvSize::Word, 0x15..=0x17) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x18) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_fw_extended_error_info(),
            )),
            (emulator_types::RvSize::Word, 0x19..=0x1b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x38) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_boot_status(),
            )),
            (emulator_types::RvSize::Word, 0x39..=0x3b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x3c) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_flow_status().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x3d..=0x3f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x40) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_reset_reason().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x41..=0x43) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x44) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_security_state().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x45..=0x47) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x48) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_mbox_valid_pauser(),
            )),
            (emulator_types::RvSize::Word, 0x49..=0x4b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x5c) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_mbox_pauser_lock().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x5d..=0x5f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x70) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_trng_valid_pauser(),
            )),
            (emulator_types::RvSize::Word, 0x71..=0x73) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x74) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_trng_pauser_lock().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x75..=0x77) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x78) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_trng_data(),
            )),
            (emulator_types::RvSize::Word, 0x79..=0x7b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa8) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_trng_ctrl().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0xa9..=0xab) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xac) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_trng_status().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0xad..=0xaf) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xb0) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_fuse_wr_done().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0xb1..=0xb3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xb4) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_timer_config(),
            )),
            (emulator_types::RvSize::Word, 0xb5..=0xb7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xb8) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_bootfsm_go().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0xb9..=0xbb) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xbc) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_dbg_manuf_service_reg(),
            )),
            (emulator_types::RvSize::Word, 0xbd..=0xbf) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xc0) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_clk_gating_en().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0xc1..=0xc3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xcc) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_generic_output_wires(),
            )),
            (emulator_types::RvSize::Word, 0xcd..=0xcf) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xd4) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_hw_rev_id().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0xd5..=0xd7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xd8) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_fw_rev_id(),
            )),
            (emulator_types::RvSize::Word, 0xd9..=0xdb) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xe0) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_hw_config().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0xe1..=0xe3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xe4) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_wdt_timer1_en().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0xe5..=0xe7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xe8) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_wdt_timer1_ctrl().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0xe9..=0xeb) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xec) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_wdt_timer1_timeout_period(),
            )),
            (emulator_types::RvSize::Word, 0xed..=0xef) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xf4) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_wdt_timer2_en().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0xf5..=0xf7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xf8) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_wdt_timer2_ctrl().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0xf9..=0xfb) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xfc) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_wdt_timer2_timeout_period(),
            )),
            (emulator_types::RvSize::Word, 0xfd..=0xff) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x104) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_wdt_status().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x105..=0x107) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x108) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_fuse_valid_pauser(),
            )),
            (emulator_types::RvSize::Word, 0x109..=0x10b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x10c) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_fuse_pauser_lock().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x10d..=0x10f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x110) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_wdt_cfg(),
            )),
            (emulator_types::RvSize::Word, 0x111..=0x113) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x118) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_i_trng_entropy_config_0().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x119..=0x11b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x11c) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_i_trng_entropy_config_1().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x11d..=0x11f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x120) => Ok(emulator_types::RvData::from(
                self.periph.read_cptra_rsvd_reg(),
            )),
            (emulator_types::RvSize::Word, 0x121..=0x123) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x200) => Ok(emulator_types::RvData::from(
                self.periph.read_fuse_uds_seed(),
            )),
            (emulator_types::RvSize::Word, 0x201..=0x203) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x230) => Ok(emulator_types::RvData::from(
                self.periph.read_fuse_field_entropy(),
            )),
            (emulator_types::RvSize::Word, 0x231..=0x233) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x250) => Ok(emulator_types::RvData::from(
                self.periph.read_fuse_key_manifest_pk_hash(),
            )),
            (emulator_types::RvSize::Word, 0x251..=0x253) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x280) => Ok(emulator_types::RvData::from(
                self.periph.read_fuse_key_manifest_pk_hash_mask().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x281..=0x283) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x284) => Ok(emulator_types::RvData::from(
                self.periph.read_fuse_owner_pk_hash(),
            )),
            (emulator_types::RvSize::Word, 0x285..=0x287) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x2b4) => Ok(emulator_types::RvData::from(
                self.periph.read_fuse_fmc_key_manifest_svn(),
            )),
            (emulator_types::RvSize::Word, 0x2b5..=0x2b7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x2b8) => Ok(emulator_types::RvData::from(
                self.periph.read_fuse_runtime_svn(),
            )),
            (emulator_types::RvSize::Word, 0x2b9..=0x2bb) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x2c8) => Ok(emulator_types::RvData::from(
                self.periph.read_fuse_anti_rollback_disable().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x2c9..=0x2cb) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x2cc) => Ok(emulator_types::RvData::from(
                self.periph.read_fuse_idevid_cert_attr(),
            )),
            (emulator_types::RvSize::Word, 0x2cd..=0x2cf) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x32c) => Ok(emulator_types::RvData::from(
                self.periph.read_fuse_idevid_manuf_hsm_id(),
            )),
            (emulator_types::RvSize::Word, 0x32d..=0x32f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x33c) => Ok(emulator_types::RvData::from(
                self.periph.read_fuse_life_cycle().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x33d..=0x33f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x340) => Ok(emulator_types::RvData::from(
                self.periph.read_fuse_lms_verify().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x341..=0x343) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x344) => Ok(emulator_types::RvData::from(
                self.periph.read_fuse_lms_revocation(),
            )),
            (emulator_types::RvSize::Word, 0x345..=0x347) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x348) => Ok(emulator_types::RvData::from(
                self.periph.read_fuse_soc_stepping_id().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x349..=0x34b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x600) => Ok(emulator_types::RvData::from(
                self.periph.read_internal_obf_key(),
            )),
            (emulator_types::RvSize::Word, 0x601..=0x603) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x620) => Ok(emulator_types::RvData::from(
                self.periph.read_internal_iccm_lock().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x621..=0x623) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x624) => Ok(emulator_types::RvData::from(
                self.periph.read_internal_fw_update_reset().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x625..=0x627) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x628) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_internal_fw_update_reset_wait_cycles()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x629..=0x62b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x62c) => Ok(emulator_types::RvData::from(
                self.periph.read_internal_nmi_vector(),
            )),
            (emulator_types::RvSize::Word, 0x62d..=0x62f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x630) => Ok(emulator_types::RvData::from(
                self.periph.read_internal_hw_error_fatal_mask().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x631..=0x633) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x634) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_internal_hw_error_non_fatal_mask()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x635..=0x637) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x638) => Ok(emulator_types::RvData::from(
                self.periph.read_internal_fw_error_fatal_mask(),
            )),
            (emulator_types::RvSize::Word, 0x639..=0x63b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x63c) => Ok(emulator_types::RvData::from(
                self.periph.read_internal_fw_error_non_fatal_mask(),
            )),
            (emulator_types::RvSize::Word, 0x63d..=0x63f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x640) => Ok(emulator_types::RvData::from(
                self.periph.read_internal_rv_mtime_l(),
            )),
            (emulator_types::RvSize::Word, 0x641..=0x643) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x644) => Ok(emulator_types::RvData::from(
                self.periph.read_internal_rv_mtime_h(),
            )),
            (emulator_types::RvSize::Word, 0x645..=0x647) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x648) => Ok(emulator_types::RvData::from(
                self.periph.read_internal_rv_mtimecmp_l(),
            )),
            (emulator_types::RvSize::Word, 0x649..=0x64b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x64c) => Ok(emulator_types::RvData::from(
                self.periph.read_internal_rv_mtimecmp_h(),
            )),
            (emulator_types::RvSize::Word, 0x64d..=0x64f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x800) => Ok(emulator_types::RvData::from(
                self.periph.read_intr_block_rf_global_intr_en_r().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x801..=0x803) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x804) => Ok(emulator_types::RvData::from(
                self.periph.read_intr_block_rf_error_intr_en_r().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x805..=0x807) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x808) => Ok(emulator_types::RvData::from(
                self.periph.read_intr_block_rf_notif_intr_en_r().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x809..=0x80b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x80c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_global_intr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x80d..=0x80f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x810) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_global_intr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x811..=0x813) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x814) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_internal_intr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x815..=0x817) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x818) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_internal_intr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x819..=0x81b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x81c) => Ok(emulator_types::RvData::from(
                self.periph.read_intr_block_rf_error_intr_trig_r().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x81d..=0x81f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x820) => Ok(emulator_types::RvData::from(
                self.periph.read_intr_block_rf_notif_intr_trig_r().reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x821..=0x823) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x900) => Ok(emulator_types::RvData::from(
                self.periph.read_intr_block_rf_error_internal_intr_count_r(),
            )),
            (emulator_types::RvSize::Word, 0x901..=0x903) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x904) => Ok(emulator_types::RvData::from(
                self.periph.read_intr_block_rf_error_inv_dev_intr_count_r(),
            )),
            (emulator_types::RvSize::Word, 0x905..=0x907) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x908) => Ok(emulator_types::RvData::from(
                self.periph.read_intr_block_rf_error_cmd_fail_intr_count_r(),
            )),
            (emulator_types::RvSize::Word, 0x909..=0x90b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x90c) => Ok(emulator_types::RvData::from(
                self.periph.read_intr_block_rf_error_bad_fuse_intr_count_r(),
            )),
            (emulator_types::RvSize::Word, 0x90d..=0x90f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x910) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_iccm_blocked_intr_count_r(),
            )),
            (emulator_types::RvSize::Word, 0x911..=0x913) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x914) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_mbox_ecc_unc_intr_count_r(),
            )),
            (emulator_types::RvSize::Word, 0x915..=0x917) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x918) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_wdt_timer1_timeout_intr_count_r(),
            )),
            (emulator_types::RvSize::Word, 0x919..=0x91b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x91c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_wdt_timer2_timeout_intr_count_r(),
            )),
            (emulator_types::RvSize::Word, 0x91d..=0x91f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x980) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_cmd_avail_intr_count_r(),
            )),
            (emulator_types::RvSize::Word, 0x981..=0x983) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x984) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_mbox_ecc_cor_intr_count_r(),
            )),
            (emulator_types::RvSize::Word, 0x985..=0x987) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x988) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_debug_locked_intr_count_r(),
            )),
            (emulator_types::RvSize::Word, 0x989..=0x98b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x98c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_scan_mode_intr_count_r(),
            )),
            (emulator_types::RvSize::Word, 0x98d..=0x98f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x990) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_soc_req_lock_intr_count_r(),
            )),
            (emulator_types::RvSize::Word, 0x991..=0x993) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x994) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_gen_in_toggle_intr_count_r(),
            )),
            (emulator_types::RvSize::Word, 0x995..=0x997) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa00) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_internal_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa01..=0xa03) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa04) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_inv_dev_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa05..=0xa07) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa08) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_cmd_fail_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa09..=0xa0b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa0c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_bad_fuse_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa0d..=0xa0f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa10) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_iccm_blocked_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa11..=0xa13) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa14) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_mbox_ecc_unc_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa15..=0xa17) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa18) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_wdt_timer1_timeout_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa19..=0xa1b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa1c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_wdt_timer2_timeout_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa1d..=0xa1f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa20) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_cmd_avail_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa21..=0xa23) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa24) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_mbox_ecc_cor_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa25..=0xa27) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa28) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_debug_locked_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa29..=0xa2b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa2c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_scan_mode_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa2d..=0xa2f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa30) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_soc_req_lock_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa31..=0xa33) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa34) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_gen_in_toggle_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa35..=0xa37) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            _ => Err(emulator_bus::BusError::LoadAccessFault),
        }
    }
    fn write(
        &mut self,
        size: emulator_types::RvSize,
        addr: emulator_types::RvAddr,
        val: emulator_types::RvData,
    ) -> Result<(), emulator_bus::BusError> {
        match (size, addr) {
            (emulator_types::RvSize::Word, 0) => {
                self.periph
                    .write_cptra_hw_error_fatal(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 1..=3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 4) => {
                self.periph
                    .write_cptra_hw_error_non_fatal(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 5..=7) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 8) => {
                self.periph.write_cptra_fw_error_fatal(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 9..=0xb) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xc) => {
                self.periph.write_cptra_fw_error_non_fatal(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xd..=0xf) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x10) => {
                self.periph.write_cptra_hw_error_enc(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x11..=0x13) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x14) => {
                self.periph.write_cptra_fw_error_enc(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x15..=0x17) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x18) => {
                self.periph.write_cptra_fw_extended_error_info(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x19..=0x1b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x38) => {
                self.periph.write_cptra_boot_status(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x39..=0x3b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x3c) => {
                self.periph
                    .write_cptra_flow_status(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x3d..=0x3f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x40) => {
                self.periph
                    .write_cptra_reset_reason(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x41..=0x43) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x44) => {
                self.periph
                    .write_cptra_security_state(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x45..=0x47) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x48) => {
                self.periph.write_cptra_mbox_valid_pauser(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x49..=0x4b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x5c) => {
                self.periph
                    .write_cptra_mbox_pauser_lock(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x5d..=0x5f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x70) => {
                self.periph.write_cptra_trng_valid_pauser(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x71..=0x73) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x74) => {
                self.periph
                    .write_cptra_trng_pauser_lock(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x75..=0x77) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x78) => {
                self.periph.write_cptra_trng_data(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x79..=0x7b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa8) => {
                self.periph
                    .write_cptra_trng_ctrl(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa9..=0xab) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xac) => {
                self.periph
                    .write_cptra_trng_status(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xad..=0xaf) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xb0) => {
                self.periph
                    .write_cptra_fuse_wr_done(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xb1..=0xb3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xb4) => {
                self.periph.write_cptra_timer_config(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xb5..=0xb7) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xb8) => {
                self.periph
                    .write_cptra_bootfsm_go(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xb9..=0xbb) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xbc) => {
                self.periph.write_cptra_dbg_manuf_service_reg(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xbd..=0xbf) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xc0) => {
                self.periph
                    .write_cptra_clk_gating_en(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xc1..=0xc3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xc4) => {
                self.periph.write_cptra_generic_input_wires(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xc5..=0xc7) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xcc) => {
                self.periph.write_cptra_generic_output_wires(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xcd..=0xcf) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xd4) => {
                self.periph
                    .write_cptra_hw_rev_id(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xd5..=0xd7) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xd8) => {
                self.periph.write_cptra_fw_rev_id(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xd9..=0xdb) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xe0) => {
                self.periph
                    .write_cptra_hw_config(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xe1..=0xe3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xe4) => {
                self.periph
                    .write_cptra_wdt_timer1_en(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xe5..=0xe7) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xe8) => {
                self.periph
                    .write_cptra_wdt_timer1_ctrl(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xe9..=0xeb) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xec) => {
                self.periph.write_cptra_wdt_timer1_timeout_period(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xed..=0xef) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xf4) => {
                self.periph
                    .write_cptra_wdt_timer2_en(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xf5..=0xf7) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xf8) => {
                self.periph
                    .write_cptra_wdt_timer2_ctrl(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xf9..=0xfb) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xfc) => {
                self.periph.write_cptra_wdt_timer2_timeout_period(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xfd..=0xff) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x104) => {
                self.periph
                    .write_cptra_wdt_status(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x105..=0x107) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x108) => {
                self.periph.write_cptra_fuse_valid_pauser(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x109..=0x10b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x10c) => {
                self.periph
                    .write_cptra_fuse_pauser_lock(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x10d..=0x10f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x110) => {
                self.periph.write_cptra_wdt_cfg(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x111..=0x113) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x118) => {
                self.periph
                    .write_cptra_i_trng_entropy_config_0(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x119..=0x11b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x11c) => {
                self.periph
                    .write_cptra_i_trng_entropy_config_1(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x11d..=0x11f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x120) => {
                self.periph.write_cptra_rsvd_reg(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x121..=0x123) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x250) => {
                self.periph.write_fuse_key_manifest_pk_hash(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x251..=0x253) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x280) => {
                self.periph.write_fuse_key_manifest_pk_hash_mask(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x281..=0x283) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x284) => {
                self.periph.write_fuse_owner_pk_hash(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x285..=0x287) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x2b4) => {
                self.periph.write_fuse_fmc_key_manifest_svn(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x2b5..=0x2b7) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x2b8) => {
                self.periph.write_fuse_runtime_svn(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x2b9..=0x2bb) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x2c8) => {
                self.periph
                    .write_fuse_anti_rollback_disable(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x2c9..=0x2cb) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x2cc) => {
                self.periph.write_fuse_idevid_cert_attr(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x2cd..=0x2cf) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x32c) => {
                self.periph.write_fuse_idevid_manuf_hsm_id(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x32d..=0x32f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x33c) => {
                self.periph
                    .write_fuse_life_cycle(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x33d..=0x33f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x340) => {
                self.periph
                    .write_fuse_lms_verify(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x341..=0x343) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x344) => {
                self.periph.write_fuse_lms_revocation(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x345..=0x347) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x348) => {
                self.periph
                    .write_fuse_soc_stepping_id(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x349..=0x34b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x620) => {
                self.periph
                    .write_internal_iccm_lock(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x621..=0x623) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x624) => {
                self.periph
                    .write_internal_fw_update_reset(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x625..=0x627) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x628) => {
                self.periph.write_internal_fw_update_reset_wait_cycles(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x629..=0x62b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x62c) => {
                self.periph.write_internal_nmi_vector(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x62d..=0x62f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x630) => {
                self.periph
                    .write_internal_hw_error_fatal_mask(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x631..=0x633) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x634) => {
                self.periph.write_internal_hw_error_non_fatal_mask(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x635..=0x637) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x638) => {
                self.periph.write_internal_fw_error_fatal_mask(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x639..=0x63b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x63c) => {
                self.periph.write_internal_fw_error_non_fatal_mask(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x63d..=0x63f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x640) => {
                self.periph.write_internal_rv_mtime_l(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x641..=0x643) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x644) => {
                self.periph.write_internal_rv_mtime_h(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x645..=0x647) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x648) => {
                self.periph.write_internal_rv_mtimecmp_l(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x649..=0x64b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x64c) => {
                self.periph.write_internal_rv_mtimecmp_h(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x64d..=0x64f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x800) => {
                self.periph.write_intr_block_rf_global_intr_en_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x801..=0x803) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x804) => {
                self.periph
                    .write_intr_block_rf_error_intr_en_r(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x805..=0x807) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x808) => {
                self.periph
                    .write_intr_block_rf_notif_intr_en_r(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x809..=0x80b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x80c) => {
                self.periph.write_intr_block_rf_error_global_intr_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x80d..=0x80f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x810) => {
                self.periph.write_intr_block_rf_notif_global_intr_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x811..=0x813) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x814) => {
                self.periph.write_intr_block_rf_error_internal_intr_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x815..=0x817) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x818) => {
                self.periph.write_intr_block_rf_notif_internal_intr_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x819..=0x81b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x81c) => {
                self.periph.write_intr_block_rf_error_intr_trig_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x81d..=0x81f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x820) => {
                self.periph.write_intr_block_rf_notif_intr_trig_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x821..=0x823) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x900) => {
                self.periph
                    .write_intr_block_rf_error_internal_intr_count_r(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x901..=0x903) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x904) => {
                self.periph
                    .write_intr_block_rf_error_inv_dev_intr_count_r(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x905..=0x907) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x908) => {
                self.periph
                    .write_intr_block_rf_error_cmd_fail_intr_count_r(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x909..=0x90b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x90c) => {
                self.periph
                    .write_intr_block_rf_error_bad_fuse_intr_count_r(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x90d..=0x90f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x910) => {
                self.periph
                    .write_intr_block_rf_error_iccm_blocked_intr_count_r(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x911..=0x913) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x914) => {
                self.periph
                    .write_intr_block_rf_error_mbox_ecc_unc_intr_count_r(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x915..=0x917) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x918) => {
                self.periph
                    .write_intr_block_rf_error_wdt_timer1_timeout_intr_count_r(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x919..=0x91b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x91c) => {
                self.periph
                    .write_intr_block_rf_error_wdt_timer2_timeout_intr_count_r(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x91d..=0x91f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x980) => {
                self.periph
                    .write_intr_block_rf_notif_cmd_avail_intr_count_r(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x981..=0x983) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x984) => {
                self.periph
                    .write_intr_block_rf_notif_mbox_ecc_cor_intr_count_r(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x985..=0x987) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x988) => {
                self.periph
                    .write_intr_block_rf_notif_debug_locked_intr_count_r(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x989..=0x98b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x98c) => {
                self.periph
                    .write_intr_block_rf_notif_scan_mode_intr_count_r(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x98d..=0x98f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x990) => {
                self.periph
                    .write_intr_block_rf_notif_soc_req_lock_intr_count_r(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x991..=0x993) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x994) => {
                self.periph
                    .write_intr_block_rf_notif_gen_in_toggle_intr_count_r(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x995..=0x997) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa00) => {
                self.periph
                    .write_intr_block_rf_error_internal_intr_count_incr_r(
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa01..=0xa03) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa04) => {
                self.periph
                    .write_intr_block_rf_error_inv_dev_intr_count_incr_r(
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa05..=0xa07) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa08) => {
                self.periph
                    .write_intr_block_rf_error_cmd_fail_intr_count_incr_r(
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa09..=0xa0b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa0c) => {
                self.periph
                    .write_intr_block_rf_error_bad_fuse_intr_count_incr_r(
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa0d..=0xa0f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa10) => {
                self.periph
                    .write_intr_block_rf_error_iccm_blocked_intr_count_incr_r(
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa11..=0xa13) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa14) => {
                self.periph
                    .write_intr_block_rf_error_mbox_ecc_unc_intr_count_incr_r(
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa15..=0xa17) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa18) => {
                self.periph
                    .write_intr_block_rf_error_wdt_timer1_timeout_intr_count_incr_r(
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa19..=0xa1b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa1c) => {
                self.periph
                    .write_intr_block_rf_error_wdt_timer2_timeout_intr_count_incr_r(
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa1d..=0xa1f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa20) => {
                self.periph
                    .write_intr_block_rf_notif_cmd_avail_intr_count_incr_r(
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa21..=0xa23) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa24) => {
                self.periph
                    .write_intr_block_rf_notif_mbox_ecc_cor_intr_count_incr_r(
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa25..=0xa27) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa28) => {
                self.periph
                    .write_intr_block_rf_notif_debug_locked_intr_count_incr_r(
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa29..=0xa2b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa2c) => {
                self.periph
                    .write_intr_block_rf_notif_scan_mode_intr_count_incr_r(
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa2d..=0xa2f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa30) => {
                self.periph
                    .write_intr_block_rf_notif_soc_req_lock_intr_count_incr_r(
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa31..=0xa33) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa34) => {
                self.periph
                    .write_intr_block_rf_notif_gen_in_toggle_intr_count_incr_r(
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa35..=0xa37) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            _ => Err(emulator_bus::BusError::StoreAccessFault),
        }
    }
    fn poll(&mut self) {
        self.periph.poll();
    }
    fn warm_reset(&mut self) {
        self.periph.warm_reset();
    }
    fn update_reset(&mut self) {
        self.periph.update_reset();
    }
}
