// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-rtl repo at 0e43b8e7011c1c8761e114bc949fcad6cf30538e
// , caliptra-ss repo at 9911c2b0e4bac9e4b48f6c2155c86cb116159734
// , and i3c-core repo at d5c715103f529ade0e5d375a53c5692daaa9c54b
//
pub trait El2PicPeripheral {
    fn poll(&mut self) {}
    fn warm_reset(&mut self) {}
    fn update_reset(&mut self) {}
    fn read_meipl(&mut self) -> meipl {
        meipl::default()
    }
    fn write_meipl(&mut self, _val: meipl) {}
    fn read_meip(&mut self) -> meip {
        meip::default()
    }
    fn write_meip(&mut self, _val: meip) {}
    fn read_meie(&mut self) -> meie {
        meie::default()
    }
    fn write_meie(&mut self, _val: meie) {}
    fn read_mpiccfg(&mut self) -> mpiccfg {
        mpiccfg::default()
    }
    fn write_mpiccfg(&mut self, _val: mpiccfg) {}
    fn read_meigwctrl(&mut self) -> meigwctrl {
        meigwctrl::default()
    }
    fn write_meigwctrl(&mut self, _val: meigwctrl) {}
    fn read_meigwclr(&mut self) -> u32 {
        0
    }
    fn write_meigwclr(&mut self, _val: u32) {}
}
pub struct El2PicBus {
    pub periph: Box<dyn El2PicPeripheral>,
}
impl emulator_bus::Bus for El2PicBus {
    fn read(
        &mut self,
        size: emulator_types::RvSize,
        addr: emulator_types::RvAddr,
    ) -> Result<emulator_types::RvData, emulator_bus::BusError> {
        match (size, addr) {
            (emulator_types::RvSize::Word, 0) => {
                Ok(emulator_types::RvData::from(self.periph.read_meipl()))
            }
            (emulator_types::RvSize::Word, 1..=3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1000) => {
                Ok(emulator_types::RvData::from(self.periph.read_meip()))
            }
            (emulator_types::RvSize::Word, 0x1001..=0x1003) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x2000) => {
                Ok(emulator_types::RvData::from(self.periph.read_meie()))
            }
            (emulator_types::RvSize::Word, 0x2001..=0x2003) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x3000) => {
                Ok(emulator_types::RvData::from(self.periph.read_mpiccfg()))
            }
            (emulator_types::RvSize::Word, 0x3001..=0x3003) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x4000) => {
                Ok(emulator_types::RvData::from(self.periph.read_meigwctrl()))
            }
            (emulator_types::RvSize::Word, 0x4001..=0x4003) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x5000) => {
                Ok(emulator_types::RvData::from(self.periph.read_meigwclr()))
            }
            (emulator_types::RvSize::Word, 0x5001..=0x5003) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            _ => Err(emulator_bus::BusError::LoadAccessFault),
        }
    }
    fn write(
        &mut self,
        size: emulator_types::RvSize,
        addr: emulator_types::RvAddr,
        val: emulator_types::RvData,
    ) -> Result<(), emulator_bus::BusError> {
        match (size, addr) {
            (emulator_types::RvSize::Word, 0) => {
                self.periph.write_meipl(meipl::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 1..=3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1000) => {
                self.periph.write_meip(meip::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1001..=0x1003) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x2000) => {
                self.periph.write_meie(meie::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x2001..=0x2003) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x3000) => {
                self.periph.write_mpiccfg(mpiccfg::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x3001..=0x3003) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x4000) => {
                self.periph.write_meigwctrl(meigwctrl::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x4001..=0x4003) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x5000) => {
                self.periph.write_meigwclr(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x5001..=0x5003) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            _ => Err(emulator_bus::BusError::StoreAccessFault),
        }
    }
    fn poll(&mut self) {
        self.periph.poll();
    }
    fn warm_reset(&mut self) {
        self.periph.warm_reset();
    }
    fn update_reset(&mut self) {
        self.periph.update_reset();
    }
}
