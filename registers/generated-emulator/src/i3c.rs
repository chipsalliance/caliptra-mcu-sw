// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-rtl repo at 0e43b8e7011c1c8761e114bc949fcad6cf30538e
// , caliptra-ss repo at 9911c2b0e4bac9e4b48f6c2155c86cb116159734
// , and i3c-core repo at d5c715103f529ade0e5d375a53c5692daaa9c54b
//
pub trait I3cPeripheral {
    fn poll(&mut self) {}
    fn warm_reset(&mut self) {}
    fn update_reset(&mut self) {}
    fn read_i3c_base_hci_version(&mut self) -> u32 {
        0
    }
    fn write_i3c_base_hci_version(&mut self, _val: u32) {}
    fn read_i3c_base_hc_control(&mut self) -> HC_CONTROL {
        HC_CONTROL::default()
    }
    fn write_i3c_base_hc_control(&mut self, _val: HC_CONTROL) {}
    fn read_i3c_base_controller_device_addr(&mut self) -> CONTROLLER_DEVICE_ADDR {
        CONTROLLER_DEVICE_ADDR::default()
    }
    fn write_i3c_base_controller_device_addr(&mut self, _val: CONTROLLER_DEVICE_ADDR) {}
    fn read_i3c_base_hc_capabilities(&mut self) -> HC_CAPABILITIES {
        HC_CAPABILITIES::default()
    }
    fn write_i3c_base_hc_capabilities(&mut self, _val: HC_CAPABILITIES) {}
    fn read_i3c_base_reset_control(&mut self) -> RESET_CONTROL {
        RESET_CONTROL::default()
    }
    fn write_i3c_base_reset_control(&mut self, _val: RESET_CONTROL) {}
    fn read_i3c_base_present_state(&mut self) -> PRESENT_STATE {
        PRESENT_STATE::default()
    }
    fn write_i3c_base_present_state(&mut self, _val: PRESENT_STATE) {}
    fn read_i3c_base_intr_status(&mut self) -> INTR_STATUS {
        INTR_STATUS::default()
    }
    fn write_i3c_base_intr_status(&mut self, _val: INTR_STATUS) {}
    fn read_i3c_base_intr_status_enable(&mut self) -> INTR_STATUS_ENABLE {
        INTR_STATUS_ENABLE::default()
    }
    fn write_i3c_base_intr_status_enable(&mut self, _val: INTR_STATUS_ENABLE) {}
    fn read_i3c_base_intr_signal_enable(&mut self) -> INTR_SIGNAL_ENABLE {
        INTR_SIGNAL_ENABLE::default()
    }
    fn write_i3c_base_intr_signal_enable(&mut self, _val: INTR_SIGNAL_ENABLE) {}
    fn read_i3c_base_intr_force(&mut self) -> INTR_FORCE {
        INTR_FORCE::default()
    }
    fn write_i3c_base_intr_force(&mut self, _val: INTR_FORCE) {}
    fn read_i3c_base_dat_section_offset(&mut self) -> DAT_SECTION_OFFSET {
        DAT_SECTION_OFFSET::default()
    }
    fn write_i3c_base_dat_section_offset(&mut self, _val: DAT_SECTION_OFFSET) {}
    fn read_i3c_base_dct_section_offset(&mut self) -> DCT_SECTION_OFFSET {
        DCT_SECTION_OFFSET::default()
    }
    fn write_i3c_base_dct_section_offset(&mut self, _val: DCT_SECTION_OFFSET) {}
    fn read_i3c_base_ring_headers_section_offset(&mut self) -> RING_HEADERS_SECTION_OFFSET {
        RING_HEADERS_SECTION_OFFSET::default()
    }
    fn write_i3c_base_ring_headers_section_offset(&mut self, _val: RING_HEADERS_SECTION_OFFSET) {}
    fn read_i3c_base_pio_section_offset(&mut self) -> PIO_SECTION_OFFSET {
        PIO_SECTION_OFFSET::default()
    }
    fn write_i3c_base_pio_section_offset(&mut self, _val: PIO_SECTION_OFFSET) {}
    fn read_i3c_base_ext_caps_section_offset(&mut self) -> EXT_CAPS_SECTION_OFFSET {
        EXT_CAPS_SECTION_OFFSET::default()
    }
    fn write_i3c_base_ext_caps_section_offset(&mut self, _val: EXT_CAPS_SECTION_OFFSET) {}
    fn read_i3c_base_int_ctrl_cmds_en(&mut self) -> INT_CTRL_CMDS_EN {
        INT_CTRL_CMDS_EN::default()
    }
    fn write_i3c_base_int_ctrl_cmds_en(&mut self, _val: INT_CTRL_CMDS_EN) {}
    fn read_i3c_base_ibi_notify_ctrl(&mut self) -> IBI_NOTIFY_CTRL {
        IBI_NOTIFY_CTRL::default()
    }
    fn write_i3c_base_ibi_notify_ctrl(&mut self, _val: IBI_NOTIFY_CTRL) {}
    fn read_i3c_base_ibi_data_abort_ctrl(&mut self) -> IBI_DATA_ABORT_CTRL {
        IBI_DATA_ABORT_CTRL::default()
    }
    fn write_i3c_base_ibi_data_abort_ctrl(&mut self, _val: IBI_DATA_ABORT_CTRL) {}
    fn read_i3c_base_dev_ctx_base_lo(&mut self) -> DEV_CTX_BASE_LO {
        DEV_CTX_BASE_LO::default()
    }
    fn write_i3c_base_dev_ctx_base_lo(&mut self, _val: DEV_CTX_BASE_LO) {}
    fn read_i3c_base_dev_ctx_base_hi(&mut self) -> DEV_CTX_BASE_HI {
        DEV_CTX_BASE_HI::default()
    }
    fn write_i3c_base_dev_ctx_base_hi(&mut self, _val: DEV_CTX_BASE_HI) {}
    fn read_i3c_base_dev_ctx_sg(&mut self) -> DEV_CTX_SG {
        DEV_CTX_SG::default()
    }
    fn write_i3c_base_dev_ctx_sg(&mut self, _val: DEV_CTX_SG) {}
    fn read_piocontrol_command_port(&mut self) -> u32 {
        0
    }
    fn write_piocontrol_command_port(&mut self, _val: u32) {}
    fn read_piocontrol_response_port(&mut self) -> u32 {
        0
    }
    fn write_piocontrol_response_port(&mut self, _val: u32) {}
    fn read_piocontrol_tx_data_port(&mut self) -> u32 {
        0
    }
    fn write_piocontrol_tx_data_port(&mut self, _val: u32) {}
    fn read_piocontrol_rx_data_port(&mut self) -> u32 {
        0
    }
    fn write_piocontrol_rx_data_port(&mut self, _val: u32) {}
    fn read_piocontrol_ibi_port(&mut self) -> IBI_PORT {
        IBI_PORT::default()
    }
    fn write_piocontrol_ibi_port(&mut self, _val: IBI_PORT) {}
    fn read_piocontrol_queue_thld_ctrl(&mut self) -> QUEUE_THLD_CTRL {
        QUEUE_THLD_CTRL::default()
    }
    fn write_piocontrol_queue_thld_ctrl(&mut self, _val: QUEUE_THLD_CTRL) {}
    fn read_piocontrol_data_buffer_thld_ctrl(&mut self) -> DATA_BUFFER_THLD_CTRL {
        DATA_BUFFER_THLD_CTRL::default()
    }
    fn write_piocontrol_data_buffer_thld_ctrl(&mut self, _val: DATA_BUFFER_THLD_CTRL) {}
    fn read_piocontrol_queue_size(&mut self) -> QUEUE_SIZE {
        QUEUE_SIZE::default()
    }
    fn write_piocontrol_queue_size(&mut self, _val: QUEUE_SIZE) {}
    fn read_piocontrol_alt_queue_size(&mut self) -> ALT_QUEUE_SIZE {
        ALT_QUEUE_SIZE::default()
    }
    fn write_piocontrol_alt_queue_size(&mut self, _val: ALT_QUEUE_SIZE) {}
    fn read_piocontrol_pio_intr_status(&mut self) -> PIO_INTR_STATUS {
        PIO_INTR_STATUS::default()
    }
    fn write_piocontrol_pio_intr_status(&mut self, _val: PIO_INTR_STATUS) {}
    fn read_piocontrol_pio_intr_status_enable(&mut self) -> PIO_INTR_STATUS_ENABLE {
        PIO_INTR_STATUS_ENABLE::default()
    }
    fn write_piocontrol_pio_intr_status_enable(&mut self, _val: PIO_INTR_STATUS_ENABLE) {}
    fn read_piocontrol_pio_intr_signal_enable(&mut self) -> PIO_INTR_SIGNAL_ENABLE {
        PIO_INTR_SIGNAL_ENABLE::default()
    }
    fn write_piocontrol_pio_intr_signal_enable(&mut self, _val: PIO_INTR_SIGNAL_ENABLE) {}
    fn read_piocontrol_pio_intr_force(&mut self) -> PIO_INTR_FORCE {
        PIO_INTR_FORCE::default()
    }
    fn write_piocontrol_pio_intr_force(&mut self, _val: PIO_INTR_FORCE) {}
    fn read_piocontrol_pio_control(&mut self) -> PIO_CONTROL {
        PIO_CONTROL::default()
    }
    fn write_piocontrol_pio_control(&mut self, _val: PIO_CONTROL) {}
    fn read_i3c_ec_sec_fw_recovery_if_extcap_header(&mut self) -> EXTCAP_HEADER {
        EXTCAP_HEADER::default()
    }
    fn write_i3c_ec_sec_fw_recovery_if_extcap_header(&mut self, _val: EXTCAP_HEADER) {}
    fn read_i3c_ec_sec_fw_recovery_if_prot_cap_0(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_prot_cap_0(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_prot_cap_1(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_prot_cap_1(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_prot_cap_2(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_prot_cap_2(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_prot_cap_3(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_prot_cap_3(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_device_id_0(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_device_id_0(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_device_id_1(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_device_id_1(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_device_id_2(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_device_id_2(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_device_id_3(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_device_id_3(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_device_id_4(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_device_id_4(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_device_id_5(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_device_id_5(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_device_id_6(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_device_id_6(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_device_status_0(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_device_status_0(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_device_status_1(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_device_status_1(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_device_reset(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_device_reset(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_recovery_ctrl(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_recovery_ctrl(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_recovery_status(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_recovery_status(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_hw_status(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_hw_status(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_indirect_fifo_ctrl_0(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_indirect_fifo_ctrl_0(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_indirect_fifo_ctrl_1(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_indirect_fifo_ctrl_1(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_0(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_0(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_1(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_1(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_2(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_2(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_3(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_3(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_4(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_4(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_5(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_5(&mut self, _val: u32) {}
    fn read_i3c_ec_sec_fw_recovery_if_indirect_fifo_data(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_indirect_fifo_data(&mut self, _val: u32) {}
    fn read_i3c_ec_stdby_ctrl_mode_extcap_header(&mut self) -> EXTCAP_HEADER {
        EXTCAP_HEADER::default()
    }
    fn write_i3c_ec_stdby_ctrl_mode_extcap_header(&mut self, _val: EXTCAP_HEADER) {}
    fn read_i3c_ec_stdby_ctrl_mode_stby_cr_control(&mut self) -> STBY_CR_CONTROL {
        STBY_CR_CONTROL::default()
    }
    fn write_i3c_ec_stdby_ctrl_mode_stby_cr_control(&mut self, _val: STBY_CR_CONTROL) {}
    fn read_i3c_ec_stdby_ctrl_mode_stby_cr_device_addr(&mut self) -> STBY_CR_DEVICE_ADDR {
        STBY_CR_DEVICE_ADDR::default()
    }
    fn write_i3c_ec_stdby_ctrl_mode_stby_cr_device_addr(&mut self, _val: STBY_CR_DEVICE_ADDR) {}
    fn read_i3c_ec_stdby_ctrl_mode_stby_cr_capabilities(&mut self) -> STBY_CR_CAPABILITIES {
        STBY_CR_CAPABILITIES::default()
    }
    fn write_i3c_ec_stdby_ctrl_mode_stby_cr_capabilities(&mut self, _val: STBY_CR_CAPABILITIES) {}
    fn read_i3c_ec_stdby_ctrl_mode_rsvd_0(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_stdby_ctrl_mode_rsvd_0(&mut self, _val: u32) {}
    fn read_i3c_ec_stdby_ctrl_mode_stby_cr_status(&mut self) -> STBY_CR_STATUS {
        STBY_CR_STATUS::default()
    }
    fn write_i3c_ec_stdby_ctrl_mode_stby_cr_status(&mut self, _val: STBY_CR_STATUS) {}
    fn read_i3c_ec_stdby_ctrl_mode_stby_cr_device_char(&mut self) -> STBY_CR_DEVICE_CHAR {
        STBY_CR_DEVICE_CHAR::default()
    }
    fn write_i3c_ec_stdby_ctrl_mode_stby_cr_device_char(&mut self, _val: STBY_CR_DEVICE_CHAR) {}
    fn read_i3c_ec_stdby_ctrl_mode_stby_cr_device_pid_lo(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_stdby_ctrl_mode_stby_cr_device_pid_lo(&mut self, _val: u32) {}
    fn read_i3c_ec_stdby_ctrl_mode_stby_cr_intr_status(&mut self) -> STBY_CR_INTR_STATUS {
        STBY_CR_INTR_STATUS::default()
    }
    fn write_i3c_ec_stdby_ctrl_mode_stby_cr_intr_status(&mut self, _val: STBY_CR_INTR_STATUS) {}
    fn read_i3c_ec_stdby_ctrl_mode_rsvd_1(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_stdby_ctrl_mode_rsvd_1(&mut self, _val: u32) {}
    fn read_i3c_ec_stdby_ctrl_mode_stby_cr_intr_signal_enable(
        &mut self,
    ) -> STBY_CR_INTR_SIGNAL_ENABLE {
        STBY_CR_INTR_SIGNAL_ENABLE::default()
    }
    fn write_i3c_ec_stdby_ctrl_mode_stby_cr_intr_signal_enable(
        &mut self,
        _val: STBY_CR_INTR_SIGNAL_ENABLE,
    ) {
    }
    fn read_i3c_ec_stdby_ctrl_mode_stby_cr_intr_force(&mut self) -> STBY_CR_INTR_FORCE {
        STBY_CR_INTR_FORCE::default()
    }
    fn write_i3c_ec_stdby_ctrl_mode_stby_cr_intr_force(&mut self, _val: STBY_CR_INTR_FORCE) {}
    fn read_i3c_ec_stdby_ctrl_mode_stby_cr_ccc_config_getcaps(
        &mut self,
    ) -> STBY_CR_CCC_CONFIG_GETCAPS {
        STBY_CR_CCC_CONFIG_GETCAPS::default()
    }
    fn write_i3c_ec_stdby_ctrl_mode_stby_cr_ccc_config_getcaps(
        &mut self,
        _val: STBY_CR_CCC_CONFIG_GETCAPS,
    ) {
    }
    fn read_i3c_ec_stdby_ctrl_mode_stby_cr_ccc_config_rstact_params(
        &mut self,
    ) -> STBY_CR_CCC_CONFIG_RSTACT_PARAMS {
        STBY_CR_CCC_CONFIG_RSTACT_PARAMS::default()
    }
    fn write_i3c_ec_stdby_ctrl_mode_stby_cr_ccc_config_rstact_params(
        &mut self,
        _val: STBY_CR_CCC_CONFIG_RSTACT_PARAMS,
    ) {
    }
    fn read_i3c_ec_stdby_ctrl_mode_rsvd_2(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_stdby_ctrl_mode_rsvd_2(&mut self, _val: u32) {}
    fn read_i3c_ec_stdby_ctrl_mode_rsvd_3(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_stdby_ctrl_mode_rsvd_3(&mut self, _val: u32) {}
    fn read_i3c_ec_tti_extcap_header(&mut self) -> EXTCAP_HEADER {
        EXTCAP_HEADER::default()
    }
    fn write_i3c_ec_tti_extcap_header(&mut self, _val: EXTCAP_HEADER) {}
    fn read_i3c_ec_tti_control(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_tti_control(&mut self, _val: u32) {}
    fn read_i3c_ec_tti_status(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_tti_status(&mut self, _val: u32) {}
    fn read_i3c_ec_tti_tti_reset_control(&mut self) -> TTI_RESET_CONTROL {
        TTI_RESET_CONTROL::default()
    }
    fn write_i3c_ec_tti_tti_reset_control(&mut self, _val: TTI_RESET_CONTROL) {}
    fn read_i3c_ec_tti_interrupt_status(&mut self) -> INTERRUPT_STATUS {
        INTERRUPT_STATUS::default()
    }
    fn write_i3c_ec_tti_interrupt_status(&mut self, _val: INTERRUPT_STATUS) {}
    fn read_i3c_ec_tti_interrupt_enable(&mut self) -> INTERRUPT_ENABLE {
        INTERRUPT_ENABLE::default()
    }
    fn write_i3c_ec_tti_interrupt_enable(&mut self, _val: INTERRUPT_ENABLE) {}
    fn read_i3c_ec_tti_interrupt_force(&mut self) -> INTERRUPT_FORCE {
        INTERRUPT_FORCE::default()
    }
    fn write_i3c_ec_tti_interrupt_force(&mut self, _val: INTERRUPT_FORCE) {}
    fn read_i3c_ec_tti_rx_desc_queue_port(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_tti_rx_desc_queue_port(&mut self, _val: u32) {}
    fn read_i3c_ec_tti_rx_data_port(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_tti_rx_data_port(&mut self, _val: u32) {}
    fn read_i3c_ec_tti_tx_desc_queue_port(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_tti_tx_desc_queue_port(&mut self, _val: u32) {}
    fn read_i3c_ec_tti_tx_data_port(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_tti_tx_data_port(&mut self, _val: u32) {}
    fn read_i3c_ec_tti_tti_ibi_port(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_tti_tti_ibi_port(&mut self, _val: u32) {}
    fn read_i3c_ec_tti_tti_queue_size(&mut self) -> TTI_QUEUE_SIZE {
        TTI_QUEUE_SIZE::default()
    }
    fn write_i3c_ec_tti_tti_queue_size(&mut self, _val: TTI_QUEUE_SIZE) {}
    fn read_i3c_ec_tti_ibi_tti_queue_size(&mut self) -> IBI_TTI_QUEUE_SIZE {
        IBI_TTI_QUEUE_SIZE::default()
    }
    fn write_i3c_ec_tti_ibi_tti_queue_size(&mut self, _val: IBI_TTI_QUEUE_SIZE) {}
    fn read_i3c_ec_tti_tti_queue_thld_ctrl(&mut self) -> TTI_QUEUE_THLD_CTRL {
        TTI_QUEUE_THLD_CTRL::default()
    }
    fn write_i3c_ec_tti_tti_queue_thld_ctrl(&mut self, _val: TTI_QUEUE_THLD_CTRL) {}
    fn read_i3c_ec_tti_tti_data_buffer_thld_ctrl(&mut self) -> TTI_DATA_BUFFER_THLD_CTRL {
        TTI_DATA_BUFFER_THLD_CTRL::default()
    }
    fn write_i3c_ec_tti_tti_data_buffer_thld_ctrl(&mut self, _val: TTI_DATA_BUFFER_THLD_CTRL) {}
    fn read_i3c_ec_soc_mgmt_if_extcap_header(&mut self) -> EXTCAP_HEADER {
        EXTCAP_HEADER::default()
    }
    fn write_i3c_ec_soc_mgmt_if_extcap_header(&mut self, _val: EXTCAP_HEADER) {}
    fn read_i3c_ec_soc_mgmt_if_soc_mgmt_control(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_soc_mgmt_if_soc_mgmt_control(&mut self, _val: u32) {}
    fn read_i3c_ec_soc_mgmt_if_soc_mgmt_status(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_soc_mgmt_if_soc_mgmt_status(&mut self, _val: u32) {}
    fn read_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_0(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_0(&mut self, _val: u32) {}
    fn read_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_1(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_1(&mut self, _val: u32) {}
    fn read_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_2(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_2(&mut self, _val: u32) {}
    fn read_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_3(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_3(&mut self, _val: u32) {}
    fn read_i3c_ec_soc_mgmt_if_soc_pad_conf(&mut self) -> SOC_PAD_CONF {
        SOC_PAD_CONF::default()
    }
    fn write_i3c_ec_soc_mgmt_if_soc_pad_conf(&mut self, _val: SOC_PAD_CONF) {}
    fn read_i3c_ec_soc_mgmt_if_soc_pad_attr(&mut self) -> SOC_PAD_ATTR {
        SOC_PAD_ATTR::default()
    }
    fn write_i3c_ec_soc_mgmt_if_soc_pad_attr(&mut self, _val: SOC_PAD_ATTR) {}
    fn read_i3c_ec_soc_mgmt_if_soc_mgmt_feature_2(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_soc_mgmt_if_soc_mgmt_feature_2(&mut self, _val: u32) {}
    fn read_i3c_ec_soc_mgmt_if_soc_mgmt_feature_3(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_soc_mgmt_if_soc_mgmt_feature_3(&mut self, _val: u32) {}
    fn read_i3c_ec_soc_mgmt_if_t_r_reg(&mut self) -> T_R_REG {
        T_R_REG::default()
    }
    fn write_i3c_ec_soc_mgmt_if_t_r_reg(&mut self, _val: T_R_REG) {}
    fn read_i3c_ec_soc_mgmt_if_t_f_reg(&mut self) -> T_F_REG {
        T_F_REG::default()
    }
    fn write_i3c_ec_soc_mgmt_if_t_f_reg(&mut self, _val: T_F_REG) {}
    fn read_i3c_ec_soc_mgmt_if_t_su_dat_reg(&mut self) -> T_SU_DAT_REG {
        T_SU_DAT_REG::default()
    }
    fn write_i3c_ec_soc_mgmt_if_t_su_dat_reg(&mut self, _val: T_SU_DAT_REG) {}
    fn read_i3c_ec_soc_mgmt_if_t_hd_dat_reg(&mut self) -> T_HD_DAT_REG {
        T_HD_DAT_REG::default()
    }
    fn write_i3c_ec_soc_mgmt_if_t_hd_dat_reg(&mut self, _val: T_HD_DAT_REG) {}
    fn read_i3c_ec_soc_mgmt_if_t_high_reg(&mut self) -> T_HIGH_REG {
        T_HIGH_REG::default()
    }
    fn write_i3c_ec_soc_mgmt_if_t_high_reg(&mut self, _val: T_HIGH_REG) {}
    fn read_i3c_ec_soc_mgmt_if_t_low_reg(&mut self) -> T_LOW_REG {
        T_LOW_REG::default()
    }
    fn write_i3c_ec_soc_mgmt_if_t_low_reg(&mut self, _val: T_LOW_REG) {}
    fn read_i3c_ec_soc_mgmt_if_t_hd_sta_reg(&mut self) -> T_HD_STA_REG {
        T_HD_STA_REG::default()
    }
    fn write_i3c_ec_soc_mgmt_if_t_hd_sta_reg(&mut self, _val: T_HD_STA_REG) {}
    fn read_i3c_ec_soc_mgmt_if_t_su_sta_reg(&mut self) -> T_SU_STA_REG {
        T_SU_STA_REG::default()
    }
    fn write_i3c_ec_soc_mgmt_if_t_su_sta_reg(&mut self, _val: T_SU_STA_REG) {}
    fn read_i3c_ec_soc_mgmt_if_t_su_sto_reg(&mut self) -> T_SU_STO_REG {
        T_SU_STO_REG::default()
    }
    fn write_i3c_ec_soc_mgmt_if_t_su_sto_reg(&mut self, _val: T_SU_STO_REG) {}
    fn read_i3c_ec_soc_mgmt_if_t_free_reg(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_soc_mgmt_if_t_free_reg(&mut self, _val: u32) {}
    fn read_i3c_ec_soc_mgmt_if_t_aval_reg(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_soc_mgmt_if_t_aval_reg(&mut self, _val: u32) {}
    fn read_i3c_ec_soc_mgmt_if_t_idle_reg(&mut self) -> u32 {
        0
    }
    fn write_i3c_ec_soc_mgmt_if_t_idle_reg(&mut self, _val: u32) {}
    fn read_i3c_ec_ctrl_cfg_extcap_header(&mut self) -> EXTCAP_HEADER {
        EXTCAP_HEADER::default()
    }
    fn write_i3c_ec_ctrl_cfg_extcap_header(&mut self, _val: EXTCAP_HEADER) {}
    fn read_i3c_ec_ctrl_cfg_controller_config(&mut self) -> CONTROLLER_CONFIG {
        CONTROLLER_CONFIG::default()
    }
    fn write_i3c_ec_ctrl_cfg_controller_config(&mut self, _val: CONTROLLER_CONFIG) {}
}
pub struct I3cBus {
    pub periph: Box<dyn I3cPeripheral>,
}
impl emulator_bus::Bus for I3cBus {
    fn read(
        &mut self,
        size: emulator_types::RvSize,
        addr: emulator_types::RvAddr,
    ) -> Result<emulator_types::RvData, emulator_bus::BusError> {
        match (size, addr) {
            (emulator_types::RvSize::Word, 4) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_base_hc_control(),
            )),
            (emulator_types::RvSize::Word, 5..=7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 8) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_base_controller_device_addr(),
            )),
            (emulator_types::RvSize::Word, 9..=0xb) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xc) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_base_hc_capabilities(),
            )),
            (emulator_types::RvSize::Word, 0xd..=0xf) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x10) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_base_reset_control(),
            )),
            (emulator_types::RvSize::Word, 0x11..=0x13) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x14) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_base_present_state(),
            )),
            (emulator_types::RvSize::Word, 0x15..=0x17) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x20) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_base_intr_status(),
            )),
            (emulator_types::RvSize::Word, 0x21..=0x23) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x24) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_base_intr_status_enable(),
            )),
            (emulator_types::RvSize::Word, 0x25..=0x27) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x28) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_base_intr_signal_enable(),
            )),
            (emulator_types::RvSize::Word, 0x29..=0x2b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x2c) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_base_intr_force(),
            )),
            (emulator_types::RvSize::Word, 0x2d..=0x2f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x30) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_base_dat_section_offset(),
            )),
            (emulator_types::RvSize::Word, 0x31..=0x33) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x34) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_base_dct_section_offset(),
            )),
            (emulator_types::RvSize::Word, 0x35..=0x37) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x38) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_base_ring_headers_section_offset(),
            )),
            (emulator_types::RvSize::Word, 0x39..=0x3b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x3c) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_base_pio_section_offset(),
            )),
            (emulator_types::RvSize::Word, 0x3d..=0x3f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x40) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_base_ext_caps_section_offset(),
            )),
            (emulator_types::RvSize::Word, 0x41..=0x43) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x4c) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_base_int_ctrl_cmds_en(),
            )),
            (emulator_types::RvSize::Word, 0x4d..=0x4f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x58) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_base_ibi_notify_ctrl(),
            )),
            (emulator_types::RvSize::Word, 0x59..=0x5b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x5c) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_base_ibi_data_abort_ctrl(),
            )),
            (emulator_types::RvSize::Word, 0x5d..=0x5f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x60) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_base_dev_ctx_base_lo(),
            )),
            (emulator_types::RvSize::Word, 0x61..=0x63) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x64) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_base_dev_ctx_base_hi(),
            )),
            (emulator_types::RvSize::Word, 0x65..=0x67) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x68) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_base_dev_ctx_sg(),
            )),
            (emulator_types::RvSize::Word, 0x69..=0x6b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x80) => Ok(emulator_types::RvData::from(
                self.periph.read_piocontrol_command_port(),
            )),
            (emulator_types::RvSize::Word, 0x81..=0x83) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x88) => Ok(emulator_types::RvData::from(
                self.periph.read_piocontrol_tx_data_port(),
            )),
            (emulator_types::RvSize::Word, 0x89..=0x8b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x8c) => Ok(emulator_types::RvData::from(
                self.periph.read_piocontrol_ibi_port(),
            )),
            (emulator_types::RvSize::Word, 0x8d..=0x8f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x90) => Ok(emulator_types::RvData::from(
                self.periph.read_piocontrol_queue_thld_ctrl(),
            )),
            (emulator_types::RvSize::Word, 0x91..=0x93) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x94) => Ok(emulator_types::RvData::from(
                self.periph.read_piocontrol_data_buffer_thld_ctrl(),
            )),
            (emulator_types::RvSize::Word, 0x95..=0x97) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x98) => Ok(emulator_types::RvData::from(
                self.periph.read_piocontrol_queue_size(),
            )),
            (emulator_types::RvSize::Word, 0x99..=0x9b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x9c) => Ok(emulator_types::RvData::from(
                self.periph.read_piocontrol_alt_queue_size(),
            )),
            (emulator_types::RvSize::Word, 0x9d..=0x9f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa0) => Ok(emulator_types::RvData::from(
                self.periph.read_piocontrol_pio_intr_status(),
            )),
            (emulator_types::RvSize::Word, 0xa1..=0xa3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa4) => Ok(emulator_types::RvData::from(
                self.periph.read_piocontrol_pio_intr_status_enable(),
            )),
            (emulator_types::RvSize::Word, 0xa5..=0xa7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa8) => Ok(emulator_types::RvData::from(
                self.periph.read_piocontrol_pio_intr_signal_enable(),
            )),
            (emulator_types::RvSize::Word, 0xa9..=0xab) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xac) => Ok(emulator_types::RvData::from(
                self.periph.read_piocontrol_pio_intr_force(),
            )),
            (emulator_types::RvSize::Word, 0xad..=0xaf) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xb0) => Ok(emulator_types::RvData::from(
                self.periph.read_piocontrol_pio_control(),
            )),
            (emulator_types::RvSize::Word, 0xb1..=0xb3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x100) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_sec_fw_recovery_if_extcap_header(),
            )),
            (emulator_types::RvSize::Word, 0x101..=0x103) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x104) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_sec_fw_recovery_if_prot_cap_0(),
            )),
            (emulator_types::RvSize::Word, 0x105..=0x107) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x108) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_sec_fw_recovery_if_prot_cap_1(),
            )),
            (emulator_types::RvSize::Word, 0x109..=0x10b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x10c) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_sec_fw_recovery_if_prot_cap_2(),
            )),
            (emulator_types::RvSize::Word, 0x10d..=0x10f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x110) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_sec_fw_recovery_if_prot_cap_3(),
            )),
            (emulator_types::RvSize::Word, 0x111..=0x113) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x114) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_sec_fw_recovery_if_device_id_0(),
            )),
            (emulator_types::RvSize::Word, 0x115..=0x117) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x118) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_sec_fw_recovery_if_device_id_1(),
            )),
            (emulator_types::RvSize::Word, 0x119..=0x11b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x11c) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_sec_fw_recovery_if_device_id_2(),
            )),
            (emulator_types::RvSize::Word, 0x11d..=0x11f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x120) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_sec_fw_recovery_if_device_id_3(),
            )),
            (emulator_types::RvSize::Word, 0x121..=0x123) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x124) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_sec_fw_recovery_if_device_id_4(),
            )),
            (emulator_types::RvSize::Word, 0x125..=0x127) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x128) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_sec_fw_recovery_if_device_id_5(),
            )),
            (emulator_types::RvSize::Word, 0x129..=0x12b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x12c) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_sec_fw_recovery_if_device_id_6(),
            )),
            (emulator_types::RvSize::Word, 0x12d..=0x12f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x130) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_sec_fw_recovery_if_device_status_0(),
            )),
            (emulator_types::RvSize::Word, 0x131..=0x133) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x134) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_sec_fw_recovery_if_device_status_1(),
            )),
            (emulator_types::RvSize::Word, 0x135..=0x137) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x138) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_sec_fw_recovery_if_device_reset(),
            )),
            (emulator_types::RvSize::Word, 0x139..=0x13b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x13c) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_sec_fw_recovery_if_recovery_ctrl(),
            )),
            (emulator_types::RvSize::Word, 0x13d..=0x13f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x140) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_sec_fw_recovery_if_recovery_status(),
            )),
            (emulator_types::RvSize::Word, 0x141..=0x143) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x144) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_sec_fw_recovery_if_hw_status(),
            )),
            (emulator_types::RvSize::Word, 0x145..=0x147) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x148) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_sec_fw_recovery_if_indirect_fifo_ctrl_0(),
            )),
            (emulator_types::RvSize::Word, 0x149..=0x14b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x14c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_sec_fw_recovery_if_indirect_fifo_ctrl_1(),
            )),
            (emulator_types::RvSize::Word, 0x14d..=0x14f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x150) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_0(),
            )),
            (emulator_types::RvSize::Word, 0x151..=0x153) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x154) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_1(),
            )),
            (emulator_types::RvSize::Word, 0x155..=0x157) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x158) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_2(),
            )),
            (emulator_types::RvSize::Word, 0x159..=0x15b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x15c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_3(),
            )),
            (emulator_types::RvSize::Word, 0x15d..=0x15f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x160) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_4(),
            )),
            (emulator_types::RvSize::Word, 0x161..=0x163) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x164) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_5(),
            )),
            (emulator_types::RvSize::Word, 0x165..=0x167) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x168) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_sec_fw_recovery_if_indirect_fifo_data(),
            )),
            (emulator_types::RvSize::Word, 0x169..=0x16b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x180) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_stdby_ctrl_mode_extcap_header(),
            )),
            (emulator_types::RvSize::Word, 0x181..=0x183) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x184) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_stdby_ctrl_mode_stby_cr_control(),
            )),
            (emulator_types::RvSize::Word, 0x185..=0x187) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x188) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_stdby_ctrl_mode_stby_cr_device_addr(),
            )),
            (emulator_types::RvSize::Word, 0x189..=0x18b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x18c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_stdby_ctrl_mode_stby_cr_capabilities(),
            )),
            (emulator_types::RvSize::Word, 0x18d..=0x18f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x190) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_stdby_ctrl_mode_rsvd_0(),
            )),
            (emulator_types::RvSize::Word, 0x191..=0x193) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x194) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_stdby_ctrl_mode_stby_cr_status(),
            )),
            (emulator_types::RvSize::Word, 0x195..=0x197) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x198) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_stdby_ctrl_mode_stby_cr_device_char(),
            )),
            (emulator_types::RvSize::Word, 0x199..=0x19b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x19c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_stdby_ctrl_mode_stby_cr_device_pid_lo(),
            )),
            (emulator_types::RvSize::Word, 0x19d..=0x19f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1a0) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_stdby_ctrl_mode_stby_cr_intr_status(),
            )),
            (emulator_types::RvSize::Word, 0x1a1..=0x1a3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1a4) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_stdby_ctrl_mode_rsvd_1(),
            )),
            (emulator_types::RvSize::Word, 0x1a5..=0x1a7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1a8) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_stdby_ctrl_mode_stby_cr_intr_signal_enable(),
            )),
            (emulator_types::RvSize::Word, 0x1a9..=0x1ab) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1ac) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_stdby_ctrl_mode_stby_cr_intr_force(),
            )),
            (emulator_types::RvSize::Word, 0x1ad..=0x1af) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1b0) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_stdby_ctrl_mode_stby_cr_ccc_config_getcaps(),
            )),
            (emulator_types::RvSize::Word, 0x1b1..=0x1b3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1b4) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_stdby_ctrl_mode_stby_cr_ccc_config_rstact_params(),
            )),
            (emulator_types::RvSize::Word, 0x1b5..=0x1b7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1b8) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_stdby_ctrl_mode_rsvd_2(),
            )),
            (emulator_types::RvSize::Word, 0x1b9..=0x1bb) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1bc) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_stdby_ctrl_mode_rsvd_3(),
            )),
            (emulator_types::RvSize::Word, 0x1bd..=0x1bf) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1c0) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_tti_extcap_header(),
            )),
            (emulator_types::RvSize::Word, 0x1c1..=0x1c3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1c4) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_tti_control(),
            )),
            (emulator_types::RvSize::Word, 0x1c5..=0x1c7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1c8) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_tti_status(),
            )),
            (emulator_types::RvSize::Word, 0x1c9..=0x1cb) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1cc) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_tti_tti_reset_control(),
            )),
            (emulator_types::RvSize::Word, 0x1cd..=0x1cf) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1d0) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_tti_interrupt_status(),
            )),
            (emulator_types::RvSize::Word, 0x1d1..=0x1d3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1d4) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_tti_interrupt_enable(),
            )),
            (emulator_types::RvSize::Word, 0x1d5..=0x1d7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1d8) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_tti_interrupt_force(),
            )),
            (emulator_types::RvSize::Word, 0x1d9..=0x1db) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1e4) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_tti_tx_desc_queue_port(),
            )),
            (emulator_types::RvSize::Word, 0x1e5..=0x1e7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1e8) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_tti_tx_data_port(),
            )),
            (emulator_types::RvSize::Word, 0x1e9..=0x1eb) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1ec) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_tti_tti_ibi_port(),
            )),
            (emulator_types::RvSize::Word, 0x1ed..=0x1ef) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1f0) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_tti_tti_queue_size(),
            )),
            (emulator_types::RvSize::Word, 0x1f1..=0x1f3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1f4) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_tti_ibi_tti_queue_size(),
            )),
            (emulator_types::RvSize::Word, 0x1f5..=0x1f7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1f8) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_tti_tti_queue_thld_ctrl(),
            )),
            (emulator_types::RvSize::Word, 0x1f9..=0x1fb) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1fc) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_tti_tti_data_buffer_thld_ctrl(),
            )),
            (emulator_types::RvSize::Word, 0x1fd..=0x1ff) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x200) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_soc_mgmt_if_extcap_header(),
            )),
            (emulator_types::RvSize::Word, 0x201..=0x203) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x204) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_soc_mgmt_if_soc_mgmt_control(),
            )),
            (emulator_types::RvSize::Word, 0x205..=0x207) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x208) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_soc_mgmt_if_soc_mgmt_status(),
            )),
            (emulator_types::RvSize::Word, 0x209..=0x20b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x20c) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_0(),
            )),
            (emulator_types::RvSize::Word, 0x20d..=0x20f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x210) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_1(),
            )),
            (emulator_types::RvSize::Word, 0x211..=0x213) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x214) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_2(),
            )),
            (emulator_types::RvSize::Word, 0x215..=0x217) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x218) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_3(),
            )),
            (emulator_types::RvSize::Word, 0x219..=0x21b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x21c) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_soc_mgmt_if_soc_pad_conf(),
            )),
            (emulator_types::RvSize::Word, 0x21d..=0x21f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x220) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_soc_mgmt_if_soc_pad_attr(),
            )),
            (emulator_types::RvSize::Word, 0x221..=0x223) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x224) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_soc_mgmt_if_soc_mgmt_feature_2(),
            )),
            (emulator_types::RvSize::Word, 0x225..=0x227) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x228) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_soc_mgmt_if_soc_mgmt_feature_3(),
            )),
            (emulator_types::RvSize::Word, 0x229..=0x22b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x22c) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_soc_mgmt_if_t_r_reg(),
            )),
            (emulator_types::RvSize::Word, 0x22d..=0x22f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x230) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_soc_mgmt_if_t_f_reg(),
            )),
            (emulator_types::RvSize::Word, 0x231..=0x233) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x234) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_soc_mgmt_if_t_su_dat_reg(),
            )),
            (emulator_types::RvSize::Word, 0x235..=0x237) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x238) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_soc_mgmt_if_t_hd_dat_reg(),
            )),
            (emulator_types::RvSize::Word, 0x239..=0x23b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x23c) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_soc_mgmt_if_t_high_reg(),
            )),
            (emulator_types::RvSize::Word, 0x23d..=0x23f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x240) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_soc_mgmt_if_t_low_reg(),
            )),
            (emulator_types::RvSize::Word, 0x241..=0x243) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x244) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_soc_mgmt_if_t_hd_sta_reg(),
            )),
            (emulator_types::RvSize::Word, 0x245..=0x247) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x248) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_soc_mgmt_if_t_su_sta_reg(),
            )),
            (emulator_types::RvSize::Word, 0x249..=0x24b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x24c) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_soc_mgmt_if_t_su_sto_reg(),
            )),
            (emulator_types::RvSize::Word, 0x24d..=0x24f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x250) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_soc_mgmt_if_t_free_reg(),
            )),
            (emulator_types::RvSize::Word, 0x251..=0x253) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x254) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_soc_mgmt_if_t_aval_reg(),
            )),
            (emulator_types::RvSize::Word, 0x255..=0x257) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x258) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_soc_mgmt_if_t_idle_reg(),
            )),
            (emulator_types::RvSize::Word, 0x259..=0x25b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x260) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_ctrl_cfg_extcap_header(),
            )),
            (emulator_types::RvSize::Word, 0x261..=0x263) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x264) => Ok(emulator_types::RvData::from(
                self.periph.read_i3c_ec_ctrl_cfg_controller_config(),
            )),
            (emulator_types::RvSize::Word, 0x265..=0x267) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            _ => Err(emulator_bus::BusError::LoadAccessFault),
        }
    }
    fn write(
        &mut self,
        size: emulator_types::RvSize,
        addr: emulator_types::RvAddr,
        val: emulator_types::RvData,
    ) -> Result<(), emulator_bus::BusError> {
        match (size, addr) {
            (emulator_types::RvSize::Word, 0) => {
                self.periph.write_i3c_base_hci_version(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 1..=3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 4) => {
                self.periph.write_i3c_base_hc_control(HC_CONTROL::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 5..=7) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 8) => {
                self.periph
                    .write_i3c_base_controller_device_addr(CONTROLLER_DEVICE_ADDR::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 9..=0xb) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xc) => {
                self.periph
                    .write_i3c_base_hc_capabilities(HC_CAPABILITIES::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xd..=0xf) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x10) => {
                self.periph
                    .write_i3c_base_reset_control(RESET_CONTROL::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x11..=0x13) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x14) => {
                self.periph
                    .write_i3c_base_present_state(PRESENT_STATE::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x15..=0x17) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x20) => {
                self.periph
                    .write_i3c_base_intr_status(INTR_STATUS::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x21..=0x23) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x24) => {
                self.periph
                    .write_i3c_base_intr_status_enable(INTR_STATUS_ENABLE::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x25..=0x27) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x28) => {
                self.periph
                    .write_i3c_base_intr_signal_enable(INTR_SIGNAL_ENABLE::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x29..=0x2b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x2c) => {
                self.periph.write_i3c_base_intr_force(INTR_FORCE::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x2d..=0x2f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x30) => {
                self.periph
                    .write_i3c_base_dat_section_offset(DAT_SECTION_OFFSET::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x31..=0x33) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x34) => {
                self.periph
                    .write_i3c_base_dct_section_offset(DCT_SECTION_OFFSET::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x35..=0x37) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x38) => {
                self.periph.write_i3c_base_ring_headers_section_offset(
                    RING_HEADERS_SECTION_OFFSET::from(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x39..=0x3b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x3c) => {
                self.periph
                    .write_i3c_base_pio_section_offset(PIO_SECTION_OFFSET::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x3d..=0x3f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x40) => {
                self.periph
                    .write_i3c_base_ext_caps_section_offset(EXT_CAPS_SECTION_OFFSET::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x41..=0x43) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x4c) => {
                self.periph
                    .write_i3c_base_int_ctrl_cmds_en(INT_CTRL_CMDS_EN::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x4d..=0x4f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x58) => {
                self.periph
                    .write_i3c_base_ibi_notify_ctrl(IBI_NOTIFY_CTRL::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x59..=0x5b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x5c) => {
                self.periph
                    .write_i3c_base_ibi_data_abort_ctrl(IBI_DATA_ABORT_CTRL::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x5d..=0x5f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x60) => {
                self.periph
                    .write_i3c_base_dev_ctx_base_lo(DEV_CTX_BASE_LO::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x61..=0x63) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x64) => {
                self.periph
                    .write_i3c_base_dev_ctx_base_hi(DEV_CTX_BASE_HI::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x65..=0x67) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x68) => {
                self.periph.write_i3c_base_dev_ctx_sg(DEV_CTX_SG::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x69..=0x6b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x84) => {
                self.periph.write_piocontrol_response_port(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x85..=0x87) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x88) => {
                self.periph.write_piocontrol_rx_data_port(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x89..=0x8b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x8c) => {
                self.periph.write_piocontrol_ibi_port(IBI_PORT::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x8d..=0x8f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x90) => {
                self.periph
                    .write_piocontrol_queue_thld_ctrl(QUEUE_THLD_CTRL::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x91..=0x93) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x94) => {
                self.periph
                    .write_piocontrol_data_buffer_thld_ctrl(DATA_BUFFER_THLD_CTRL::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x95..=0x97) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x98) => {
                self.periph
                    .write_piocontrol_queue_size(QUEUE_SIZE::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x99..=0x9b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x9c) => {
                self.periph
                    .write_piocontrol_alt_queue_size(ALT_QUEUE_SIZE::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x9d..=0x9f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa0) => {
                self.periph
                    .write_piocontrol_pio_intr_status(PIO_INTR_STATUS::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa1..=0xa3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa4) => {
                self.periph
                    .write_piocontrol_pio_intr_status_enable(PIO_INTR_STATUS_ENABLE::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa5..=0xa7) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa8) => {
                self.periph
                    .write_piocontrol_pio_intr_signal_enable(PIO_INTR_SIGNAL_ENABLE::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa9..=0xab) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xac) => {
                self.periph
                    .write_piocontrol_pio_intr_force(PIO_INTR_FORCE::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xad..=0xaf) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xb0) => {
                self.periph
                    .write_piocontrol_pio_control(PIO_CONTROL::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xb1..=0xb3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x100) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_extcap_header(EXTCAP_HEADER::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x101..=0x103) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x104) => {
                self.periph.write_i3c_ec_sec_fw_recovery_if_prot_cap_0(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x105..=0x107) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x108) => {
                self.periph.write_i3c_ec_sec_fw_recovery_if_prot_cap_1(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x109..=0x10b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x10c) => {
                self.periph.write_i3c_ec_sec_fw_recovery_if_prot_cap_2(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x10d..=0x10f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x110) => {
                self.periph.write_i3c_ec_sec_fw_recovery_if_prot_cap_3(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x111..=0x113) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x114) => {
                self.periph.write_i3c_ec_sec_fw_recovery_if_device_id_0(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x115..=0x117) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x118) => {
                self.periph.write_i3c_ec_sec_fw_recovery_if_device_id_1(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x119..=0x11b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x11c) => {
                self.periph.write_i3c_ec_sec_fw_recovery_if_device_id_2(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x11d..=0x11f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x120) => {
                self.periph.write_i3c_ec_sec_fw_recovery_if_device_id_3(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x121..=0x123) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x124) => {
                self.periph.write_i3c_ec_sec_fw_recovery_if_device_id_4(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x125..=0x127) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x128) => {
                self.periph.write_i3c_ec_sec_fw_recovery_if_device_id_5(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x129..=0x12b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x12c) => {
                self.periph.write_i3c_ec_sec_fw_recovery_if_device_id_6(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x12d..=0x12f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x130) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_device_status_0(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x131..=0x133) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x134) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_device_status_1(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x135..=0x137) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x138) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_device_reset(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x139..=0x13b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x13c) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_recovery_ctrl(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x13d..=0x13f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x140) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_recovery_status(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x141..=0x143) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x144) => {
                self.periph.write_i3c_ec_sec_fw_recovery_if_hw_status(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x145..=0x147) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x148) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_indirect_fifo_ctrl_0(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x149..=0x14b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x14c) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_indirect_fifo_ctrl_1(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x14d..=0x14f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x150) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_0(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x151..=0x153) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x154) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_1(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x155..=0x157) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x158) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_2(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x159..=0x15b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x15c) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_3(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x15d..=0x15f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x160) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_4(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x161..=0x163) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x164) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_5(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x165..=0x167) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x168) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_indirect_fifo_data(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x169..=0x16b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x180) => {
                self.periph
                    .write_i3c_ec_stdby_ctrl_mode_extcap_header(EXTCAP_HEADER::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x181..=0x183) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x184) => {
                self.periph
                    .write_i3c_ec_stdby_ctrl_mode_stby_cr_control(STBY_CR_CONTROL::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x185..=0x187) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x188) => {
                self.periph
                    .write_i3c_ec_stdby_ctrl_mode_stby_cr_device_addr(STBY_CR_DEVICE_ADDR::from(
                        val,
                    ));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x189..=0x18b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x18c) => {
                self.periph
                    .write_i3c_ec_stdby_ctrl_mode_stby_cr_capabilities(STBY_CR_CAPABILITIES::from(
                        val,
                    ));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x18d..=0x18f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x190) => {
                self.periph.write_i3c_ec_stdby_ctrl_mode_rsvd_0(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x191..=0x193) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x194) => {
                self.periph
                    .write_i3c_ec_stdby_ctrl_mode_stby_cr_status(STBY_CR_STATUS::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x195..=0x197) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x198) => {
                self.periph
                    .write_i3c_ec_stdby_ctrl_mode_stby_cr_device_char(STBY_CR_DEVICE_CHAR::from(
                        val,
                    ));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x199..=0x19b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x19c) => {
                self.periph
                    .write_i3c_ec_stdby_ctrl_mode_stby_cr_device_pid_lo(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x19d..=0x19f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1a0) => {
                self.periph
                    .write_i3c_ec_stdby_ctrl_mode_stby_cr_intr_status(STBY_CR_INTR_STATUS::from(
                        val,
                    ));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1a1..=0x1a3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1a4) => {
                self.periph.write_i3c_ec_stdby_ctrl_mode_rsvd_1(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1a5..=0x1a7) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1a8) => {
                self.periph
                    .write_i3c_ec_stdby_ctrl_mode_stby_cr_intr_signal_enable(
                        STBY_CR_INTR_SIGNAL_ENABLE::from(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1a9..=0x1ab) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1ac) => {
                self.periph
                    .write_i3c_ec_stdby_ctrl_mode_stby_cr_intr_force(STBY_CR_INTR_FORCE::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1ad..=0x1af) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1b0) => {
                self.periph
                    .write_i3c_ec_stdby_ctrl_mode_stby_cr_ccc_config_getcaps(
                        STBY_CR_CCC_CONFIG_GETCAPS::from(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1b1..=0x1b3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1b4) => {
                self.periph
                    .write_i3c_ec_stdby_ctrl_mode_stby_cr_ccc_config_rstact_params(
                        STBY_CR_CCC_CONFIG_RSTACT_PARAMS::from(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1b5..=0x1b7) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1b8) => {
                self.periph.write_i3c_ec_stdby_ctrl_mode_rsvd_2(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1b9..=0x1bb) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1bc) => {
                self.periph.write_i3c_ec_stdby_ctrl_mode_rsvd_3(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1bd..=0x1bf) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1c0) => {
                self.periph
                    .write_i3c_ec_tti_extcap_header(EXTCAP_HEADER::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1c1..=0x1c3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1c4) => {
                self.periph.write_i3c_ec_tti_control(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1c5..=0x1c7) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1c8) => {
                self.periph.write_i3c_ec_tti_status(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1c9..=0x1cb) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1cc) => {
                self.periph
                    .write_i3c_ec_tti_tti_reset_control(TTI_RESET_CONTROL::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1cd..=0x1cf) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1d0) => {
                self.periph
                    .write_i3c_ec_tti_interrupt_status(INTERRUPT_STATUS::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1d1..=0x1d3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1d4) => {
                self.periph
                    .write_i3c_ec_tti_interrupt_enable(INTERRUPT_ENABLE::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1d5..=0x1d7) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1d8) => {
                self.periph
                    .write_i3c_ec_tti_interrupt_force(INTERRUPT_FORCE::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1d9..=0x1db) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1dc) => {
                self.periph.write_i3c_ec_tti_rx_desc_queue_port(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1dd..=0x1df) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1e0) => {
                self.periph.write_i3c_ec_tti_rx_data_port(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1e1..=0x1e3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1f0) => {
                self.periph
                    .write_i3c_ec_tti_tti_queue_size(TTI_QUEUE_SIZE::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1f1..=0x1f3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1f4) => {
                self.periph
                    .write_i3c_ec_tti_ibi_tti_queue_size(IBI_TTI_QUEUE_SIZE::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1f5..=0x1f7) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1f8) => {
                self.periph
                    .write_i3c_ec_tti_tti_queue_thld_ctrl(TTI_QUEUE_THLD_CTRL::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1f9..=0x1fb) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1fc) => {
                self.periph.write_i3c_ec_tti_tti_data_buffer_thld_ctrl(
                    TTI_DATA_BUFFER_THLD_CTRL::from(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1fd..=0x1ff) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x200) => {
                self.periph
                    .write_i3c_ec_soc_mgmt_if_extcap_header(EXTCAP_HEADER::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x201..=0x203) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x204) => {
                self.periph.write_i3c_ec_soc_mgmt_if_soc_mgmt_control(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x205..=0x207) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x208) => {
                self.periph.write_i3c_ec_soc_mgmt_if_soc_mgmt_status(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x209..=0x20b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x20c) => {
                self.periph.write_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_0(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x20d..=0x20f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x210) => {
                self.periph.write_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_1(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x211..=0x213) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x214) => {
                self.periph.write_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_2(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x215..=0x217) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x218) => {
                self.periph.write_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_3(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x219..=0x21b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x21c) => {
                self.periph
                    .write_i3c_ec_soc_mgmt_if_soc_pad_conf(SOC_PAD_CONF::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x21d..=0x21f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x220) => {
                self.periph
                    .write_i3c_ec_soc_mgmt_if_soc_pad_attr(SOC_PAD_ATTR::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x221..=0x223) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x224) => {
                self.periph.write_i3c_ec_soc_mgmt_if_soc_mgmt_feature_2(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x225..=0x227) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x228) => {
                self.periph.write_i3c_ec_soc_mgmt_if_soc_mgmt_feature_3(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x229..=0x22b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x22c) => {
                self.periph
                    .write_i3c_ec_soc_mgmt_if_t_r_reg(T_R_REG::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x22d..=0x22f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x230) => {
                self.periph
                    .write_i3c_ec_soc_mgmt_if_t_f_reg(T_F_REG::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x231..=0x233) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x234) => {
                self.periph
                    .write_i3c_ec_soc_mgmt_if_t_su_dat_reg(T_SU_DAT_REG::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x235..=0x237) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x238) => {
                self.periph
                    .write_i3c_ec_soc_mgmt_if_t_hd_dat_reg(T_HD_DAT_REG::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x239..=0x23b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x23c) => {
                self.periph
                    .write_i3c_ec_soc_mgmt_if_t_high_reg(T_HIGH_REG::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x23d..=0x23f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x240) => {
                self.periph
                    .write_i3c_ec_soc_mgmt_if_t_low_reg(T_LOW_REG::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x241..=0x243) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x244) => {
                self.periph
                    .write_i3c_ec_soc_mgmt_if_t_hd_sta_reg(T_HD_STA_REG::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x245..=0x247) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x248) => {
                self.periph
                    .write_i3c_ec_soc_mgmt_if_t_su_sta_reg(T_SU_STA_REG::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x249..=0x24b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x24c) => {
                self.periph
                    .write_i3c_ec_soc_mgmt_if_t_su_sto_reg(T_SU_STO_REG::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x24d..=0x24f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x250) => {
                self.periph.write_i3c_ec_soc_mgmt_if_t_free_reg(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x251..=0x253) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x254) => {
                self.periph.write_i3c_ec_soc_mgmt_if_t_aval_reg(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x255..=0x257) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x258) => {
                self.periph.write_i3c_ec_soc_mgmt_if_t_idle_reg(val);
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x259..=0x25b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x260) => {
                self.periph
                    .write_i3c_ec_ctrl_cfg_extcap_header(EXTCAP_HEADER::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x261..=0x263) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x264) => {
                self.periph
                    .write_i3c_ec_ctrl_cfg_controller_config(CONTROLLER_CONFIG::from(val));
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x265..=0x267) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            _ => Err(emulator_bus::BusError::StoreAccessFault),
        }
    }
    fn poll(&mut self) {
        self.periph.poll();
    }
    fn warm_reset(&mut self) {
        self.periph.warm_reset();
    }
    fn update_reset(&mut self) {
        self.periph.update_reset();
    }
}
