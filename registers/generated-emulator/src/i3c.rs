// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-ss repo at a621fff9df7015821eda6f7f73265fef74a01375
//
#[allow(unused_imports)]
use tock_registers::interfaces::{Readable, Writeable};
pub trait I3cPeripheral {
    fn poll(&mut self) {}
    fn warm_reset(&mut self) {}
    fn update_reset(&mut self) {}
    fn read_dat(&mut self, _size: emulator_types::RvSize) -> emulator_types::RvData {
        0
    }
    fn write_dat(&mut self, _size: emulator_types::RvSize, _val: emulator_types::RvData) {}
    fn read_dct(&mut self, _size: emulator_types::RvSize) -> emulator_types::RvData {
        0
    }
    fn write_dct(&mut self, _size: emulator_types::RvSize, _val: emulator_types::RvData) {}
    fn read_i3c_base_hci_version(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn read_i3c_base_hc_control(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::HcControl::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_base_hc_control(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::HcControl::Register,
        >,
    ) {
    }
    fn read_i3c_base_controller_device_addr(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::ControllerDeviceAddr::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_base_controller_device_addr(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::ControllerDeviceAddr::Register,
        >,
    ) {
    }
    fn read_i3c_base_hc_capabilities(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::HcCapabilities::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_i3c_base_reset_control(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::ResetControl::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_base_reset_control(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::ResetControl::Register,
        >,
    ) {
    }
    fn read_i3c_base_present_state(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::PresentState::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_i3c_base_intr_status(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::IntrStatus::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_base_intr_status(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::IntrStatus::Register,
        >,
    ) {
    }
    fn read_i3c_base_intr_status_enable(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::IntrStatusEnable::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_base_intr_status_enable(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::IntrStatusEnable::Register,
        >,
    ) {
    }
    fn read_i3c_base_intr_signal_enable(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::IntrSignalEnable::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_base_intr_signal_enable(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::IntrSignalEnable::Register,
        >,
    ) {
    }
    fn write_i3c_base_intr_force(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::IntrForce::Register,
        >,
    ) {
    }
    fn read_i3c_base_dat_section_offset(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::DatSectionOffset::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_i3c_base_dct_section_offset(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::DctSectionOffset::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_base_dct_section_offset(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::DctSectionOffset::Register,
        >,
    ) {
    }
    fn read_i3c_base_ring_headers_section_offset(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::RingHeadersSectionOffset::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_i3c_base_pio_section_offset(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::PioSectionOffset::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_i3c_base_ext_caps_section_offset(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::ExtCapsSectionOffset::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_i3c_base_int_ctrl_cmds_en(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::IntCtrlCmdsEn::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_i3c_base_ibi_notify_ctrl(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::IbiNotifyCtrl::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_base_ibi_notify_ctrl(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::IbiNotifyCtrl::Register,
        >,
    ) {
    }
    fn read_i3c_base_ibi_data_abort_ctrl(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::IbiDataAbortCtrl::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_base_ibi_data_abort_ctrl(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::IbiDataAbortCtrl::Register,
        >,
    ) {
    }
    fn read_i3c_base_dev_ctx_base_lo(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::DevCtxBaseLo::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_base_dev_ctx_base_lo(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::DevCtxBaseLo::Register,
        >,
    ) {
    }
    fn read_i3c_base_dev_ctx_base_hi(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::DevCtxBaseHi::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_base_dev_ctx_base_hi(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::DevCtxBaseHi::Register,
        >,
    ) {
    }
    fn read_i3c_base_dev_ctx_sg(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::DevCtxSg::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_piocontrol_command_port(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_piocontrol_response_port(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_piocontrol_tx_data_port(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_piocontrol_rx_data_port(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn read_piocontrol_ibi_port(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::IbiPort::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_piocontrol_queue_thld_ctrl(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::QueueThldCtrl::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_piocontrol_queue_thld_ctrl(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::QueueThldCtrl::Register,
        >,
    ) {
    }
    fn read_piocontrol_data_buffer_thld_ctrl(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::DataBufferThldCtrl::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_piocontrol_data_buffer_thld_ctrl(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::DataBufferThldCtrl::Register,
        >,
    ) {
    }
    fn read_piocontrol_queue_size(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::QueueSize::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_piocontrol_alt_queue_size(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::AltQueueSize::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_piocontrol_pio_intr_status(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::PioIntrStatus::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_piocontrol_pio_intr_status(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::PioIntrStatus::Register,
        >,
    ) {
    }
    fn read_piocontrol_pio_intr_status_enable(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::PioIntrStatusEnable::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_piocontrol_pio_intr_status_enable(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::PioIntrStatusEnable::Register,
        >,
    ) {
    }
    fn read_piocontrol_pio_intr_signal_enable(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::PioIntrSignalEnable::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_piocontrol_pio_intr_signal_enable(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::PioIntrSignalEnable::Register,
        >,
    ) {
    }
    fn write_piocontrol_pio_intr_force(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::PioIntrForce::Register,
        >,
    ) {
    }
    fn read_piocontrol_pio_control(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::PioControl::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_piocontrol_pio_control(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::PioControl::Register,
        >,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_extcap_header(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::ExtcapHeader::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_i3c_ec_sec_fw_recovery_if_prot_cap_0(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_prot_cap_0(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_prot_cap_1(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_prot_cap_1(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_prot_cap_2(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_prot_cap_2(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_prot_cap_3(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_prot_cap_3(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_device_id_0(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_device_id_0(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_device_id_1(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_device_id_1(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_device_id_2(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_device_id_2(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_device_id_3(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_device_id_3(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_device_id_4(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_device_id_4(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_device_id_5(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_device_id_5(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_device_id_6(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_device_id_6(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_device_status_0(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_device_status_0(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_device_status_1(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_device_status_1(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_device_reset(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_device_reset(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_recovery_ctrl(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_recovery_ctrl(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_recovery_status(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_recovery_status(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_hw_status(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_hw_status(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_indirect_fifo_ctrl_0(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_indirect_fifo_ctrl_0(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_indirect_fifo_ctrl_1(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_indirect_fifo_ctrl_1(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_0(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_0(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_1(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_1(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_2(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_2(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_3(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_3(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_4(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_4(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_5(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_5(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_sec_fw_recovery_if_indirect_fifo_data(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_sec_fw_recovery_if_indirect_fifo_data(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_stdby_ctrl_mode_extcap_header(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::ExtcapHeader::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_i3c_ec_stdby_ctrl_mode_stby_cr_control(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::StbyCrControl::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_stdby_ctrl_mode_stby_cr_control(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::StbyCrControl::Register,
        >,
    ) {
    }
    fn read_i3c_ec_stdby_ctrl_mode_stby_cr_device_addr(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::StbyCrDeviceAddr::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_stdby_ctrl_mode_stby_cr_device_addr(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::StbyCrDeviceAddr::Register,
        >,
    ) {
    }
    fn read_i3c_ec_stdby_ctrl_mode_stby_cr_capabilities(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::StbyCrCapabilities::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_stdby_ctrl_mode_stby_cr_capabilities(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::StbyCrCapabilities::Register,
        >,
    ) {
    }
    fn read_i3c_ec_stdby_ctrl_mode_rsvd_0(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_stdby_ctrl_mode_rsvd_0(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_stdby_ctrl_mode_stby_cr_status(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::StbyCrStatus::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_stdby_ctrl_mode_stby_cr_status(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::StbyCrStatus::Register,
        >,
    ) {
    }
    fn read_i3c_ec_stdby_ctrl_mode_stby_cr_device_char(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::StbyCrDeviceChar::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_stdby_ctrl_mode_stby_cr_device_char(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::StbyCrDeviceChar::Register,
        >,
    ) {
    }
    fn read_i3c_ec_stdby_ctrl_mode_stby_cr_device_pid_lo(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_stdby_ctrl_mode_stby_cr_device_pid_lo(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_stdby_ctrl_mode_stby_cr_intr_status(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::StbyCrIntrStatus::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_stdby_ctrl_mode_stby_cr_intr_status(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::StbyCrIntrStatus::Register,
        >,
    ) {
    }
    fn read_i3c_ec_stdby_ctrl_mode_rsvd_1(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_stdby_ctrl_mode_rsvd_1(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_stdby_ctrl_mode_stby_cr_intr_signal_enable(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::StbyCrIntrSignalEnable::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_stdby_ctrl_mode_stby_cr_intr_signal_enable(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::StbyCrIntrSignalEnable::Register,
        >,
    ) {
    }
    fn read_i3c_ec_stdby_ctrl_mode_stby_cr_intr_force(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::StbyCrIntrForce::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_stdby_ctrl_mode_stby_cr_intr_force(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::StbyCrIntrForce::Register,
        >,
    ) {
    }
    fn read_i3c_ec_stdby_ctrl_mode_stby_cr_ccc_config_getcaps(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::StbyCrCccConfigGetcaps::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_stdby_ctrl_mode_stby_cr_ccc_config_getcaps(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::StbyCrCccConfigGetcaps::Register,
        >,
    ) {
    }
    fn read_i3c_ec_stdby_ctrl_mode_stby_cr_ccc_config_rstact_params(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::StbyCrCccConfigRstactParams::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_stdby_ctrl_mode_stby_cr_ccc_config_rstact_params(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::StbyCrCccConfigRstactParams::Register,
        >,
    ) {
    }
    fn read_i3c_ec_stdby_ctrl_mode_rsvd_2(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_stdby_ctrl_mode_rsvd_2(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_stdby_ctrl_mode_rsvd_3(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_stdby_ctrl_mode_rsvd_3(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_tti_extcap_header(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::ExtcapHeader::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_i3c_ec_tti_control(&mut self, _size: emulator_types::RvSize) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_tti_control(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_tti_status(&mut self, _size: emulator_types::RvSize) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_tti_status(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_tti_tti_reset_control(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::TtiResetControl::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_tti_tti_reset_control(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::TtiResetControl::Register,
        >,
    ) {
    }
    fn read_i3c_ec_tti_interrupt_status(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::InterruptStatus::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_tti_interrupt_status(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::InterruptStatus::Register,
        >,
    ) {
    }
    fn read_i3c_ec_tti_interrupt_enable(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::InterruptEnable::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_tti_interrupt_enable(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::InterruptEnable::Register,
        >,
    ) {
    }
    fn read_i3c_ec_tti_interrupt_force(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::InterruptForce::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_tti_interrupt_force(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::InterruptForce::Register,
        >,
    ) {
    }
    fn read_i3c_ec_tti_rx_desc_queue_port(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn read_i3c_ec_tti_rx_data_port(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_tti_tx_desc_queue_port(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn write_i3c_ec_tti_tx_data_port(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn write_i3c_ec_tti_tti_ibi_port(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_tti_tti_queue_size(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::TtiQueueSize::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_i3c_ec_tti_ibi_tti_queue_size(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::IbiTtiQueueSize::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_i3c_ec_tti_tti_queue_thld_ctrl(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::TtiQueueThldCtrl::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_tti_tti_queue_thld_ctrl(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::TtiQueueThldCtrl::Register,
        >,
    ) {
    }
    fn read_i3c_ec_tti_tti_data_buffer_thld_ctrl(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::TtiDataBufferThldCtrl::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_tti_tti_data_buffer_thld_ctrl(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::TtiDataBufferThldCtrl::Register,
        >,
    ) {
    }
    fn read_i3c_ec_soc_mgmt_if_extcap_header(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::ExtcapHeader::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_i3c_ec_soc_mgmt_if_soc_mgmt_control(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_soc_mgmt_if_soc_mgmt_control(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_soc_mgmt_if_soc_mgmt_status(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_soc_mgmt_if_soc_mgmt_status(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_0(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_0(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_1(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_1(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_2(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_2(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_3(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_3(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_soc_mgmt_if_soc_pad_conf(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::SocPadConf::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_soc_mgmt_if_soc_pad_conf(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::SocPadConf::Register,
        >,
    ) {
    }
    fn read_i3c_ec_soc_mgmt_if_soc_pad_attr(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::SocPadAttr::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_soc_mgmt_if_soc_pad_attr(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::SocPadAttr::Register,
        >,
    ) {
    }
    fn read_i3c_ec_soc_mgmt_if_soc_mgmt_feature_2(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_soc_mgmt_if_soc_mgmt_feature_2(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_soc_mgmt_if_soc_mgmt_feature_3(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_soc_mgmt_if_soc_mgmt_feature_3(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_soc_mgmt_if_t_r_reg(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::TRReg::Register> {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_soc_mgmt_if_t_r_reg(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::TRReg::Register>,
    ) {
    }
    fn read_i3c_ec_soc_mgmt_if_t_f_reg(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::TFReg::Register> {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_soc_mgmt_if_t_f_reg(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::TFReg::Register>,
    ) {
    }
    fn read_i3c_ec_soc_mgmt_if_t_su_dat_reg(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::TSuDatReg::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_soc_mgmt_if_t_su_dat_reg(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::TSuDatReg::Register,
        >,
    ) {
    }
    fn read_i3c_ec_soc_mgmt_if_t_hd_dat_reg(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::THdDatReg::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_soc_mgmt_if_t_hd_dat_reg(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::THdDatReg::Register,
        >,
    ) {
    }
    fn read_i3c_ec_soc_mgmt_if_t_high_reg(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::THighReg::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_soc_mgmt_if_t_high_reg(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::THighReg::Register,
        >,
    ) {
    }
    fn read_i3c_ec_soc_mgmt_if_t_low_reg(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::TLowReg::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_soc_mgmt_if_t_low_reg(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::TLowReg::Register,
        >,
    ) {
    }
    fn read_i3c_ec_soc_mgmt_if_t_hd_sta_reg(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::THdStaReg::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_soc_mgmt_if_t_hd_sta_reg(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::THdStaReg::Register,
        >,
    ) {
    }
    fn read_i3c_ec_soc_mgmt_if_t_su_sta_reg(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::TSuStaReg::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_soc_mgmt_if_t_su_sta_reg(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::TSuStaReg::Register,
        >,
    ) {
    }
    fn read_i3c_ec_soc_mgmt_if_t_su_sto_reg(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::TSuStoReg::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_i3c_ec_soc_mgmt_if_t_su_sto_reg(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::i3c::bits::TSuStoReg::Register,
        >,
    ) {
    }
    fn read_i3c_ec_soc_mgmt_if_t_free_reg(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_soc_mgmt_if_t_free_reg(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_soc_mgmt_if_t_aval_reg(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_soc_mgmt_if_t_aval_reg(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_soc_mgmt_if_t_idle_reg(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn write_i3c_ec_soc_mgmt_if_t_idle_reg(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_types::RvData,
    ) {
    }
    fn read_i3c_ec_ctrl_cfg_extcap_header(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::i3c::bits::ExtcapHeader::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_i3c_ec_ctrl_cfg_controller_config(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::i3c::bits::ControllerConfig::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
}
pub struct I3cBus {
    pub periph: Box<dyn I3cPeripheral>,
}
impl emulator_bus::Bus for I3cBus {
    fn read(
        &mut self,
        size: emulator_types::RvSize,
        addr: emulator_types::RvAddr,
    ) -> Result<emulator_types::RvData, emulator_bus::BusError> {
        match (size, addr) {
            (size, 0x400) => Ok(self.periph.read_dat(size)),
            (_, 0x401..=0x403) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x800) => Ok(self.periph.read_dct(size)),
            (_, 0x801..=0x803) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0) => Ok(self.periph.read_i3c_base_hci_version(size)),
            (_, 1..=3) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (emulator_types::RvSize::Word, 4) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_base_hc_control(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 5..=7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 8) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_base_controller_device_addr(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 9..=0xb) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xc) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_base_hc_capabilities(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xd..=0xf) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x10) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_base_reset_control(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x11..=0x13) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x14) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_base_present_state(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x15..=0x17) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x20) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_base_intr_status(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x21..=0x23) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x24) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_base_intr_status_enable(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x25..=0x27) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x28) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_base_intr_signal_enable(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x29..=0x2b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x30) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_base_dat_section_offset(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x31..=0x33) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x34) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_base_dct_section_offset(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x35..=0x37) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x38) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_base_ring_headers_section_offset(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x39..=0x3b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x3c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_base_pio_section_offset(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x3d..=0x3f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x40) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_base_ext_caps_section_offset(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x41..=0x43) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x4c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_base_int_ctrl_cmds_en(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x4d..=0x4f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x58) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_base_ibi_notify_ctrl(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x59..=0x5b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x5c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_base_ibi_data_abort_ctrl(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x5d..=0x5f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x60) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_base_dev_ctx_base_lo(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x61..=0x63) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x64) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_base_dev_ctx_base_hi(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x65..=0x67) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x68) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_base_dev_ctx_sg(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x69..=0x6b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (size, 0x84) => Ok(self.periph.read_piocontrol_response_port(size)),
            (_, 0x85..=0x87) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x88) => Ok(self.periph.read_piocontrol_rx_data_port(size)),
            (_, 0x89..=0x8b) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (emulator_types::RvSize::Word, 0x8c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_piocontrol_ibi_port(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x8d..=0x8f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x90) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_piocontrol_queue_thld_ctrl(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x91..=0x93) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x94) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_piocontrol_data_buffer_thld_ctrl(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x95..=0x97) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x98) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_piocontrol_queue_size(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x99..=0x9b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x9c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_piocontrol_alt_queue_size(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x9d..=0x9f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa0) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_piocontrol_pio_intr_status(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa1..=0xa3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa4) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_piocontrol_pio_intr_status_enable(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa5..=0xa7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa8) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_piocontrol_pio_intr_signal_enable(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa9..=0xab) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xb0) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_piocontrol_pio_control(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xb1..=0xb3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x100) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_sec_fw_recovery_if_extcap_header(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x101..=0x103) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (size, 0x104) => Ok(self.periph.read_i3c_ec_sec_fw_recovery_if_prot_cap_0(size)),
            (_, 0x105..=0x107) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x108) => Ok(self.periph.read_i3c_ec_sec_fw_recovery_if_prot_cap_1(size)),
            (_, 0x109..=0x10b) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x10c) => Ok(self.periph.read_i3c_ec_sec_fw_recovery_if_prot_cap_2(size)),
            (_, 0x10d..=0x10f) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x110) => Ok(self.periph.read_i3c_ec_sec_fw_recovery_if_prot_cap_3(size)),
            (_, 0x111..=0x113) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x114) => Ok(self.periph.read_i3c_ec_sec_fw_recovery_if_device_id_0(size)),
            (_, 0x115..=0x117) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x118) => Ok(self.periph.read_i3c_ec_sec_fw_recovery_if_device_id_1(size)),
            (_, 0x119..=0x11b) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x11c) => Ok(self.periph.read_i3c_ec_sec_fw_recovery_if_device_id_2(size)),
            (_, 0x11d..=0x11f) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x120) => Ok(self.periph.read_i3c_ec_sec_fw_recovery_if_device_id_3(size)),
            (_, 0x121..=0x123) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x124) => Ok(self.periph.read_i3c_ec_sec_fw_recovery_if_device_id_4(size)),
            (_, 0x125..=0x127) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x128) => Ok(self.periph.read_i3c_ec_sec_fw_recovery_if_device_id_5(size)),
            (_, 0x129..=0x12b) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x12c) => Ok(self.periph.read_i3c_ec_sec_fw_recovery_if_device_id_6(size)),
            (_, 0x12d..=0x12f) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x130) => Ok(self
                .periph
                .read_i3c_ec_sec_fw_recovery_if_device_status_0(size)),
            (_, 0x131..=0x133) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x134) => Ok(self
                .periph
                .read_i3c_ec_sec_fw_recovery_if_device_status_1(size)),
            (_, 0x135..=0x137) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x138) => Ok(self
                .periph
                .read_i3c_ec_sec_fw_recovery_if_device_reset(size)),
            (_, 0x139..=0x13b) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x13c) => Ok(self
                .periph
                .read_i3c_ec_sec_fw_recovery_if_recovery_ctrl(size)),
            (_, 0x13d..=0x13f) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x140) => Ok(self
                .periph
                .read_i3c_ec_sec_fw_recovery_if_recovery_status(size)),
            (_, 0x141..=0x143) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x144) => Ok(self.periph.read_i3c_ec_sec_fw_recovery_if_hw_status(size)),
            (_, 0x145..=0x147) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x148) => Ok(self
                .periph
                .read_i3c_ec_sec_fw_recovery_if_indirect_fifo_ctrl_0(size)),
            (_, 0x149..=0x14b) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x14c) => Ok(self
                .periph
                .read_i3c_ec_sec_fw_recovery_if_indirect_fifo_ctrl_1(size)),
            (_, 0x14d..=0x14f) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x150) => Ok(self
                .periph
                .read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_0(size)),
            (_, 0x151..=0x153) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x154) => Ok(self
                .periph
                .read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_1(size)),
            (_, 0x155..=0x157) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x158) => Ok(self
                .periph
                .read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_2(size)),
            (_, 0x159..=0x15b) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x15c) => Ok(self
                .periph
                .read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_3(size)),
            (_, 0x15d..=0x15f) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x160) => Ok(self
                .periph
                .read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_4(size)),
            (_, 0x161..=0x163) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x164) => Ok(self
                .periph
                .read_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_5(size)),
            (_, 0x165..=0x167) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x168) => Ok(self
                .periph
                .read_i3c_ec_sec_fw_recovery_if_indirect_fifo_data(size)),
            (_, 0x169..=0x16b) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (emulator_types::RvSize::Word, 0x180) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_stdby_ctrl_mode_extcap_header(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x181..=0x183) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x184) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_stdby_ctrl_mode_stby_cr_control(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x185..=0x187) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x188) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_stdby_ctrl_mode_stby_cr_device_addr(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x189..=0x18b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x18c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_stdby_ctrl_mode_stby_cr_capabilities(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x18d..=0x18f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (size, 0x190) => Ok(self.periph.read_i3c_ec_stdby_ctrl_mode_rsvd_0(size)),
            (_, 0x191..=0x193) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (emulator_types::RvSize::Word, 0x194) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_stdby_ctrl_mode_stby_cr_status(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x195..=0x197) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x198) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_stdby_ctrl_mode_stby_cr_device_char(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x199..=0x19b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (size, 0x19c) => Ok(self
                .periph
                .read_i3c_ec_stdby_ctrl_mode_stby_cr_device_pid_lo(size)),
            (_, 0x19d..=0x19f) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (emulator_types::RvSize::Word, 0x1a0) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_stdby_ctrl_mode_stby_cr_intr_status(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x1a1..=0x1a3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (size, 0x1a4) => Ok(self.periph.read_i3c_ec_stdby_ctrl_mode_rsvd_1(size)),
            (_, 0x1a5..=0x1a7) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (emulator_types::RvSize::Word, 0x1a8) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_stdby_ctrl_mode_stby_cr_intr_signal_enable(
                        emulator_types::RvSize::Word,
                    )
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x1a9..=0x1ab) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1ac) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_stdby_ctrl_mode_stby_cr_intr_force(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x1ad..=0x1af) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1b0) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_stdby_ctrl_mode_stby_cr_ccc_config_getcaps(
                        emulator_types::RvSize::Word,
                    )
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x1b1..=0x1b3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1b4) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_stdby_ctrl_mode_stby_cr_ccc_config_rstact_params(
                        emulator_types::RvSize::Word,
                    )
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x1b5..=0x1b7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (size, 0x1b8) => Ok(self.periph.read_i3c_ec_stdby_ctrl_mode_rsvd_2(size)),
            (_, 0x1b9..=0x1bb) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x1bc) => Ok(self.periph.read_i3c_ec_stdby_ctrl_mode_rsvd_3(size)),
            (_, 0x1bd..=0x1bf) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (emulator_types::RvSize::Word, 0x1c0) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_tti_extcap_header(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x1c1..=0x1c3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (size, 0x1c4) => Ok(self.periph.read_i3c_ec_tti_control(size)),
            (_, 0x1c5..=0x1c7) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x1c8) => Ok(self.periph.read_i3c_ec_tti_status(size)),
            (_, 0x1c9..=0x1cb) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (emulator_types::RvSize::Word, 0x1cc) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_tti_tti_reset_control(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x1cd..=0x1cf) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1d0) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_tti_interrupt_status(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x1d1..=0x1d3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1d4) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_tti_interrupt_enable(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x1d5..=0x1d7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1d8) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_tti_interrupt_force(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x1d9..=0x1db) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (size, 0x1dc) => Ok(self.periph.read_i3c_ec_tti_rx_desc_queue_port(size)),
            (_, 0x1dd..=0x1df) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x1e0) => Ok(self.periph.read_i3c_ec_tti_rx_data_port(size)),
            (_, 0x1e1..=0x1e3) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (emulator_types::RvSize::Word, 0x1f0) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_tti_tti_queue_size(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x1f1..=0x1f3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1f4) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_tti_ibi_tti_queue_size(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x1f5..=0x1f7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1f8) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_tti_tti_queue_thld_ctrl(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x1f9..=0x1fb) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1fc) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_tti_tti_data_buffer_thld_ctrl(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x1fd..=0x1ff) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x200) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_soc_mgmt_if_extcap_header(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x201..=0x203) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (size, 0x204) => Ok(self.periph.read_i3c_ec_soc_mgmt_if_soc_mgmt_control(size)),
            (_, 0x205..=0x207) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x208) => Ok(self.periph.read_i3c_ec_soc_mgmt_if_soc_mgmt_status(size)),
            (_, 0x209..=0x20b) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x20c) => Ok(self.periph.read_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_0(size)),
            (_, 0x20d..=0x20f) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x210) => Ok(self.periph.read_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_1(size)),
            (_, 0x211..=0x213) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x214) => Ok(self.periph.read_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_2(size)),
            (_, 0x215..=0x217) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x218) => Ok(self.periph.read_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_3(size)),
            (_, 0x219..=0x21b) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (emulator_types::RvSize::Word, 0x21c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_soc_mgmt_if_soc_pad_conf(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x21d..=0x21f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x220) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_soc_mgmt_if_soc_pad_attr(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x221..=0x223) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (size, 0x224) => Ok(self.periph.read_i3c_ec_soc_mgmt_if_soc_mgmt_feature_2(size)),
            (_, 0x225..=0x227) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x228) => Ok(self.periph.read_i3c_ec_soc_mgmt_if_soc_mgmt_feature_3(size)),
            (_, 0x229..=0x22b) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (emulator_types::RvSize::Word, 0x22c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_soc_mgmt_if_t_r_reg(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x22d..=0x22f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x230) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_soc_mgmt_if_t_f_reg(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x231..=0x233) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x234) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_soc_mgmt_if_t_su_dat_reg(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x235..=0x237) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x238) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_soc_mgmt_if_t_hd_dat_reg(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x239..=0x23b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x23c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_soc_mgmt_if_t_high_reg(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x23d..=0x23f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x240) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_soc_mgmt_if_t_low_reg(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x241..=0x243) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x244) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_soc_mgmt_if_t_hd_sta_reg(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x245..=0x247) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x248) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_soc_mgmt_if_t_su_sta_reg(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x249..=0x24b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x24c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_soc_mgmt_if_t_su_sto_reg(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x24d..=0x24f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (size, 0x250) => Ok(self.periph.read_i3c_ec_soc_mgmt_if_t_free_reg(size)),
            (_, 0x251..=0x253) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x254) => Ok(self.periph.read_i3c_ec_soc_mgmt_if_t_aval_reg(size)),
            (_, 0x255..=0x257) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x258) => Ok(self.periph.read_i3c_ec_soc_mgmt_if_t_idle_reg(size)),
            (_, 0x259..=0x25b) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (emulator_types::RvSize::Word, 0x260) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_ctrl_cfg_extcap_header(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x261..=0x263) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x264) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_i3c_ec_ctrl_cfg_controller_config(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x265..=0x267) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            _ => Err(emulator_bus::BusError::LoadAccessFault),
        }
    }
    fn write(
        &mut self,
        size: emulator_types::RvSize,
        addr: emulator_types::RvAddr,
        val: emulator_types::RvData,
    ) -> Result<(), emulator_bus::BusError> {
        match (size, addr) {
            (size, 0x400) => {
                self.periph.write_dat(size, val);
                Ok(())
            }
            (_, 0x401..=0x403) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x800) => {
                self.periph.write_dct(size, val);
                Ok(())
            }
            (_, 0x801..=0x803) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (emulator_types::RvSize::Word, 4) => {
                self.periph.write_i3c_base_hc_control(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 5..=7) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 8) => {
                self.periph.write_i3c_base_controller_device_addr(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 9..=0xb) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x10) => {
                self.periph.write_i3c_base_reset_control(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x11..=0x13) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x20) => {
                self.periph.write_i3c_base_intr_status(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x21..=0x23) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x24) => {
                self.periph.write_i3c_base_intr_status_enable(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x25..=0x27) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x28) => {
                self.periph.write_i3c_base_intr_signal_enable(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x29..=0x2b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x2c) => {
                self.periph.write_i3c_base_intr_force(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x2d..=0x2f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x34) => {
                self.periph.write_i3c_base_dct_section_offset(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x35..=0x37) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x58) => {
                self.periph.write_i3c_base_ibi_notify_ctrl(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x59..=0x5b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x5c) => {
                self.periph.write_i3c_base_ibi_data_abort_ctrl(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x5d..=0x5f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x60) => {
                self.periph.write_i3c_base_dev_ctx_base_lo(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x61..=0x63) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x64) => {
                self.periph.write_i3c_base_dev_ctx_base_hi(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x65..=0x67) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (size, 0x80) => {
                self.periph.write_piocontrol_command_port(size, val);
                Ok(())
            }
            (_, 0x81..=0x83) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x88) => {
                self.periph.write_piocontrol_tx_data_port(size, val);
                Ok(())
            }
            (_, 0x89..=0x8b) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (emulator_types::RvSize::Word, 0x90) => {
                self.periph.write_piocontrol_queue_thld_ctrl(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x91..=0x93) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x94) => {
                self.periph.write_piocontrol_data_buffer_thld_ctrl(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x95..=0x97) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa0) => {
                self.periph.write_piocontrol_pio_intr_status(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa1..=0xa3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa4) => {
                self.periph.write_piocontrol_pio_intr_status_enable(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa5..=0xa7) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa8) => {
                self.periph.write_piocontrol_pio_intr_signal_enable(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa9..=0xab) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xac) => {
                self.periph.write_piocontrol_pio_intr_force(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xad..=0xaf) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xb0) => {
                self.periph.write_piocontrol_pio_control(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xb1..=0xb3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (size, 0x104) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_prot_cap_0(size, val);
                Ok(())
            }
            (_, 0x105..=0x107) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x108) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_prot_cap_1(size, val);
                Ok(())
            }
            (_, 0x109..=0x10b) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x10c) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_prot_cap_2(size, val);
                Ok(())
            }
            (_, 0x10d..=0x10f) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x110) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_prot_cap_3(size, val);
                Ok(())
            }
            (_, 0x111..=0x113) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x114) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_device_id_0(size, val);
                Ok(())
            }
            (_, 0x115..=0x117) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x118) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_device_id_1(size, val);
                Ok(())
            }
            (_, 0x119..=0x11b) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x11c) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_device_id_2(size, val);
                Ok(())
            }
            (_, 0x11d..=0x11f) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x120) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_device_id_3(size, val);
                Ok(())
            }
            (_, 0x121..=0x123) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x124) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_device_id_4(size, val);
                Ok(())
            }
            (_, 0x125..=0x127) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x128) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_device_id_5(size, val);
                Ok(())
            }
            (_, 0x129..=0x12b) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x12c) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_device_id_6(size, val);
                Ok(())
            }
            (_, 0x12d..=0x12f) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x130) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_device_status_0(size, val);
                Ok(())
            }
            (_, 0x131..=0x133) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x134) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_device_status_1(size, val);
                Ok(())
            }
            (_, 0x135..=0x137) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x138) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_device_reset(size, val);
                Ok(())
            }
            (_, 0x139..=0x13b) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x13c) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_recovery_ctrl(size, val);
                Ok(())
            }
            (_, 0x13d..=0x13f) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x140) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_recovery_status(size, val);
                Ok(())
            }
            (_, 0x141..=0x143) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x144) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_hw_status(size, val);
                Ok(())
            }
            (_, 0x145..=0x147) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x148) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_indirect_fifo_ctrl_0(size, val);
                Ok(())
            }
            (_, 0x149..=0x14b) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x14c) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_indirect_fifo_ctrl_1(size, val);
                Ok(())
            }
            (_, 0x14d..=0x14f) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x150) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_0(size, val);
                Ok(())
            }
            (_, 0x151..=0x153) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x154) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_1(size, val);
                Ok(())
            }
            (_, 0x155..=0x157) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x158) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_2(size, val);
                Ok(())
            }
            (_, 0x159..=0x15b) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x15c) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_3(size, val);
                Ok(())
            }
            (_, 0x15d..=0x15f) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x160) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_4(size, val);
                Ok(())
            }
            (_, 0x161..=0x163) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x164) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_indirect_fifo_status_5(size, val);
                Ok(())
            }
            (_, 0x165..=0x167) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x168) => {
                self.periph
                    .write_i3c_ec_sec_fw_recovery_if_indirect_fifo_data(size, val);
                Ok(())
            }
            (_, 0x169..=0x16b) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (emulator_types::RvSize::Word, 0x184) => {
                self.periph.write_i3c_ec_stdby_ctrl_mode_stby_cr_control(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x185..=0x187) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x188) => {
                self.periph
                    .write_i3c_ec_stdby_ctrl_mode_stby_cr_device_addr(
                        emulator_types::RvSize::Word,
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x189..=0x18b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x18c) => {
                self.periph
                    .write_i3c_ec_stdby_ctrl_mode_stby_cr_capabilities(
                        emulator_types::RvSize::Word,
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x18d..=0x18f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (size, 0x190) => {
                self.periph.write_i3c_ec_stdby_ctrl_mode_rsvd_0(size, val);
                Ok(())
            }
            (_, 0x191..=0x193) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (emulator_types::RvSize::Word, 0x194) => {
                self.periph.write_i3c_ec_stdby_ctrl_mode_stby_cr_status(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x195..=0x197) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x198) => {
                self.periph
                    .write_i3c_ec_stdby_ctrl_mode_stby_cr_device_char(
                        emulator_types::RvSize::Word,
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x199..=0x19b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (size, 0x19c) => {
                self.periph
                    .write_i3c_ec_stdby_ctrl_mode_stby_cr_device_pid_lo(size, val);
                Ok(())
            }
            (_, 0x19d..=0x19f) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (emulator_types::RvSize::Word, 0x1a0) => {
                self.periph
                    .write_i3c_ec_stdby_ctrl_mode_stby_cr_intr_status(
                        emulator_types::RvSize::Word,
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1a1..=0x1a3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (size, 0x1a4) => {
                self.periph.write_i3c_ec_stdby_ctrl_mode_rsvd_1(size, val);
                Ok(())
            }
            (_, 0x1a5..=0x1a7) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (emulator_types::RvSize::Word, 0x1a8) => {
                self.periph
                    .write_i3c_ec_stdby_ctrl_mode_stby_cr_intr_signal_enable(
                        emulator_types::RvSize::Word,
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1a9..=0x1ab) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1ac) => {
                self.periph.write_i3c_ec_stdby_ctrl_mode_stby_cr_intr_force(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1ad..=0x1af) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1b0) => {
                self.periph
                    .write_i3c_ec_stdby_ctrl_mode_stby_cr_ccc_config_getcaps(
                        emulator_types::RvSize::Word,
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1b1..=0x1b3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1b4) => {
                self.periph
                    .write_i3c_ec_stdby_ctrl_mode_stby_cr_ccc_config_rstact_params(
                        emulator_types::RvSize::Word,
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1b5..=0x1b7) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (size, 0x1b8) => {
                self.periph.write_i3c_ec_stdby_ctrl_mode_rsvd_2(size, val);
                Ok(())
            }
            (_, 0x1b9..=0x1bb) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x1bc) => {
                self.periph.write_i3c_ec_stdby_ctrl_mode_rsvd_3(size, val);
                Ok(())
            }
            (_, 0x1bd..=0x1bf) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x1c4) => {
                self.periph.write_i3c_ec_tti_control(size, val);
                Ok(())
            }
            (_, 0x1c5..=0x1c7) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x1c8) => {
                self.periph.write_i3c_ec_tti_status(size, val);
                Ok(())
            }
            (_, 0x1c9..=0x1cb) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (emulator_types::RvSize::Word, 0x1cc) => {
                self.periph.write_i3c_ec_tti_tti_reset_control(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1cd..=0x1cf) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1d0) => {
                self.periph.write_i3c_ec_tti_interrupt_status(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1d1..=0x1d3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1d4) => {
                self.periph.write_i3c_ec_tti_interrupt_enable(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1d5..=0x1d7) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1d8) => {
                self.periph.write_i3c_ec_tti_interrupt_force(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1d9..=0x1db) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (size, 0x1e4) => {
                self.periph.write_i3c_ec_tti_tx_desc_queue_port(size, val);
                Ok(())
            }
            (_, 0x1e5..=0x1e7) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x1e8) => {
                self.periph.write_i3c_ec_tti_tx_data_port(size, val);
                Ok(())
            }
            (_, 0x1e9..=0x1eb) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x1ec) => {
                self.periph.write_i3c_ec_tti_tti_ibi_port(size, val);
                Ok(())
            }
            (_, 0x1ed..=0x1ef) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (emulator_types::RvSize::Word, 0x1f8) => {
                self.periph.write_i3c_ec_tti_tti_queue_thld_ctrl(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1f9..=0x1fb) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1fc) => {
                self.periph.write_i3c_ec_tti_tti_data_buffer_thld_ctrl(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x1fd..=0x1ff) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (size, 0x204) => {
                self.periph
                    .write_i3c_ec_soc_mgmt_if_soc_mgmt_control(size, val);
                Ok(())
            }
            (_, 0x205..=0x207) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x208) => {
                self.periph
                    .write_i3c_ec_soc_mgmt_if_soc_mgmt_status(size, val);
                Ok(())
            }
            (_, 0x209..=0x20b) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x20c) => {
                self.periph
                    .write_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_0(size, val);
                Ok(())
            }
            (_, 0x20d..=0x20f) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x210) => {
                self.periph
                    .write_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_1(size, val);
                Ok(())
            }
            (_, 0x211..=0x213) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x214) => {
                self.periph
                    .write_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_2(size, val);
                Ok(())
            }
            (_, 0x215..=0x217) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x218) => {
                self.periph
                    .write_i3c_ec_soc_mgmt_if_soc_mgmt_rsvd_3(size, val);
                Ok(())
            }
            (_, 0x219..=0x21b) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (emulator_types::RvSize::Word, 0x21c) => {
                self.periph.write_i3c_ec_soc_mgmt_if_soc_pad_conf(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x21d..=0x21f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x220) => {
                self.periph.write_i3c_ec_soc_mgmt_if_soc_pad_attr(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x221..=0x223) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (size, 0x224) => {
                self.periph
                    .write_i3c_ec_soc_mgmt_if_soc_mgmt_feature_2(size, val);
                Ok(())
            }
            (_, 0x225..=0x227) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x228) => {
                self.periph
                    .write_i3c_ec_soc_mgmt_if_soc_mgmt_feature_3(size, val);
                Ok(())
            }
            (_, 0x229..=0x22b) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (emulator_types::RvSize::Word, 0x22c) => {
                self.periph.write_i3c_ec_soc_mgmt_if_t_r_reg(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x22d..=0x22f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x230) => {
                self.periph.write_i3c_ec_soc_mgmt_if_t_f_reg(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x231..=0x233) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x234) => {
                self.periph.write_i3c_ec_soc_mgmt_if_t_su_dat_reg(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x235..=0x237) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x238) => {
                self.periph.write_i3c_ec_soc_mgmt_if_t_hd_dat_reg(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x239..=0x23b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x23c) => {
                self.periph.write_i3c_ec_soc_mgmt_if_t_high_reg(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x23d..=0x23f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x240) => {
                self.periph.write_i3c_ec_soc_mgmt_if_t_low_reg(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x241..=0x243) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x244) => {
                self.periph.write_i3c_ec_soc_mgmt_if_t_hd_sta_reg(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x245..=0x247) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x248) => {
                self.periph.write_i3c_ec_soc_mgmt_if_t_su_sta_reg(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x249..=0x24b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x24c) => {
                self.periph.write_i3c_ec_soc_mgmt_if_t_su_sto_reg(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x24d..=0x24f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (size, 0x250) => {
                self.periph.write_i3c_ec_soc_mgmt_if_t_free_reg(size, val);
                Ok(())
            }
            (_, 0x251..=0x253) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x254) => {
                self.periph.write_i3c_ec_soc_mgmt_if_t_aval_reg(size, val);
                Ok(())
            }
            (_, 0x255..=0x257) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x258) => {
                self.periph.write_i3c_ec_soc_mgmt_if_t_idle_reg(size, val);
                Ok(())
            }
            (_, 0x259..=0x25b) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            _ => Err(emulator_bus::BusError::StoreAccessFault),
        }
    }
    fn poll(&mut self) {
        self.periph.poll();
    }
    fn warm_reset(&mut self) {
        self.periph.warm_reset();
    }
    fn update_reset(&mut self) {
        self.periph.update_reset();
    }
}
