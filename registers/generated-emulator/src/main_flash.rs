// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-ss repo at 2ec4914686d656467fae8ff40ee7da03ee6f5ec3
//
#[allow(unused_imports)]
use tock_registers::interfaces::{Readable, Writeable};
pub trait MainFlashPeripheral {
    fn set_dma_ram(&mut self, _ram: std::rc::Rc<std::cell::RefCell<emulator_bus::Ram>>) {}
    fn poll(&mut self) {}
    fn warm_reset(&mut self) {}
    fn update_reset(&mut self) {}
    fn read_fl_interrupt_state(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::main_flash_ctrl::bits::FlInterruptState::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_fl_interrupt_state(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::main_flash_ctrl::bits::FlInterruptState::Register,
        >,
    ) {
    }
    fn read_fl_interrupt_enable(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::main_flash_ctrl::bits::FlInterruptEnable::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_fl_interrupt_enable(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::main_flash_ctrl::bits::FlInterruptEnable::Register,
        >,
    ) {
    }
    fn read_page_size(&mut self, _size: emulator_types::RvSize) -> emulator_types::RvData {
        0
    }
    fn write_page_size(&mut self, _size: emulator_types::RvSize, _val: emulator_types::RvData) {}
    fn read_page_num(&mut self, _size: emulator_types::RvSize) -> emulator_types::RvData {
        0
    }
    fn write_page_num(&mut self, _size: emulator_types::RvSize, _val: emulator_types::RvData) {}
    fn read_page_addr(&mut self, _size: emulator_types::RvSize) -> emulator_types::RvData {
        0
    }
    fn write_page_addr(&mut self, _size: emulator_types::RvSize, _val: emulator_types::RvData) {}
    fn read_fl_control(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::main_flash_ctrl::bits::FlControl::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_fl_control(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::main_flash_ctrl::bits::FlControl::Register,
        >,
    ) {
    }
    fn read_op_status(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::main_flash_ctrl::bits::OpStatus::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_op_status(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::main_flash_ctrl::bits::OpStatus::Register,
        >,
    ) {
    }
    fn read_ctrl_regwen(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::main_flash_ctrl::bits::CtrlRegwen::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
}
pub struct MainFlashBus {
    pub periph: Box<dyn MainFlashPeripheral>,
}
impl emulator_bus::Bus for MainFlashBus {
    fn read(
        &mut self,
        size: emulator_types::RvSize,
        addr: emulator_types::RvAddr,
    ) -> Result<emulator_types::RvData, emulator_bus::BusError> {
        match (size, addr) {
            (emulator_types::RvSize::Word, 0) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_fl_interrupt_state(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 1..=3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 4) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_fl_interrupt_enable(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 5..=7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (size, 8) => Ok(self.periph.read_page_size(size)),
            (_, 9..=0xb) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0xc) => Ok(self.periph.read_page_num(size)),
            (_, 0xd..=0xf) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x10) => Ok(self.periph.read_page_addr(size)),
            (_, 0x11..=0x13) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (emulator_types::RvSize::Word, 0x14) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_fl_control(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x15..=0x17) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x18) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_op_status(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x19..=0x1b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_ctrl_regwen(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x1d..=0x1f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            _ => Err(emulator_bus::BusError::LoadAccessFault),
        }
    }
    fn write(
        &mut self,
        size: emulator_types::RvSize,
        addr: emulator_types::RvAddr,
        val: emulator_types::RvData,
    ) -> Result<(), emulator_bus::BusError> {
        match (size, addr) {
            (emulator_types::RvSize::Word, 0) => {
                self.periph.write_fl_interrupt_state(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 1..=3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 4) => {
                self.periph.write_fl_interrupt_enable(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 5..=7) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (size, 8) => {
                self.periph.write_page_size(size, val);
                Ok(())
            }
            (_, 9..=0xb) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0xc) => {
                self.periph.write_page_num(size, val);
                Ok(())
            }
            (_, 0xd..=0xf) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (size, 0x10) => {
                self.periph.write_page_addr(size, val);
                Ok(())
            }
            (_, 0x11..=0x13) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (emulator_types::RvSize::Word, 0x14) => {
                self.periph.write_fl_control(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x15..=0x17) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x18) => {
                self.periph.write_op_status(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x19..=0x1b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            _ => Err(emulator_bus::BusError::StoreAccessFault),
        }
    }
    fn poll(&mut self) {
        self.periph.poll();
    }
    fn warm_reset(&mut self) {
        self.periph.warm_reset();
    }
    fn update_reset(&mut self) {
        self.periph.update_reset();
    }
}
