// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-ss repo at a621fff9df7015821eda6f7f73265fef74a01375
//
pub struct AutoRootBus {
    delegates: Vec<Box<dyn emulator_bus::Bus>>,
    pub i3c_periph: Option<crate::i3c::I3cBus>,
    pub flash_periph: Option<crate::flash::FlashBus>,
    pub entropy_src_periph: Option<crate::entropy_src::EntropySrcBus>,
    pub otp_periph: Option<crate::otp::OtpBus>,
    pub mbox_periph: Option<crate::mbox::MboxBus>,
    pub sha512_acc_periph: Option<crate::sha512_acc::Sha512AccBus>,
    pub soc_periph: Option<crate::soc::SocBus>,
    pub el2_pic_periph: Option<crate::el2_pic::El2PicBus>,
}
impl AutoRootBus {
    #[allow(clippy::too_many_arguments)]
    pub fn new(
        delegates: Vec<Box<dyn emulator_bus::Bus>>,
        i3c_periph: Option<Box<dyn crate::i3c::I3cPeripheral>>,
        flash_periph: Option<Box<dyn crate::flash::FlashPeripheral>>,
        entropy_src_periph: Option<Box<dyn crate::entropy_src::EntropySrcPeripheral>>,
        otp_periph: Option<Box<dyn crate::otp::OtpPeripheral>>,
        mbox_periph: Option<Box<dyn crate::mbox::MboxPeripheral>>,
        sha512_acc_periph: Option<Box<dyn crate::sha512_acc::Sha512AccPeripheral>>,
        soc_periph: Option<Box<dyn crate::soc::SocPeripheral>>,
        el2_pic_periph: Option<Box<dyn crate::el2_pic::El2PicPeripheral>>,
    ) -> Self {
        Self {
            delegates,
            i3c_periph: i3c_periph.map(|p| crate::i3c::I3cBus { periph: p }),
            flash_periph: flash_periph.map(|p| crate::flash::FlashBus { periph: p }),
            entropy_src_periph: entropy_src_periph
                .map(|p| crate::entropy_src::EntropySrcBus { periph: p }),
            otp_periph: otp_periph.map(|p| crate::otp::OtpBus { periph: p }),
            mbox_periph: mbox_periph.map(|p| crate::mbox::MboxBus { periph: p }),
            sha512_acc_periph: sha512_acc_periph
                .map(|p| crate::sha512_acc::Sha512AccBus { periph: p }),
            soc_periph: soc_periph.map(|p| crate::soc::SocBus { periph: p }),
            el2_pic_periph: el2_pic_periph.map(|p| crate::el2_pic::El2PicBus { periph: p }),
        }
    }
}
impl emulator_bus::Bus for AutoRootBus {
    fn read(
        &mut self,
        size: emulator_types::RvSize,
        addr: emulator_types::RvAddr,
    ) -> Result<emulator_types::RvData, emulator_bus::BusError> {
        let result = match addr {
            0x2000_4000..=0x2000_5988 => {
                if let Some(periph) = self.i3c_periph.as_mut() {
                    periph.read(size, addr - 0x2000_4000)
                } else {
                    Err(emulator_bus::BusError::LoadAccessFault)
                }
            }
            0x2000_8000..=0x2000_8090 => {
                if let Some(periph) = self.flash_periph.as_mut() {
                    periph.read(size, addr - 0x2000_8000)
                } else {
                    Err(emulator_bus::BusError::LoadAccessFault)
                }
            }
            0x2000_9000..=0x2000_a9d4 => {
                if let Some(periph) = self.entropy_src_periph.as_mut() {
                    periph.read(size, addr - 0x2000_9000)
                } else {
                    Err(emulator_bus::BusError::LoadAccessFault)
                }
            }
            0x2000_b000..=0x2000_b9dc => {
                if let Some(periph) = self.otp_periph.as_mut() {
                    periph.read(size, addr - 0x2000_b000)
                } else {
                    Err(emulator_bus::BusError::LoadAccessFault)
                }
            }
            0x3002_0000..=0x3002_00b4 => {
                if let Some(periph) = self.mbox_periph.as_mut() {
                    periph.read(size, addr - 0x3002_0000)
                } else {
                    Err(emulator_bus::BusError::LoadAccessFault)
                }
            }
            0x3002_1000..=0x3002_289c => {
                if let Some(periph) = self.sha512_acc_periph.as_mut() {
                    periph.read(size, addr - 0x3002_1000)
                } else {
                    Err(emulator_bus::BusError::LoadAccessFault)
                }
            }
            0x3003_0000..=0x3003_91c0 => {
                if let Some(periph) = self.soc_periph.as_mut() {
                    periph.read(size, addr - 0x3003_0000)
                } else {
                    Err(emulator_bus::BusError::LoadAccessFault)
                }
            }
            0x6000_0000..=0x6000_f018 => {
                if let Some(periph) = self.el2_pic_periph.as_mut() {
                    periph.read(size, addr - 0x6000_0000)
                } else {
                    Err(emulator_bus::BusError::LoadAccessFault)
                }
            }
            _ => Err(emulator_bus::BusError::LoadAccessFault),
        };
        if !matches!(result, Err(emulator_bus::BusError::LoadAccessFault)) {
            return result;
        }
        for delegate in self.delegates.iter_mut() {
            let result = delegate.read(size, addr);
            if !matches!(result, Err(emulator_bus::BusError::LoadAccessFault)) {
                return result;
            }
        }
        result
    }
    fn write(
        &mut self,
        size: emulator_types::RvSize,
        addr: emulator_types::RvAddr,
        val: emulator_types::RvData,
    ) -> Result<(), emulator_bus::BusError> {
        let result = match addr {
            0x2000_4000..=0x2000_5988 => {
                if let Some(periph) = self.i3c_periph.as_mut() {
                    periph.write(size, addr - 0x2000_4000, val)
                } else {
                    Err(emulator_bus::BusError::StoreAccessFault)
                }
            }
            0x2000_8000..=0x2000_8090 => {
                if let Some(periph) = self.flash_periph.as_mut() {
                    periph.write(size, addr - 0x2000_8000, val)
                } else {
                    Err(emulator_bus::BusError::StoreAccessFault)
                }
            }
            0x2000_9000..=0x2000_a9d4 => {
                if let Some(periph) = self.entropy_src_periph.as_mut() {
                    periph.write(size, addr - 0x2000_9000, val)
                } else {
                    Err(emulator_bus::BusError::StoreAccessFault)
                }
            }
            0x2000_b000..=0x2000_b9dc => {
                if let Some(periph) = self.otp_periph.as_mut() {
                    periph.write(size, addr - 0x2000_b000, val)
                } else {
                    Err(emulator_bus::BusError::StoreAccessFault)
                }
            }
            0x3002_0000..=0x3002_00b4 => {
                if let Some(periph) = self.mbox_periph.as_mut() {
                    periph.write(size, addr - 0x3002_0000, val)
                } else {
                    Err(emulator_bus::BusError::StoreAccessFault)
                }
            }
            0x3002_1000..=0x3002_289c => {
                if let Some(periph) = self.sha512_acc_periph.as_mut() {
                    periph.write(size, addr - 0x3002_1000, val)
                } else {
                    Err(emulator_bus::BusError::StoreAccessFault)
                }
            }
            0x3003_0000..=0x3003_91c0 => {
                if let Some(periph) = self.soc_periph.as_mut() {
                    periph.write(size, addr - 0x3003_0000, val)
                } else {
                    Err(emulator_bus::BusError::StoreAccessFault)
                }
            }
            0x6000_0000..=0x6000_f018 => {
                if let Some(periph) = self.el2_pic_periph.as_mut() {
                    periph.write(size, addr - 0x6000_0000, val)
                } else {
                    Err(emulator_bus::BusError::StoreAccessFault)
                }
            }
            _ => Err(emulator_bus::BusError::StoreAccessFault),
        };
        if !matches!(result, Err(emulator_bus::BusError::StoreAccessFault)) {
            return result;
        }
        for delegate in self.delegates.iter_mut() {
            let result = delegate.write(size, addr, val);
            if !matches!(result, Err(emulator_bus::BusError::StoreAccessFault)) {
                return result;
            }
        }
        result
    }
    fn poll(&mut self) {
        if let Some(periph) = self.i3c_periph.as_mut() {
            periph.poll();
        }
        if let Some(periph) = self.flash_periph.as_mut() {
            periph.poll();
        }
        if let Some(periph) = self.entropy_src_periph.as_mut() {
            periph.poll();
        }
        if let Some(periph) = self.otp_periph.as_mut() {
            periph.poll();
        }
        if let Some(periph) = self.mbox_periph.as_mut() {
            periph.poll();
        }
        if let Some(periph) = self.sha512_acc_periph.as_mut() {
            periph.poll();
        }
        if let Some(periph) = self.soc_periph.as_mut() {
            periph.poll();
        }
        if let Some(periph) = self.el2_pic_periph.as_mut() {
            periph.poll();
        }
        for delegate in self.delegates.iter_mut() {
            delegate.poll();
        }
    }
    fn warm_reset(&mut self) {
        if let Some(periph) = self.i3c_periph.as_mut() {
            periph.warm_reset();
        }
        if let Some(periph) = self.flash_periph.as_mut() {
            periph.warm_reset();
        }
        if let Some(periph) = self.entropy_src_periph.as_mut() {
            periph.warm_reset();
        }
        if let Some(periph) = self.otp_periph.as_mut() {
            periph.warm_reset();
        }
        if let Some(periph) = self.mbox_periph.as_mut() {
            periph.warm_reset();
        }
        if let Some(periph) = self.sha512_acc_periph.as_mut() {
            periph.warm_reset();
        }
        if let Some(periph) = self.soc_periph.as_mut() {
            periph.warm_reset();
        }
        if let Some(periph) = self.el2_pic_periph.as_mut() {
            periph.warm_reset();
        }
        for delegate in self.delegates.iter_mut() {
            delegate.warm_reset();
        }
    }
    fn update_reset(&mut self) {
        if let Some(periph) = self.i3c_periph.as_mut() {
            periph.update_reset();
        }
        if let Some(periph) = self.flash_periph.as_mut() {
            periph.update_reset();
        }
        if let Some(periph) = self.entropy_src_periph.as_mut() {
            periph.update_reset();
        }
        if let Some(periph) = self.otp_periph.as_mut() {
            periph.update_reset();
        }
        if let Some(periph) = self.mbox_periph.as_mut() {
            periph.update_reset();
        }
        if let Some(periph) = self.sha512_acc_periph.as_mut() {
            periph.update_reset();
        }
        if let Some(periph) = self.soc_periph.as_mut() {
            periph.update_reset();
        }
        if let Some(periph) = self.el2_pic_periph.as_mut() {
            periph.update_reset();
        }
        for delegate in self.delegates.iter_mut() {
            delegate.update_reset();
        }
    }
}
