// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-ss repo at a621fff9df7015821eda6f7f73265fef74a01375
//
#[allow(unused_imports)]
use tock_registers::interfaces::{Readable, Writeable};
pub trait EntropySrcPeripheral {
    fn set_dma_ram(&mut self, _ram: std::rc::Rc<std::cell::RefCell<emulator_bus::Ram>>) {}
    fn poll(&mut self) {}
    fn warm_reset(&mut self) {}
    fn update_reset(&mut self) {}
    fn read_interrupt_state(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::InterruptState::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_interrupt_state(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::InterruptState::Register,
        >,
    ) {
    }
    fn read_entropy_interrupt_enable(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::EntropyInterruptEnable::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_entropy_interrupt_enable(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::entropy_src::bits::EntropyInterruptEnable::Register,
        >,
    ) {
    }
    fn write_interrupt_test(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::InterruptTest::Register,
        >,
    ) {
    }
    fn write_alert_test(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::AlertTest::Register,
        >,
    ) {
    }
    fn read_me_regwen(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::MeRegwen::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_me_regwen(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::entropy_src::bits::MeRegwen::Register,
        >,
    ) {
    }
    fn read_sw_regupd(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::SwRegupd::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_sw_regupd(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::entropy_src::bits::SwRegupd::Register,
        >,
    ) {
    }
    fn read_regwen(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::Regwen::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_rev(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::entropy_src::bits::Rev::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_module_enable(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::ModuleEnable::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_module_enable(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::entropy_src::bits::ModuleEnable::Register,
        >,
    ) {
    }
    fn read_conf(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::entropy_src::bits::Conf::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_conf(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::entropy_src::bits::Conf::Register,
        >,
    ) {
    }
    fn read_entropy_control(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::EntropyControl::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_entropy_control(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::entropy_src::bits::EntropyControl::Register,
        >,
    ) {
    }
    fn read_entropy_data(&mut self, _size: emulator_types::RvSize) -> emulator_types::RvData {
        0
    }
    fn read_health_test_windows(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::HealthTestWindows::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_health_test_windows(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::entropy_src::bits::HealthTestWindows::Register,
        >,
    ) {
    }
    fn read_repcnt_thresholds(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::RepcntThresholds::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_repcnt_thresholds(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::entropy_src::bits::RepcntThresholds::Register,
        >,
    ) {
    }
    fn read_repcnts_thresholds(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::RepcntsThresholds::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_repcnts_thresholds(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::entropy_src::bits::RepcntsThresholds::Register,
        >,
    ) {
    }
    fn read_adaptp_hi_thresholds(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::AdaptpHiThresholds::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_adaptp_hi_thresholds(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::entropy_src::bits::AdaptpHiThresholds::Register,
        >,
    ) {
    }
    fn read_adaptp_lo_thresholds(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::AdaptpLoThresholds::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_adaptp_lo_thresholds(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::entropy_src::bits::AdaptpLoThresholds::Register,
        >,
    ) {
    }
    fn read_bucket_thresholds(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::BucketThresholds::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_bucket_thresholds(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::entropy_src::bits::BucketThresholds::Register,
        >,
    ) {
    }
    fn read_markov_hi_thresholds(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::MarkovHiThresholds::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_markov_hi_thresholds(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::entropy_src::bits::MarkovHiThresholds::Register,
        >,
    ) {
    }
    fn read_markov_lo_thresholds(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::MarkovLoThresholds::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_markov_lo_thresholds(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::entropy_src::bits::MarkovLoThresholds::Register,
        >,
    ) {
    }
    fn read_extht_hi_thresholds(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::ExthtHiThresholds::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_extht_hi_thresholds(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::entropy_src::bits::ExthtHiThresholds::Register,
        >,
    ) {
    }
    fn read_extht_lo_thresholds(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::ExthtLoThresholds::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_extht_lo_thresholds(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::entropy_src::bits::ExthtLoThresholds::Register,
        >,
    ) {
    }
    fn read_repcnt_hi_watermarks(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::RepcntHiWatermarks::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_repcnts_hi_watermarks(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::RepcntsHiWatermarks::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_adaptp_hi_watermarks(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::AdaptpHiWatermarks::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_adaptp_lo_watermarks(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::AdaptpLoWatermarks::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_extht_hi_watermarks(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::ExthtHiWatermarks::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_extht_lo_watermarks(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::ExthtLoWatermarks::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_bucket_hi_watermarks(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::BucketHiWatermarks::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_markov_hi_watermarks(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::MarkovHiWatermarks::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_markov_lo_watermarks(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::MarkovLoWatermarks::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_repcnt_total_fails(&mut self, _size: emulator_types::RvSize) -> emulator_types::RvData {
        0
    }
    fn read_repcnts_total_fails(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn read_adaptp_hi_total_fails(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn read_adaptp_lo_total_fails(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn read_bucket_total_fails(&mut self, _size: emulator_types::RvSize) -> emulator_types::RvData {
        0
    }
    fn read_markov_hi_total_fails(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn read_markov_lo_total_fails(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn read_extht_hi_total_fails(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn read_extht_lo_total_fails(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_types::RvData {
        0
    }
    fn read_alert_threshold(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::AlertThreshold::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_alert_threshold(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::entropy_src::bits::AlertThreshold::Register,
        >,
    ) {
    }
    fn read_alert_summary_fail_counts(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::AlertSummaryFailCounts::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_alert_fail_counts(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::AlertFailCounts::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_extht_fail_counts(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::ExthtFailCounts::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_fw_ov_control(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::FwOvControl::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_fw_ov_control(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::entropy_src::bits::FwOvControl::Register,
        >,
    ) {
    }
    fn read_fw_ov_sha3_start(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::FwOvSha3Start::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_fw_ov_sha3_start(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::entropy_src::bits::FwOvSha3Start::Register,
        >,
    ) {
    }
    fn read_fw_ov_wr_fifo_full(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::FwOvWrFifoFull::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_fw_ov_rd_fifo_overflow(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::FwOvRdFifoOverflow::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_fw_ov_rd_data(&mut self, _size: emulator_types::RvSize) -> emulator_types::RvData {
        0
    }
    fn write_fw_ov_wr_data(&mut self, _size: emulator_types::RvSize, _val: emulator_types::RvData) {
    }
    fn read_observe_fifo_thresh(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::ObserveFifoThresh::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_observe_fifo_thresh(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::entropy_src::bits::ObserveFifoThresh::Register,
        >,
    ) {
    }
    fn read_observe_fifo_depth(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::ObserveFifoDepth::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_debug_status(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::DebugStatus::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_recov_alert_sts(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::RecovAlertSts::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_recov_alert_sts(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::entropy_src::bits::RecovAlertSts::Register,
        >,
    ) {
    }
    fn read_err_code(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::ErrCode::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_err_code_test(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::ErrCodeTest::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_err_code_test(
        &mut self,
        _size: emulator_types::RvSize,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::entropy_src::bits::ErrCodeTest::Register,
        >,
    ) {
    }
    fn read_main_sm_state(
        &mut self,
        _size: emulator_types::RvSize,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::entropy_src::bits::MainSmState::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
}
pub struct EntropySrcBus {
    pub periph: Box<dyn EntropySrcPeripheral>,
}
impl emulator_bus::Bus for EntropySrcBus {
    fn read(
        &mut self,
        size: emulator_types::RvSize,
        addr: emulator_types::RvAddr,
    ) -> Result<emulator_types::RvData, emulator_bus::BusError> {
        match (size, addr) {
            (emulator_types::RvSize::Word, 0) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_interrupt_state(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 1..=3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 4) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_entropy_interrupt_enable(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 5..=7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x10) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_me_regwen(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x11..=0x13) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x14) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_sw_regupd(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x15..=0x17) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x18) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_regwen(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x19..=0x1b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x1c) => Ok(emulator_types::RvData::from(
                self.periph.read_rev(emulator_types::RvSize::Word).reg.get(),
            )),
            (emulator_types::RvSize::Word, 0x1d..=0x1f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x20) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_module_enable(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x21..=0x23) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x24) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_conf(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x25..=0x27) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x28) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_entropy_control(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x29..=0x2b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (size, 0x2c) => Ok(self.periph.read_entropy_data(size)),
            (_, 0x2d..=0x2f) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (emulator_types::RvSize::Word, 0x30) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_health_test_windows(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x31..=0x33) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x34) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_repcnt_thresholds(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x35..=0x37) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x38) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_repcnts_thresholds(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x39..=0x3b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x3c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_adaptp_hi_thresholds(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x3d..=0x3f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x40) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_adaptp_lo_thresholds(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x41..=0x43) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x44) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_bucket_thresholds(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x45..=0x47) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x48) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_markov_hi_thresholds(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x49..=0x4b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x4c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_markov_lo_thresholds(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x4d..=0x4f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x50) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_extht_hi_thresholds(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x51..=0x53) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x54) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_extht_lo_thresholds(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x55..=0x57) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x58) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_repcnt_hi_watermarks(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x59..=0x5b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x5c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_repcnts_hi_watermarks(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x5d..=0x5f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x60) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_adaptp_hi_watermarks(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x61..=0x63) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x64) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_adaptp_lo_watermarks(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x65..=0x67) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x68) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_extht_hi_watermarks(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x69..=0x6b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x6c) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_extht_lo_watermarks(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x6d..=0x6f) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x70) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_bucket_hi_watermarks(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x71..=0x73) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x74) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_markov_hi_watermarks(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x75..=0x77) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x78) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_markov_lo_watermarks(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0x79..=0x7b) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (size, 0x7c) => Ok(self.periph.read_repcnt_total_fails(size)),
            (_, 0x7d..=0x7f) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x80) => Ok(self.periph.read_repcnts_total_fails(size)),
            (_, 0x81..=0x83) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x84) => Ok(self.periph.read_adaptp_hi_total_fails(size)),
            (_, 0x85..=0x87) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x88) => Ok(self.periph.read_adaptp_lo_total_fails(size)),
            (_, 0x89..=0x8b) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x8c) => Ok(self.periph.read_bucket_total_fails(size)),
            (_, 0x8d..=0x8f) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x90) => Ok(self.periph.read_markov_hi_total_fails(size)),
            (_, 0x91..=0x93) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x94) => Ok(self.periph.read_markov_lo_total_fails(size)),
            (_, 0x95..=0x97) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x98) => Ok(self.periph.read_extht_hi_total_fails(size)),
            (_, 0x99..=0x9b) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (size, 0x9c) => Ok(self.periph.read_extht_lo_total_fails(size)),
            (_, 0x9d..=0x9f) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (emulator_types::RvSize::Word, 0xa0) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_alert_threshold(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa1..=0xa3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa4) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_alert_summary_fail_counts(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa5..=0xa7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa8) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_alert_fail_counts(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xa9..=0xab) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xac) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_extht_fail_counts(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xad..=0xaf) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xb0) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_fw_ov_control(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xb1..=0xb3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xb4) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_fw_ov_sha3_start(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xb5..=0xb7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xb8) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_fw_ov_wr_fifo_full(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xb9..=0xbb) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xbc) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_fw_ov_rd_fifo_overflow(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xbd..=0xbf) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (size, 0xc0) => Ok(self.periph.read_fw_ov_rd_data(size)),
            (_, 0xc1..=0xc3) => Err(emulator_bus::BusError::LoadAddrMisaligned),
            (emulator_types::RvSize::Word, 0xc8) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_observe_fifo_thresh(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xc9..=0xcb) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xcc) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_observe_fifo_depth(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xcd..=0xcf) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xd0) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_debug_status(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xd1..=0xd3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xd4) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_recov_alert_sts(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xd5..=0xd7) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xd8) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_err_code(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xd9..=0xdb) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xdc) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_err_code_test(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xdd..=0xdf) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xe0) => Ok(emulator_types::RvData::from(
                self.periph
                    .read_main_sm_state(emulator_types::RvSize::Word)
                    .reg
                    .get(),
            )),
            (emulator_types::RvSize::Word, 0xe1..=0xe3) => {
                Err(emulator_bus::BusError::LoadAddrMisaligned)
            }
            _ => Err(emulator_bus::BusError::LoadAccessFault),
        }
    }
    fn write(
        &mut self,
        size: emulator_types::RvSize,
        addr: emulator_types::RvAddr,
        val: emulator_types::RvData,
    ) -> Result<(), emulator_bus::BusError> {
        match (size, addr) {
            (emulator_types::RvSize::Word, 0) => {
                self.periph.write_interrupt_state(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 1..=3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 4) => {
                self.periph.write_entropy_interrupt_enable(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 5..=7) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 8) => {
                self.periph.write_interrupt_test(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 9..=0xb) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xc) => {
                self.periph.write_alert_test(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xd..=0xf) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x10) => {
                self.periph.write_me_regwen(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x11..=0x13) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x14) => {
                self.periph.write_sw_regupd(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x15..=0x17) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x20) => {
                self.periph.write_module_enable(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x21..=0x23) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x24) => {
                self.periph.write_conf(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x25..=0x27) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x28) => {
                self.periph.write_entropy_control(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x29..=0x2b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x30) => {
                self.periph.write_health_test_windows(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x31..=0x33) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x34) => {
                self.periph.write_repcnt_thresholds(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x35..=0x37) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x38) => {
                self.periph.write_repcnts_thresholds(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x39..=0x3b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x3c) => {
                self.periph.write_adaptp_hi_thresholds(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x3d..=0x3f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x40) => {
                self.periph.write_adaptp_lo_thresholds(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x41..=0x43) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x44) => {
                self.periph.write_bucket_thresholds(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x45..=0x47) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x48) => {
                self.periph.write_markov_hi_thresholds(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x49..=0x4b) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x4c) => {
                self.periph.write_markov_lo_thresholds(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x4d..=0x4f) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x50) => {
                self.periph.write_extht_hi_thresholds(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x51..=0x53) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0x54) => {
                self.periph.write_extht_lo_thresholds(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0x55..=0x57) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xa0) => {
                self.periph.write_alert_threshold(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xa1..=0xa3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xb0) => {
                self.periph.write_fw_ov_control(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xb1..=0xb3) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xb4) => {
                self.periph.write_fw_ov_sha3_start(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xb5..=0xb7) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (size, 0xc4) => {
                self.periph.write_fw_ov_wr_data(size, val);
                Ok(())
            }
            (_, 0xc5..=0xc7) => Err(emulator_bus::BusError::StoreAddrMisaligned),
            (emulator_types::RvSize::Word, 0xc8) => {
                self.periph.write_observe_fifo_thresh(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xc9..=0xcb) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xd4) => {
                self.periph.write_recov_alert_sts(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xd5..=0xd7) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            (emulator_types::RvSize::Word, 0xdc) => {
                self.periph.write_err_code_test(
                    emulator_types::RvSize::Word,
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            (emulator_types::RvSize::Word, 0xdd..=0xdf) => {
                Err(emulator_bus::BusError::StoreAddrMisaligned)
            }
            _ => Err(emulator_bus::BusError::StoreAccessFault),
        }
    }
    fn poll(&mut self) {
        self.periph.poll();
    }
    fn warm_reset(&mut self) {
        self.periph.warm_reset();
    }
    fn update_reset(&mut self) {
        self.periph.update_reset();
    }
}
